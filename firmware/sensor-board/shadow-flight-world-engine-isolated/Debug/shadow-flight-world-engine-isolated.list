
shadow-flight-world-engine-isolated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006efc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080070a0  080070a0  000080a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800745c  0800745c  000091d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800745c  0800745c  0000845c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007464  08007464  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007464  08007464  00008464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800746c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004248  200001d8  08007644  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004420  08007644  00009420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001441d  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e68  00000000  00000000  0001d625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00020490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fcf  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019072  00000000  00000000  0002288f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016926  00000000  00000000  0003b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a5e7  00000000  00000000  00052227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec80e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006500  00000000  00000000  000ec854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000f2d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007084 	.word	0x08007084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007084 	.word	0x08007084

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200001f4 	.word	0x200001f4
 8000f14:	20000248 	.word	0x20000248

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fc0f 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f821 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f901 	bl	800112c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2a:	f000 f87d 	bl	8001028 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f2e:	f000 f8a9 	bl	8001084 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f32:	f000 f8d1 	bl	80010d8 <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <main+0x48>)
 8000f38:	1d3c      	adds	r4, r7, #4
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 f9d8 	bl	8003302 <osThreadCreate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a03      	ldr	r2, [pc, #12]	@ (8000f64 <main+0x4c>)
 8000f56:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f58:	f002 f9cc 	bl	80032f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <main+0x44>
 8000f60:	080070ac 	.word	0x080070ac
 8000f64:	2000052c 	.word	0x2000052c

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	@ 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	@ 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 f95f 	bl	800523a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <SystemClock_Config+0xb8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a22      	ldr	r2, [pc, #136]	@ (8001020 <SystemClock_Config+0xb8>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <SystemClock_Config+0xb8>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <SystemClock_Config+0xbc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <SystemClock_Config+0xbc>)
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <SystemClock_Config+0xbc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ffb5 	bl	8001f4c <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fe8:	f000 f918 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fa18 	bl	800243c <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001012:	f000 f903 	bl	800121c <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	@ 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_I2C1_Init+0x50>)
 800102e:	4a13      	ldr	r2, [pc, #76]	@ (800107c <MX_I2C1_Init+0x54>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001034:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x58>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001046:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800104a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_I2C1_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_I2C1_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_I2C1_Init+0x50>)
 8001066:	f000 fe2d 	bl	8001cc4 <HAL_I2C_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001070:	f000 f8d4 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000448 	.word	0x20000448
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0

08001084 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_USART1_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART1_UART_Init+0x4c>)
 80010bc:	f001 fe3e 	bl	8002d3c <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8a9 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000049c 	.word	0x2000049c
 80010d4:	40011000 	.word	0x40011000

080010d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART6_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART6_UART_Init+0x4c>)
 8001110:	f001 fe14 	bl	8002d3c <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f87f 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200004e4 	.word	0x200004e4
 8001128:	40011400 	.word	0x40011400

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_ACTIVATE_GPIO_Port, GPS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2101      	movs	r1, #1
 800119a:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <MX_GPIO_Init+0xb8>)
 800119c:	f000 fd78 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_ACTIVATE_Pin */
  GPIO_InitStruct.Pin = GPS_ACTIVATE_Pin;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <MX_GPIO_Init+0xb8>)
 80011b8:	f000 fbe6 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_PPS_Pin MAG_INT_Pin DS18B20_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|MAG_INT_Pin|DS18B20_Pin;
 80011bc:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 80011c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_GPIO_Init+0xb8>)
 80011d2:	f000 fbd9 	bl	8001988 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 f8d2 	bl	800339a <osDelay>
 80011f6:	e7fb      	b.n	80011f0 <StartDefaultTask+0x8>

080011f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800120a:	f000 fabb 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_MspInit+0x54>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_MspInit+0x54>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_MspInit+0x54>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <HAL_MspInit+0x54>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_MspInit+0x54>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	210f      	movs	r1, #15
 800126a:	f06f 0001 	mvn.w	r0, #1
 800126e:	f000 fb61 	bl	8001934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	@ (8001304 <HAL_I2C_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12b      	bne.n	80012fa <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012be:	23c0      	movs	r3, #192	@ 0xc0
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c2:	2312      	movs	r3, #18
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ce:	2304      	movs	r3, #4
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <HAL_I2C_MspInit+0x8c>)
 80012da:	f000 fb55 	bl	8001988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_I2C_MspInit+0x88>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	@ 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	@ 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a33      	ldr	r2, [pc, #204]	@ (80013fc <HAL_UART_MspInit+0xec>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12d      	bne.n	800138e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6453      	str	r3, [r2, #68]	@ 0x44
 8001342:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a2a      	ldr	r2, [pc, #168]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800136a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137c:	2307      	movs	r3, #7
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	481f      	ldr	r0, [pc, #124]	@ (8001404 <HAL_UART_MspInit+0xf4>)
 8001388:	f000 fafe 	bl	8001988 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800138c:	e031      	b.n	80013f2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_UART_MspInit+0xf8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12c      	bne.n	80013f2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a0:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 80013a2:	f043 0320 	orr.w	r3, r3, #32
 80013a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a8:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 80013aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_UART_MspInit+0xf0>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013e2:	2308      	movs	r3, #8
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <HAL_UART_MspInit+0xf4>)
 80013ee:	f000 facb 	bl	8001988 <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	@ 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40011400 	.word	0x40011400

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	@ 0x30
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <HAL_InitTick+0xd0>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	4a2d      	ldr	r2, [pc, #180]	@ (80014dc <HAL_InitTick+0xd0>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6453      	str	r3, [r2, #68]	@ 0x44
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_InitTick+0xd0>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 020c 	add.w	r2, r7, #12
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 f9da 	bl	80027fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001448:	f001 f9c4 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 800144c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <HAL_InitTick+0xd4>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	3b01      	subs	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <HAL_InitTick+0xd8>)
 800145e:	4a22      	ldr	r2, [pc, #136]	@ (80014e8 <HAL_InitTick+0xdc>)
 8001460:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <HAL_InitTick+0xd8>)
 8001464:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001468:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800146a:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_InitTick+0xd8>)
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001470:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <HAL_InitTick+0xd8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_InitTick+0xd8>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_InitTick+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001482:	4818      	ldr	r0, [pc, #96]	@ (80014e4 <HAL_InitTick+0xd8>)
 8001484:	f001 f9ec 	bl	8002860 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800148e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11b      	bne.n	80014ce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001496:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <HAL_InitTick+0xd8>)
 8001498:	f001 fa3c 	bl	8002914 <HAL_TIM_Base_Start_IT>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d111      	bne.n	80014ce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014aa:	2019      	movs	r0, #25
 80014ac:	f000 fa5e 	bl	800196c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d808      	bhi.n	80014c8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014b6:	2200      	movs	r2, #0
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	2019      	movs	r0, #25
 80014bc:	f000 fa3a 	bl	8001934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c0:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <HAL_InitTick+0xe0>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e002      	b.n	80014ce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3730      	adds	r7, #48	@ 0x30
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	431bde83 	.word	0x431bde83
 80014e4:	20000530 	.word	0x20000530
 80014e8:	40010000 	.word	0x40010000
 80014ec:	20000004 	.word	0x20000004

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <NMI_Handler+0x4>

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <MemManage_Handler+0x4>

08001508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <UsageFault_Handler+0x4>

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800152e:	f001 fa53 	bl	80029d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000530 	.word	0x20000530

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f003 fec3 	bl	80052e0 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <_exit+0x12>

08001582 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e00a      	b.n	80015aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001594:	f3af 8000 	nop.w
 8001598:	4601      	mov	r1, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	b2ca      	uxtb	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbf0      	blt.n	8001594 <_read+0x12>
  }

  return len;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e009      	b.n	80015e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf1      	blt.n	80015ce <_write+0x12>
  }
  return len;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_close>:

int _close(int file)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161c:	605a      	str	r2, [r3, #4]
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_isatty>:

int _isatty(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f003 fe28 	bl	80052e0 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20010000 	.word	0x20010000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000578 	.word	0x20000578
 80016c4:	20004420 	.word	0x20004420

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f003 fde7 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fbfb 	bl	8000f18 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001730:	0800746c 	.word	0x0800746c
  ldr r2, =_sbss
 8001734:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001738:	20004420 	.word	0x20004420

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f8d8 	bl	800191e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fe4c 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fd58 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	2000057c 	.word	0x2000057c

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000057c 	.word	0x2000057c

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff4c 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001946:	f7ff ff61 	bl	800180c <__NVIC_GetPriorityGrouping>
 800194a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff ffb1 	bl	80018b8 <NVIC_EncodePriority>
 8001956:	4602      	mov	r2, r0
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff80 	bl	8001864 <__NVIC_SetPriority>
}
 8001964:	bf00      	nop
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff54 	bl	8001828 <__NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e159      	b.n	8001c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8148 	bne.w	8001c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a2 	beq.w	8001c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b57      	ldr	r3, [pc, #348]	@ (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b54      	ldr	r3, [pc, #336]	@ (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a52      	ldr	r2, [pc, #328]	@ (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	@ (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	@ (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a47      	ldr	r2, [pc, #284]	@ (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a46      	ldr	r2, [pc, #280]	@ (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1f6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1f2>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bce:	4a2f      	ldr	r2, [pc, #188]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf8:	4a24      	ldr	r2, [pc, #144]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c22:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c8c <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f aea2 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e12b      	b.n	8001f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fac8 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2224      	movs	r2, #36	@ 0x24
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d28:	f000 fd40 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a81      	ldr	r2, [pc, #516]	@ (8001f38 <HAL_I2C_Init+0x274>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d807      	bhi.n	8001d48 <HAL_I2C_Init+0x84>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_I2C_Init+0x278>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	bf94      	ite	ls
 8001d40:	2301      	movls	r3, #1
 8001d42:	2300      	movhi	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e006      	b.n	8001d56 <HAL_I2C_Init+0x92>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f40 <HAL_I2C_Init+0x27c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	bf94      	ite	ls
 8001d50:	2301      	movls	r3, #1
 8001d52:	2300      	movhi	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0e7      	b.n	8001f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4a78      	ldr	r2, [pc, #480]	@ (8001f44 <HAL_I2C_Init+0x280>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0c9b      	lsrs	r3, r3, #18
 8001d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f38 <HAL_I2C_Init+0x274>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d802      	bhi.n	8001d98 <HAL_I2C_Init+0xd4>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3301      	adds	r3, #1
 8001d96:	e009      	b.n	8001dac <HAL_I2C_Init+0xe8>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a69      	ldr	r2, [pc, #420]	@ (8001f48 <HAL_I2C_Init+0x284>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	3301      	adds	r3, #1
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	495c      	ldr	r1, [pc, #368]	@ (8001f38 <HAL_I2C_Init+0x274>)
 8001dc8:	428b      	cmp	r3, r1
 8001dca:	d819      	bhi.n	8001e00 <HAL_I2C_Init+0x13c>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e59      	subs	r1, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dda:	1c59      	adds	r1, r3, #1
 8001ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001de0:	400b      	ands	r3, r1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_I2C_Init+0x138>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e59      	subs	r1, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfa:	e051      	b.n	8001ea0 <HAL_I2C_Init+0x1dc>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e04f      	b.n	8001ea0 <HAL_I2C_Init+0x1dc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d111      	bne.n	8001e2c <HAL_I2C_Init+0x168>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e58      	subs	r0, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e012      	b.n	8001e52 <HAL_I2C_Init+0x18e>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e58      	subs	r0, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	0099      	lsls	r1, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Init+0x196>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e022      	b.n	8001ea0 <HAL_I2C_Init+0x1dc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10e      	bne.n	8001e80 <HAL_I2C_Init+0x1bc>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e58      	subs	r0, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	440b      	add	r3, r1
 8001e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e7e:	e00f      	b.n	8001ea0 <HAL_I2C_Init+0x1dc>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	0099      	lsls	r1, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	6809      	ldr	r1, [r1, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6911      	ldr	r1, [r2, #16]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68d2      	ldr	r2, [r2, #12]
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	000186a0 	.word	0x000186a0
 8001f3c:	001e847f 	.word	0x001e847f
 8001f40:	003d08ff 	.word	0x003d08ff
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e267      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d075      	beq.n	8002056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f6a:	4b88      	ldr	r3, [pc, #544]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f76:	4b85      	ldr	r3, [pc, #532]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b82      	ldr	r3, [pc, #520]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b7e      	ldr	r3, [pc, #504]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e242      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x74>
 8001fb2:	4b76      	ldr	r3, [pc, #472]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6f      	ldr	r2, [pc, #444]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6c      	ldr	r2, [pc, #432]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fe4:	4b69      	ldr	r3, [pc, #420]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a68      	ldr	r2, [pc, #416]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b66      	ldr	r3, [pc, #408]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a65      	ldr	r2, [pc, #404]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff fbd2 	bl	80017ac <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff fbce 	bl	80017ac <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	@ 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e207      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc0>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fbbe 	bl	80017ac <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fbba 	bl	80017ac <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1f3      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b51      	ldr	r3, [pc, #324]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002062:	4b4a      	ldr	r3, [pc, #296]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206e:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b41      	ldr	r3, [pc, #260]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1c7      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4937      	ldr	r1, [pc, #220]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_OscConfig+0x244>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff fb73 	bl	80017ac <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff fb6f 	bl	80017ac <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1a8      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4925      	ldr	r1, [pc, #148]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_OscConfig+0x244>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fb52 	bl	80017ac <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff fb4e 	bl	80017ac <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e187      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d036      	beq.n	80021a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_RCC_OscConfig+0x248>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff fb32 	bl	80017ac <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7ff fb2e 	bl	80017ac <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e167      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x240>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
 800216a:	e01b      	b.n	80021a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216c:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <HAL_RCC_OscConfig+0x248>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb1b 	bl	80017ac <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	e00e      	b.n	8002198 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217a:	f7ff fb17 	bl	80017ac <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d907      	bls.n	8002198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e150      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
 800218c:	40023800 	.word	0x40023800
 8002190:	42470000 	.word	0x42470000
 8002194:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002198:	4b88      	ldr	r3, [pc, #544]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800219a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ea      	bne.n	800217a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8097 	beq.w	80022e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b6:	4b81      	ldr	r3, [pc, #516]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b7d      	ldr	r3, [pc, #500]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a7c      	ldr	r2, [pc, #496]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b7a      	ldr	r3, [pc, #488]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b77      	ldr	r3, [pc, #476]	@ (80023c0 <HAL_RCC_OscConfig+0x474>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ee:	4b74      	ldr	r3, [pc, #464]	@ (80023c0 <HAL_RCC_OscConfig+0x474>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a73      	ldr	r2, [pc, #460]	@ (80023c0 <HAL_RCC_OscConfig+0x474>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fad7 	bl	80017ac <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002202:	f7ff fad3 	bl	80017ac <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e10c      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4b6a      	ldr	r3, [pc, #424]	@ (80023c0 <HAL_RCC_OscConfig+0x474>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x2ea>
 8002228:	4b64      	ldr	r3, [pc, #400]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	4a63      	ldr	r2, [pc, #396]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	@ 0x70
 8002234:	e01c      	b.n	8002270 <HAL_RCC_OscConfig+0x324>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x30c>
 800223e:	4b5f      	ldr	r3, [pc, #380]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002242:	4a5e      	ldr	r2, [pc, #376]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6713      	str	r3, [r2, #112]	@ 0x70
 800224a:	4b5c      	ldr	r3, [pc, #368]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	4a5b      	ldr	r2, [pc, #364]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	@ 0x70
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0x324>
 8002258:	4b58      	ldr	r3, [pc, #352]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	4a57      	ldr	r2, [pc, #348]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	@ 0x70
 8002264:	4b55      	ldr	r3, [pc, #340]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	4a54      	ldr	r2, [pc, #336]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 800226a:	f023 0304 	bic.w	r3, r3, #4
 800226e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d015      	beq.n	80022a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff fa98 	bl	80017ac <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f7ff fa94 	bl	80017ac <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0cb      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	4b49      	ldr	r3, [pc, #292]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ee      	beq.n	8002280 <HAL_RCC_OscConfig+0x334>
 80022a2:	e014      	b.n	80022ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff fa82 	bl	80017ac <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7ff fa7e 	bl	80017ac <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0b5      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c2:	4b3e      	ldr	r3, [pc, #248]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ee      	bne.n	80022ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d4:	4b39      	ldr	r3, [pc, #228]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	4a38      	ldr	r2, [pc, #224]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a1 	beq.w	800242c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ea:	4b34      	ldr	r3, [pc, #208]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d05c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d141      	bne.n	8002382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCC_OscConfig+0x478>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fa52 	bl	80017ac <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff fa4e 	bl	80017ac <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e087      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b27      	ldr	r3, [pc, #156]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	3b01      	subs	r3, #1
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	491b      	ldr	r1, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x478>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fa27 	bl	80017ac <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fa23 	bl	80017ac <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e05c      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x416>
 8002380:	e054      	b.n	800242c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_RCC_OscConfig+0x478>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fa10 	bl	80017ac <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff fa0c 	bl	80017ac <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e045      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x470>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x444>
 80023ae:	e03d      	b.n	800242c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e038      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000
 80023c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x4ec>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d028      	beq.n	8002428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d121      	bne.n	8002428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d11a      	bne.n	8002428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002400:	4293      	cmp	r3, r2
 8002402:	d111      	bne.n	8002428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	3b01      	subs	r3, #1
 8002412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0cc      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b68      	ldr	r3, [pc, #416]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d90c      	bls.n	8002478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b65      	ldr	r3, [pc, #404]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a58      	ldr	r2, [pc, #352]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800249a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d044      	beq.n	800255c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d119      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e067      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4934      	ldr	r1, [pc, #208]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7ff f93e 	bl	80017ac <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7ff f93a 	bl	80017ac <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e04f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d20c      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	@ (80025fc <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe ff12 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	080070d0 	.word	0x080070d0
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b090      	sub	sp, #64	@ 0x40
 800260e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002620:	4b59      	ldr	r3, [pc, #356]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d00d      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x40>
 800262c:	2b08      	cmp	r3, #8
 800262e:	f200 80a1 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x16c>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x34>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d003      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x3a>
 800263a:	e09b      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b53      	ldr	r3, [pc, #332]	@ (800278c <HAL_RCC_GetSysClockFreq+0x184>)
 800263e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002640:	e09b      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002642:	4b53      	ldr	r3, [pc, #332]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x188>)
 8002644:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002646:	e098      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002648:	4b4f      	ldr	r3, [pc, #316]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002650:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002652:	4b4d      	ldr	r3, [pc, #308]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b4a      	ldr	r3, [pc, #296]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2200      	movs	r2, #0
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	627a      	str	r2, [r7, #36]	@ 0x24
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002670:	2100      	movs	r1, #0
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x188>)
 8002674:	fb03 f201 	mul.w	r2, r3, r1
 8002678:	2300      	movs	r3, #0
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	4413      	add	r3, r2
 8002680:	4a43      	ldr	r2, [pc, #268]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x188>)
 8002682:	fba0 1202 	umull	r1, r2, r0, r2
 8002686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002688:	460a      	mov	r2, r1
 800268a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800268c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800268e:	4413      	add	r3, r2
 8002690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002694:	2200      	movs	r2, #0
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	61fa      	str	r2, [r7, #28]
 800269a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026a2:	f7fe fa89 	bl	8000bb8 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4613      	mov	r3, r2
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ae:	e053      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4b35      	ldr	r3, [pc, #212]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	2200      	movs	r2, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	617a      	str	r2, [r7, #20]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026c2:	f04f 0b00 	mov.w	fp, #0
 80026c6:	4652      	mov	r2, sl
 80026c8:	465b      	mov	r3, fp
 80026ca:	f04f 0000 	mov.w	r0, #0
 80026ce:	f04f 0100 	mov.w	r1, #0
 80026d2:	0159      	lsls	r1, r3, #5
 80026d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d8:	0150      	lsls	r0, r2, #5
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	ebb2 080a 	subs.w	r8, r2, sl
 80026e2:	eb63 090b 	sbc.w	r9, r3, fp
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026fa:	ebb2 0408 	subs.w	r4, r2, r8
 80026fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	00eb      	lsls	r3, r5, #3
 800270c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002710:	00e2      	lsls	r2, r4, #3
 8002712:	4614      	mov	r4, r2
 8002714:	461d      	mov	r5, r3
 8002716:	eb14 030a 	adds.w	r3, r4, sl
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	eb45 030b 	adc.w	r3, r5, fp
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	2200      	movs	r2, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800274c:	f7fe fa34 	bl	8000bb8 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x180>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetSysClockFreq+0x184>)
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800277c:	4618      	mov	r0, r3
 800277e:	3740      	adds	r7, #64	@ 0x40
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	00f42400 	.word	0x00f42400
 8002790:	017d7840 	.word	0x017d7840

08002794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002798:	4b03      	ldr	r3, [pc, #12]	@ (80027a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000000 	.word	0x20000000

080027ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b0:	f7ff fff0 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	@ (80027d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	080070e0 	.word	0x080070e0

080027d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d8:	f7ff ffdc 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0b5b      	lsrs	r3, r3, #13
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	080070e0 	.word	0x080070e0

080027fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	220f      	movs	r2, #15
 800280a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_RCC_GetClockConfig+0x5c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800283e:	4b07      	ldr	r3, [pc, #28]	@ (800285c <HAL_RCC_GetClockConfig+0x60>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0207 	and.w	r2, r3, #7
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40023c00 	.word	0x40023c00

08002860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e041      	b.n	80028f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f839 	bl	80028fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f000 f9b2 	bl	8002c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e044      	b.n	80029b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x6c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002956:	d013      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x6c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1a      	ldr	r2, [pc, #104]	@ (80029c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x6c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x6c>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x6c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	@ (80029d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b06      	cmp	r3, #6
 8002990:	d010      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	e007      	b.n	80029b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40014000 	.word	0x40014000

080029d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0202 	mvn.w	r2, #2
 8002a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8d2 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8c4 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8d5 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d020      	beq.n	8002a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0204 	mvn.w	r2, #4
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8ac 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f89e 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f8af 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0208 	mvn.w	r2, #8
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f886 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f878 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f889 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2208      	movs	r2, #8
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f860 	bl	8002bcc <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f852 	bl	8002bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f863 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0201 	mvn.w	r2, #1
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fb5a 	bl	80011f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8e0 	bl	8002d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f834 	bl	8002bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8b2 	bl	8002d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <TIM_Base_SetConfig+0xf0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00f      	beq.n	8002c40 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c26:	d00b      	beq.n	8002c40 <TIM_Base_SetConfig+0x38>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a34      	ldr	r2, [pc, #208]	@ (8002cfc <TIM_Base_SetConfig+0xf4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_Base_SetConfig+0x38>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a33      	ldr	r2, [pc, #204]	@ (8002d00 <TIM_Base_SetConfig+0xf8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0x38>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <TIM_Base_SetConfig+0xfc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a28      	ldr	r2, [pc, #160]	@ (8002cf8 <TIM_Base_SetConfig+0xf0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01b      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c60:	d017      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	@ (8002cfc <TIM_Base_SetConfig+0xf4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <TIM_Base_SetConfig+0xf8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00f      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a23      	ldr	r2, [pc, #140]	@ (8002d04 <TIM_Base_SetConfig+0xfc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <TIM_Base_SetConfig+0x100>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <TIM_Base_SetConfig+0x104>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x8a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	@ (8002d10 <TIM_Base_SetConfig+0x108>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <TIM_Base_SetConfig+0xf0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d103      	bne.n	8002cd2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40000800 	.word	0x40000800
 8002d04:	40000c00 	.word	0x40000c00
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800

08002d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e042      	b.n	8002dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fad4 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	@ 0x24
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f82b 	bl	8002ddc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b0c0      	sub	sp, #256	@ 0x100
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	ea40 0301 	orr.w	r3, r0, r1
 8002e04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e34:	f021 010c 	bic.w	r1, r1, #12
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e42:	430b      	orrs	r3, r1
 8002e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e56:	6999      	ldr	r1, [r3, #24]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	ea40 0301 	orr.w	r3, r0, r1
 8002e62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b8f      	ldr	r3, [pc, #572]	@ (80030a8 <UART_SetConfig+0x2cc>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d005      	beq.n	8002e7c <UART_SetConfig+0xa0>
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <UART_SetConfig+0x2d0>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d104      	bne.n	8002e86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e7c:	f7ff fcaa 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 8002e80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e84:	e003      	b.n	8002e8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e86:	f7ff fc91 	bl	80027ac <HAL_RCC_GetPCLK1Freq>
 8002e8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e98:	f040 810c 	bne.w	80030b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ea6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eae:	4622      	mov	r2, r4
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	1891      	adds	r1, r2, r2
 8002eb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eb6:	415b      	adcs	r3, r3
 8002eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	eb12 0801 	adds.w	r8, r2, r1
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	eb43 0901 	adc.w	r9, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ede:	4690      	mov	r8, r2
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb18 0303 	adds.w	r3, r8, r3
 8002ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002eec:	462b      	mov	r3, r5
 8002eee:	eb49 0303 	adc.w	r3, r9, r3
 8002ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	18db      	adds	r3, r3, r3
 8002f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f10:	4613      	mov	r3, r2
 8002f12:	eb42 0303 	adc.w	r3, r2, r3
 8002f16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f20:	f7fd fe4a 	bl	8000bb8 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4b61      	ldr	r3, [pc, #388]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	011c      	lsls	r4, r3, #4
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f54:	4641      	mov	r1, r8
 8002f56:	eb12 0a01 	adds.w	sl, r2, r1
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f74:	4692      	mov	sl, r2
 8002f76:	469b      	mov	fp, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f82:	464b      	mov	r3, r9
 8002f84:	eb4b 0303 	adc.w	r3, fp, r3
 8002f88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	18db      	adds	r3, r3, r3
 8002fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fb6:	f7fd fdff 	bl	8000bb8 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002fc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2264      	movs	r2, #100	@ 0x64
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	1acb      	subs	r3, r1, r3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fd6:	4b36      	ldr	r3, [pc, #216]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8002fd8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fe4:	441c      	add	r4, r3
 8002fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ff0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ff4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003000:	415b      	adcs	r3, r3
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003008:	4641      	mov	r1, r8
 800300a:	1851      	adds	r1, r2, r1
 800300c:	6339      	str	r1, [r7, #48]	@ 0x30
 800300e:	4649      	mov	r1, r9
 8003010:	414b      	adcs	r3, r1
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003020:	4659      	mov	r1, fp
 8003022:	00cb      	lsls	r3, r1, #3
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302a:	4651      	mov	r1, sl
 800302c:	00ca      	lsls	r2, r1, #3
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	4603      	mov	r3, r0
 8003034:	4642      	mov	r2, r8
 8003036:	189b      	adds	r3, r3, r2
 8003038:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800303c:	464b      	mov	r3, r9
 800303e:	460a      	mov	r2, r1
 8003040:	eb42 0303 	adc.w	r3, r2, r3
 8003044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003054:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003058:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800305c:	460b      	mov	r3, r1
 800305e:	18db      	adds	r3, r3, r3
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003062:	4613      	mov	r3, r2
 8003064:	eb42 0303 	adc.w	r3, r2, r3
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800306e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003072:	f7fd fda1 	bl	8000bb8 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <UART_SetConfig+0x2d4>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	@ 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3332      	adds	r3, #50	@ 0x32
 800308e:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <UART_SetConfig+0x2d4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 0207 	and.w	r2, r3, #7
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4422      	add	r2, r4
 80030a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030a4:	e106      	b.n	80032b4 <UART_SetConfig+0x4d8>
 80030a6:	bf00      	nop
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030c6:	4642      	mov	r2, r8
 80030c8:	464b      	mov	r3, r9
 80030ca:	1891      	adds	r1, r2, r2
 80030cc:	6239      	str	r1, [r7, #32]
 80030ce:	415b      	adcs	r3, r3
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030d6:	4641      	mov	r1, r8
 80030d8:	1854      	adds	r4, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb43 0501 	adc.w	r5, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030fc:	464b      	mov	r3, r9
 80030fe:	eb45 0303 	adc.w	r3, r5, r3
 8003102:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003122:	4629      	mov	r1, r5
 8003124:	008b      	lsls	r3, r1, #2
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312c:	4621      	mov	r1, r4
 800312e:	008a      	lsls	r2, r1, #2
 8003130:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003134:	f7fd fd40 	bl	8000bb8 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b60      	ldr	r3, [pc, #384]	@ (80032c0 <UART_SetConfig+0x4e4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003150:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003154:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	61b9      	str	r1, [r7, #24]
 8003160:	415b      	adcs	r3, r3
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003168:	4641      	mov	r1, r8
 800316a:	1851      	adds	r1, r2, r1
 800316c:	6139      	str	r1, [r7, #16]
 800316e:	4649      	mov	r1, r9
 8003170:	414b      	adcs	r3, r1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003180:	4659      	mov	r1, fp
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4651      	mov	r1, sl
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4642      	mov	r2, r8
 8003196:	189b      	adds	r3, r3, r2
 8003198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800319c:	464b      	mov	r3, r9
 800319e:	460a      	mov	r2, r1
 80031a0:	eb42 0303 	adc.w	r3, r2, r3
 80031a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031c0:	4649      	mov	r1, r9
 80031c2:	008b      	lsls	r3, r1, #2
 80031c4:	4641      	mov	r1, r8
 80031c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ca:	4641      	mov	r1, r8
 80031cc:	008a      	lsls	r2, r1, #2
 80031ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031d2:	f7fd fcf1 	bl	8000bb8 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	3332      	adds	r3, #50	@ 0x32
 80031f0:	4a33      	ldr	r2, [pc, #204]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031fc:	441c      	add	r4, r3
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	673b      	str	r3, [r7, #112]	@ 0x70
 8003206:	677a      	str	r2, [r7, #116]	@ 0x74
 8003208:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	415b      	adcs	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800324e:	464b      	mov	r3, r9
 8003250:	460a      	mov	r2, r1
 8003252:	eb42 0303 	adc.w	r3, r2, r3
 8003256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	663b      	str	r3, [r7, #96]	@ 0x60
 8003262:	667a      	str	r2, [r7, #100]	@ 0x64
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003270:	4649      	mov	r1, r9
 8003272:	008b      	lsls	r3, r1, #2
 8003274:	4641      	mov	r1, r8
 8003276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800327a:	4641      	mov	r1, r8
 800327c:	008a      	lsls	r2, r1, #2
 800327e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003282:	f7fd fc99 	bl	8000bb8 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <UART_SetConfig+0x4e4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	@ 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	3332      	adds	r3, #50	@ 0x32
 800329e:	4a08      	ldr	r2, [pc, #32]	@ (80032c0 <UART_SetConfig+0x4e4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4422      	add	r2, r4
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ba:	46bd      	mov	sp, r7
 80032bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d6:	2b84      	cmp	r3, #132	@ 0x84
 80032d8:	d005      	beq.n	80032e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	3303      	adds	r3, #3
 80032e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80032f8:	f000 fae4 	bl	80038c4 <vTaskStartScheduler>
  
  return osOK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	bd80      	pop	{r7, pc}

08003302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003304:	b089      	sub	sp, #36	@ 0x24
 8003306:	af04      	add	r7, sp, #16
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <osThreadCreate+0x54>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01c      	beq.n	8003356 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685c      	ldr	r4, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691e      	ldr	r6, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ffc8 	bl	80032c4 <makeFreeRtosPriority>
 8003334:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800333e:	9202      	str	r2, [sp, #8]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	9100      	str	r1, [sp, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4632      	mov	r2, r6
 8003348:	4629      	mov	r1, r5
 800334a:	4620      	mov	r0, r4
 800334c:	f000 f8ed 	bl	800352a <xTaskCreateStatic>
 8003350:	4603      	mov	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e01c      	b.n	8003390 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685c      	ldr	r4, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003362:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ffaa 	bl	80032c4 <makeFreeRtosPriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	9200      	str	r2, [sp, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4632      	mov	r2, r6
 800337e:	4629      	mov	r1, r5
 8003380:	4620      	mov	r0, r4
 8003382:	f000 f932 	bl	80035ea <xTaskCreate>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d001      	beq.n	8003390 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800339a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <osDelay+0x16>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	e000      	b.n	80033b2 <osDelay+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa50 	bl	8003858 <vTaskDelay>
  
  return osOK;
 80033b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f103 0208 	add.w	r2, r3, #8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f04f 32ff 	mov.w	r2, #4294967295
 80033da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f103 0208 	add.w	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0208 	add.w	r2, r3, #8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	601a      	str	r2, [r3, #0]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347a:	d103      	bne.n	8003484 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e00c      	b.n	800349e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3308      	adds	r3, #8
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e002      	b.n	8003492 <vListInsert+0x2e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d2f6      	bcs.n	800348c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6852      	ldr	r2, [r2, #4]
 80034f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d103      	bne.n	800350a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800352a:	b580      	push	{r7, lr}
 800352c:	b08e      	sub	sp, #56	@ 0x38
 800352e:	af04      	add	r7, sp, #16
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <xTaskCreateStatic+0x4a>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	61fb      	str	r3, [r7, #28]
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003574:	2354      	movs	r3, #84	@ 0x54
 8003576:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b54      	cmp	r3, #84	@ 0x54
 800357c:	d00b      	beq.n	8003596 <xTaskCreateStatic+0x6c>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61bb      	str	r3, [r7, #24]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003596:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01e      	beq.n	80035dc <xTaskCreateStatic+0xb2>
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035b6:	2300      	movs	r3, #0
 80035b8:	9303      	str	r3, [sp, #12]
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f850 	bl	8003674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035d6:	f000 f8d5 	bl	8003784 <prvAddNewTaskToReadyList>
 80035da:	e001      	b.n	80035e0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035e0:	697b      	ldr	r3, [r7, #20]
	}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3728      	adds	r7, #40	@ 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b08c      	sub	sp, #48	@ 0x30
 80035ee:	af04      	add	r7, sp, #16
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fed2 	bl	80043a8 <pvPortMalloc>
 8003604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800360c:	2054      	movs	r0, #84	@ 0x54
 800360e:	f000 fecb 	bl	80043a8 <pvPortMalloc>
 8003612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003620:	e005      	b.n	800362e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f000 ff8e 	bl	8004544 <vPortFree>
 8003628:	e001      	b.n	800362e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	2300      	movs	r3, #0
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	9302      	str	r3, [sp, #8]
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f80e 	bl	8003674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003658:	69f8      	ldr	r0, [r7, #28]
 800365a:	f000 f893 	bl	8003784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	e002      	b.n	800366a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
 8003668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800366a:	69bb      	ldr	r3, [r7, #24]
	}
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800368c:	3b01      	subs	r3, #1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f023 0307 	bic.w	r3, r3, #7
 800369a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	e7fd      	b.n	80036ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01f      	beq.n	8003704 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e012      	b.n	80036f0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	7819      	ldrb	r1, [r3, #0]
 80036d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	3334      	adds	r3, #52	@ 0x34
 80036da:	460a      	mov	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	d9e9      	bls.n	80036ca <prvInitialiseNewTask+0x56>
 80036f6:	e000      	b.n	80036fa <prvInitialiseNewTask+0x86>
			{
				break;
 80036f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003702:	e003      	b.n	800370c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	2b06      	cmp	r3, #6
 8003710:	d901      	bls.n	8003716 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003712:	2306      	movs	r3, #6
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	2200      	movs	r2, #0
 8003726:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fe68 	bl	8003402 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	3318      	adds	r3, #24
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fe63 	bl	8003402 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003740:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003744:	f1c3 0207 	rsb	r2, r3, #7
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	2200      	movs	r2, #0
 8003756:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	69b8      	ldr	r0, [r7, #24]
 8003766:	f000 fc0d 	bl	8003f84 <pxPortInitialiseStack>
 800376a:	4602      	mov	r2, r0
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800377a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800377c:	bf00      	nop
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800378c:	f000 fd2c 	bl	80041e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003790:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <prvAddNewTaskToReadyList+0xb8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	4a29      	ldr	r2, [pc, #164]	@ (800383c <prvAddNewTaskToReadyList+0xb8>)
 8003798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800379a:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <prvAddNewTaskToReadyList+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037a2:	4a27      	ldr	r2, [pc, #156]	@ (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037a8:	4b24      	ldr	r3, [pc, #144]	@ (800383c <prvAddNewTaskToReadyList+0xb8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d110      	bne.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037b0:	f000 fac4 	bl	8003d3c <prvInitialiseTaskLists>
 80037b4:	e00d      	b.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037b6:	4b23      	ldr	r3, [pc, #140]	@ (8003844 <prvAddNewTaskToReadyList+0xc0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037be:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d802      	bhi.n	80037d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <prvAddNewTaskToReadyList+0xbc>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <prvAddNewTaskToReadyList+0xc4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003848 <prvAddNewTaskToReadyList+0xc4>)
 80037da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <prvAddNewTaskToReadyList+0xc8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	4a18      	ldr	r2, [pc, #96]	@ (800384c <prvAddNewTaskToReadyList+0xc8>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <prvAddNewTaskToReadyList+0xcc>)
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f7ff fe09 	bl	800341c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800380a:	f000 fd1f 	bl	800424c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <prvAddNewTaskToReadyList+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <prvAddNewTaskToReadyList+0xbc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <prvAddNewTaskToReadyList+0xd0>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000680 	.word	0x20000680
 8003840:	20000580 	.word	0x20000580
 8003844:	2000068c 	.word	0x2000068c
 8003848:	2000069c 	.word	0x2000069c
 800384c:	20000688 	.word	0x20000688
 8003850:	20000584 	.word	0x20000584
 8003854:	e000ed04 	.word	0xe000ed04

08003858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <vTaskDelay+0x64>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <vTaskDelay+0x32>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60bb      	str	r3, [r7, #8]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800388a:	f000 f87d 	bl	8003988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800388e:	2100      	movs	r1, #0
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fb11 	bl	8003eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003896:	f000 f885 	bl	80039a4 <xTaskResumeAll>
 800389a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d107      	bne.n	80038b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038a2:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <vTaskDelay+0x68>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200006a8 	.word	0x200006a8
 80038c0:	e000ed04 	.word	0xe000ed04

080038c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	@ 0x28
 80038c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038d2:	463a      	mov	r2, r7
 80038d4:	1d39      	adds	r1, r7, #4
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fb02 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	9202      	str	r2, [sp, #8]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	460a      	mov	r2, r1
 80038f2:	491f      	ldr	r1, [pc, #124]	@ (8003970 <vTaskStartScheduler+0xac>)
 80038f4:	481f      	ldr	r0, [pc, #124]	@ (8003974 <vTaskStartScheduler+0xb0>)
 80038f6:	f7ff fe18 	bl	800352a <xTaskCreateStatic>
 80038fa:	4603      	mov	r3, r0
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <vTaskStartScheduler+0xb4>)
 80038fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <vTaskStartScheduler+0xb4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003908:	2301      	movs	r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e001      	b.n	8003912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d116      	bne.n	8003946 <vTaskStartScheduler+0x82>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	613b      	str	r3, [r7, #16]
}
 800392a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <vTaskStartScheduler+0xb8>)
 800392e:	f04f 32ff 	mov.w	r2, #4294967295
 8003932:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <vTaskStartScheduler+0xbc>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <vTaskStartScheduler+0xc0>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003940:	f000 fbae 	bl	80040a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003944:	e00f      	b.n	8003966 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d10b      	bne.n	8003966 <vTaskStartScheduler+0xa2>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60fb      	str	r3, [r7, #12]
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <vTaskStartScheduler+0x9e>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	080070c8 	.word	0x080070c8
 8003974:	08003d0d 	.word	0x08003d0d
 8003978:	200006a4 	.word	0x200006a4
 800397c:	200006a0 	.word	0x200006a0
 8003980:	2000068c 	.word	0x2000068c
 8003984:	20000684 	.word	0x20000684

08003988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <vTaskSuspendAll+0x18>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a03      	ldr	r2, [pc, #12]	@ (80039a0 <vTaskSuspendAll+0x18>)
 8003994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	200006a8 	.word	0x200006a8

080039a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039b2:	4b42      	ldr	r3, [pc, #264]	@ (8003abc <xTaskResumeAll+0x118>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	603b      	str	r3, [r7, #0]
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	e7fd      	b.n	80039ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039d2:	f000 fc09 	bl	80041e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039d6:	4b39      	ldr	r3, [pc, #228]	@ (8003abc <xTaskResumeAll+0x118>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <xTaskResumeAll+0x118>)
 80039de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <xTaskResumeAll+0x118>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d161      	bne.n	8003aac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039e8:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <xTaskResumeAll+0x11c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d05d      	beq.n	8003aac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f0:	e02e      	b.n	8003a50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f2:	4b34      	ldr	r3, [pc, #208]	@ (8003ac4 <xTaskResumeAll+0x120>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3318      	adds	r3, #24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fd69 	bl	80034d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fd64 	bl	80034d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	2201      	movs	r2, #1
 8003a14:	409a      	lsls	r2, r3
 8003a16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac8 <xTaskResumeAll+0x124>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <xTaskResumeAll+0x124>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a27      	ldr	r2, [pc, #156]	@ (8003acc <xTaskResumeAll+0x128>)
 8003a2e:	441a      	add	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7ff fcf0 	bl	800341c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <xTaskResumeAll+0x12c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a4a:	4b22      	ldr	r3, [pc, #136]	@ (8003ad4 <xTaskResumeAll+0x130>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <xTaskResumeAll+0x120>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1cc      	bne.n	80039f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a5e:	f000 fa0b 	bl	8003e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <xTaskResumeAll+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d010      	beq.n	8003a90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a6e:	f000 f837 	bl	8003ae0 <xTaskIncrementTick>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a78:	4b16      	ldr	r3, [pc, #88]	@ (8003ad4 <xTaskResumeAll+0x130>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f1      	bne.n	8003a6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ad8 <xTaskResumeAll+0x134>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a90:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <xTaskResumeAll+0x130>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <xTaskResumeAll+0x138>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aac:	f000 fbce 	bl	800424c <vPortExitCritical>

	return xAlreadyYielded;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200006a8 	.word	0x200006a8
 8003ac0:	20000680 	.word	0x20000680
 8003ac4:	20000640 	.word	0x20000640
 8003ac8:	20000688 	.word	0x20000688
 8003acc:	20000584 	.word	0x20000584
 8003ad0:	20000580 	.word	0x20000580
 8003ad4:	20000694 	.word	0x20000694
 8003ad8:	20000690 	.word	0x20000690
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aea:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <xTaskIncrementTick+0x148>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 808f 	bne.w	8003c12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003af4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c2c <xTaskIncrementTick+0x14c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003afc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c2c <xTaskIncrementTick+0x14c>)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d121      	bne.n	8003b4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b08:	4b49      	ldr	r3, [pc, #292]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	603b      	str	r3, [r7, #0]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xTaskIncrementTick+0x46>
 8003b2a:	4b41      	ldr	r3, [pc, #260]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <xTaskIncrementTick+0x154>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3e      	ldr	r2, [pc, #248]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4a3e      	ldr	r2, [pc, #248]	@ (8003c34 <xTaskIncrementTick+0x154>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <xTaskIncrementTick+0x158>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	4a3c      	ldr	r2, [pc, #240]	@ (8003c38 <xTaskIncrementTick+0x158>)
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	f000 f996 	bl	8003e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d348      	bcc.n	8003be8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	4b36      	ldr	r3, [pc, #216]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	601a      	str	r2, [r3, #0]
					break;
 8003b68:	e03e      	b.n	8003be8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <xTaskIncrementTick+0x150>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d203      	bcs.n	8003b8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b82:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <xTaskIncrementTick+0x15c>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b88:	e02e      	b.n	8003be8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fca1 	bl	80034d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fc98 	bl	80034d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	2201      	movs	r2, #1
 8003bac:	409a      	lsls	r2, r3
 8003bae:	4b24      	ldr	r3, [pc, #144]	@ (8003c40 <xTaskIncrementTick+0x160>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	4a22      	ldr	r2, [pc, #136]	@ (8003c40 <xTaskIncrementTick+0x160>)
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <xTaskIncrementTick+0x164>)
 8003bc6:	441a      	add	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7ff fc24 	bl	800341c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <xTaskIncrementTick+0x168>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3b9      	bcc.n	8003b56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be6:	e7b6      	b.n	8003b56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003be8:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <xTaskIncrementTick+0x168>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bee:	4915      	ldr	r1, [pc, #84]	@ (8003c44 <xTaskIncrementTick+0x164>)
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d901      	bls.n	8003c04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c04:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <xTaskIncrementTick+0x16c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	e004      	b.n	8003c1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c12:	4b0f      	ldr	r3, [pc, #60]	@ (8003c50 <xTaskIncrementTick+0x170>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <xTaskIncrementTick+0x170>)
 8003c1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c1c:	697b      	ldr	r3, [r7, #20]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200006a8 	.word	0x200006a8
 8003c2c:	20000684 	.word	0x20000684
 8003c30:	20000638 	.word	0x20000638
 8003c34:	2000063c 	.word	0x2000063c
 8003c38:	20000698 	.word	0x20000698
 8003c3c:	200006a0 	.word	0x200006a0
 8003c40:	20000688 	.word	0x20000688
 8003c44:	20000584 	.word	0x20000584
 8003c48:	20000580 	.word	0x20000580
 8003c4c:	20000694 	.word	0x20000694
 8003c50:	20000690 	.word	0x20000690

08003c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c5a:	4b27      	ldr	r3, [pc, #156]	@ (8003cf8 <vTaskSwitchContext+0xa4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c62:	4b26      	ldr	r3, [pc, #152]	@ (8003cfc <vTaskSwitchContext+0xa8>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c68:	e040      	b.n	8003cec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003c6a:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <vTaskSwitchContext+0xa8>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <vTaskSwitchContext+0xac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c7e:	7afb      	ldrb	r3, [r7, #11]
 8003c80:	f1c3 031f 	rsb	r3, r3, #31
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	491f      	ldr	r1, [pc, #124]	@ (8003d04 <vTaskSwitchContext+0xb0>)
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	607b      	str	r3, [r7, #4]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <vTaskSwitchContext+0x5a>
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <vTaskSwitchContext+0xb0>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d104      	bne.n	8003ce2 <vTaskSwitchContext+0x8e>
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <vTaskSwitchContext+0xb4>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	200006a8 	.word	0x200006a8
 8003cfc:	20000694 	.word	0x20000694
 8003d00:	20000688 	.word	0x20000688
 8003d04:	20000584 	.word	0x20000584
 8003d08:	20000580 	.word	0x20000580

08003d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d14:	f000 f852 	bl	8003dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d18:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <prvIdleTask+0x28>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d9f9      	bls.n	8003d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <prvIdleTask+0x2c>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d30:	e7f0      	b.n	8003d14 <prvIdleTask+0x8>
 8003d32:	bf00      	nop
 8003d34:	20000584 	.word	0x20000584
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	e00c      	b.n	8003d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4a12      	ldr	r2, [pc, #72]	@ (8003d9c <prvInitialiseTaskLists+0x60>)
 8003d54:	4413      	add	r3, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fb33 	bl	80033c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b06      	cmp	r3, #6
 8003d66:	d9ef      	bls.n	8003d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d68:	480d      	ldr	r0, [pc, #52]	@ (8003da0 <prvInitialiseTaskLists+0x64>)
 8003d6a:	f7ff fb2a 	bl	80033c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d6e:	480d      	ldr	r0, [pc, #52]	@ (8003da4 <prvInitialiseTaskLists+0x68>)
 8003d70:	f7ff fb27 	bl	80033c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d74:	480c      	ldr	r0, [pc, #48]	@ (8003da8 <prvInitialiseTaskLists+0x6c>)
 8003d76:	f7ff fb24 	bl	80033c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d7a:	480c      	ldr	r0, [pc, #48]	@ (8003dac <prvInitialiseTaskLists+0x70>)
 8003d7c:	f7ff fb21 	bl	80033c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d80:	480b      	ldr	r0, [pc, #44]	@ (8003db0 <prvInitialiseTaskLists+0x74>)
 8003d82:	f7ff fb1e 	bl	80033c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <prvInitialiseTaskLists+0x78>)
 8003d88:	4a05      	ldr	r2, [pc, #20]	@ (8003da0 <prvInitialiseTaskLists+0x64>)
 8003d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <prvInitialiseTaskLists+0x7c>)
 8003d8e:	4a05      	ldr	r2, [pc, #20]	@ (8003da4 <prvInitialiseTaskLists+0x68>)
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000584 	.word	0x20000584
 8003da0:	20000610 	.word	0x20000610
 8003da4:	20000624 	.word	0x20000624
 8003da8:	20000640 	.word	0x20000640
 8003dac:	20000654 	.word	0x20000654
 8003db0:	2000066c 	.word	0x2000066c
 8003db4:	20000638 	.word	0x20000638
 8003db8:	2000063c 	.word	0x2000063c

08003dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc2:	e019      	b.n	8003df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dc4:	f000 fa10 	bl	80041e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <prvCheckTasksWaitingTermination+0x50>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fb7e 	bl	80034d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e10 <prvCheckTasksWaitingTermination+0x54>)
 8003de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dee:	f000 fa2d 	bl	800424c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f810 	bl	8003e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df8:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <prvCheckTasksWaitingTermination+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e1      	bne.n	8003dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000654 	.word	0x20000654
 8003e10:	20000680 	.word	0x20000680
 8003e14:	20000668 	.word	0x20000668

08003e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb88 	bl	8004544 <vPortFree>
				vPortFree( pxTCB );
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fb85 	bl	8004544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e3a:	e019      	b.n	8003e70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d103      	bne.n	8003e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fb7c 	bl	8004544 <vPortFree>
	}
 8003e4c:	e010      	b.n	8003e70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d00b      	beq.n	8003e70 <prvDeleteTCB+0x58>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <prvDeleteTCB+0x54>
	}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x38>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e90:	e008      	b.n	8003ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e92:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x38>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20000638 	.word	0x20000638
 8003eb4:	200006a0 	.word	0x200006a0

08003eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ec8:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fb01 	bl	80034d6 <uxListRemove>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eda:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	4b21      	ldr	r3, [pc, #132]	@ (8003f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d10a      	bne.n	8003f10 <prvAddCurrentTaskToDelayedList+0x58>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f00:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	481a      	ldr	r0, [pc, #104]	@ (8003f74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f0a:	f7ff fa87 	bl	800341c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f0e:	e026      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4413      	add	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f18:	4b14      	ldr	r3, [pc, #80]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d209      	bcs.n	8003f3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f7ff fa95 	bl	8003464 <vListInsert>
}
 8003f3a:	e010      	b.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0a      	ldr	r3, [pc, #40]	@ (8003f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7ff fa8b 	bl	8003464 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d202      	bcs.n	8003f5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f58:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000684 	.word	0x20000684
 8003f6c:	20000580 	.word	0x20000580
 8003f70:	20000688 	.word	0x20000688
 8003f74:	2000066c 	.word	0x2000066c
 8003f78:	2000063c 	.word	0x2000063c
 8003f7c:	20000638 	.word	0x20000638
 8003f80:	200006a0 	.word	0x200006a0

08003f84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b04      	subs	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3b04      	subs	r3, #4
 8003fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <pxPortInitialiseStack+0x64>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b14      	subs	r3, #20
 8003fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b04      	subs	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f06f 0202 	mvn.w	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b20      	subs	r3, #32
 8003fd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	08003fed 	.word	0x08003fed

08003fec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <prvTaskExitError+0x58>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d00b      	beq.n	8004018 <prvTaskExitError+0x2c>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <prvTaskExitError+0x28>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60bb      	str	r3, [r7, #8]
}
 800402a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800402c:	bf00      	nop
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0fc      	beq.n	800402e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c
	...

08004050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <pxCurrentTCBConst2>)
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	f380 8809 	msr	PSP, r0
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f380 8811 	msr	BASEPRI, r0
 800406a:	4770      	bx	lr
 800406c:	f3af 8000 	nop.w

08004070 <pxCurrentTCBConst2>:
 8004070:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop

08004078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <prvPortStartFirstTask+0x24>)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	6800      	ldr	r0, [r0, #0]
 800407e:	f380 8808 	msr	MSP, r0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8814 	msr	CONTROL, r0
 800408a:	b662      	cpsie	i
 800408c:	b661      	cpsie	f
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	df00      	svc	0
 8004098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800409a:	bf00      	nop
 800409c:	e000ed08 	.word	0xe000ed08

080040a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040a6:	4b47      	ldr	r3, [pc, #284]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a47      	ldr	r2, [pc, #284]	@ (80041c8 <xPortStartScheduler+0x128>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10b      	bne.n	80040c8 <xPortStartScheduler+0x28>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <xPortStartScheduler+0x124>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	@ (80041cc <xPortStartScheduler+0x12c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10b      	bne.n	80040ea <xPortStartScheduler+0x4a>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	613b      	str	r3, [r7, #16]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <xPortStartScheduler+0x130>)
 80040ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	22ff      	movs	r2, #255	@ 0xff
 80040fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <xPortStartScheduler+0x134>)
 8004110:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004112:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004114:	2207      	movs	r2, #7
 8004116:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004118:	e009      	b.n	800412e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800411a:	4b2f      	ldr	r3, [pc, #188]	@ (80041d8 <xPortStartScheduler+0x138>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3b01      	subs	r3, #1
 8004120:	4a2d      	ldr	r2, [pc, #180]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d0ef      	beq.n	800411a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800413a:	4b27      	ldr	r3, [pc, #156]	@ (80041d8 <xPortStartScheduler+0x138>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	d00b      	beq.n	800415e <xPortStartScheduler+0xbe>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4a1c      	ldr	r2, [pc, #112]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004166:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <xPortStartScheduler+0x138>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004170:	4a19      	ldr	r2, [pc, #100]	@ (80041d8 <xPortStartScheduler+0x138>)
 8004172:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <xPortStartScheduler+0x13c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <xPortStartScheduler+0x13c>)
 8004182:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004186:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <xPortStartScheduler+0x13c>)
 800418e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004192:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004194:	f000 f8da 	bl	800434c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <xPortStartScheduler+0x140>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800419e:	f000 f8f9 	bl	8004394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a0f      	ldr	r2, [pc, #60]	@ (80041e4 <xPortStartScheduler+0x144>)
 80041a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ae:	f7ff ff63 	bl	8004078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041b2:	f7ff fd4f 	bl	8003c54 <vTaskSwitchContext>
	prvTaskExitError();
 80041b6:	f7ff ff19 	bl	8003fec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000ed00 	.word	0xe000ed00
 80041c8:	410fc271 	.word	0x410fc271
 80041cc:	410fc270 	.word	0x410fc270
 80041d0:	e000e400 	.word	0xe000e400
 80041d4:	200006ac 	.word	0x200006ac
 80041d8:	200006b0 	.word	0x200006b0
 80041dc:	e000ed20 	.word	0xe000ed20
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	e000ef34 	.word	0xe000ef34

080041e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
}
 8004200:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004202:	4b10      	ldr	r3, [pc, #64]	@ (8004244 <vPortEnterCritical+0x5c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800420c:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <vPortEnterCritical+0x5c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d110      	bne.n	8004236 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <vPortEnterCritical+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <vPortEnterCritical+0x4e>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	603b      	str	r3, [r7, #0]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <vPortEnterCritical+0x4a>
	}
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000000c 	.word	0x2000000c
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004252:	4b12      	ldr	r3, [pc, #72]	@ (800429c <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <vPortExitCritical+0x26>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	607b      	str	r3, [r7, #4]
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <vPortExitCritical+0x50>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	4a08      	ldr	r2, [pc, #32]	@ (800429c <vPortExitCritical+0x50>)
 800427a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <vPortExitCritical+0x50>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <vPortExitCritical+0x44>
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800428e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	2000000c 	.word	0x2000000c

080042a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042a0:	f3ef 8009 	mrs	r0, PSP
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <pxCurrentTCBConst>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f01e 0f10 	tst.w	lr, #16
 80042b0:	bf08      	it	eq
 80042b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	6010      	str	r0, [r2, #0]
 80042bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80042c4:	f380 8811 	msr	BASEPRI, r0
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f7ff fcc0 	bl	8003c54 <vTaskSwitchContext>
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f380 8811 	msr	BASEPRI, r0
 80042dc:	bc09      	pop	{r0, r3}
 80042de:	6819      	ldr	r1, [r3, #0]
 80042e0:	6808      	ldr	r0, [r1, #0]
 80042e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e6:	f01e 0f10 	tst.w	lr, #16
 80042ea:	bf08      	it	eq
 80042ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042f0:	f380 8809 	msr	PSP, r0
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	f3af 8000 	nop.w

08004300 <pxCurrentTCBConst>:
 8004300:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	607b      	str	r3, [r7, #4]
}
 8004320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004322:	f7ff fbdd 	bl	8003ae0 <xTaskIncrementTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800432c:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <SysTick_Handler+0x40>)
 800432e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f383 8811 	msr	BASEPRI, r3
}
 800433e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <vPortSetupTimerInterrupt+0x38>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <vPortSetupTimerInterrupt+0x3c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <vPortSetupTimerInterrupt+0x40>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	4a09      	ldr	r2, [pc, #36]	@ (8004390 <vPortSetupTimerInterrupt+0x44>)
 800436a:	3b01      	subs	r3, #1
 800436c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800436e:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <vPortSetupTimerInterrupt+0x34>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e010 	.word	0xe000e010
 8004384:	e000e018 	.word	0xe000e018
 8004388:	20000000 	.word	0x20000000
 800438c:	10624dd3 	.word	0x10624dd3
 8004390:	e000e014 	.word	0xe000e014

08004394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80043a4 <vPortEnableVFP+0x10>
 8004398:	6801      	ldr	r1, [r0, #0]
 800439a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800439e:	6001      	str	r1, [r0, #0]
 80043a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043a2:	bf00      	nop
 80043a4:	e000ed88 	.word	0xe000ed88

080043a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043b4:	f7ff fae8 	bl	8003988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043b8:	4b5c      	ldr	r3, [pc, #368]	@ (800452c <pvPortMalloc+0x184>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80043c0:	f000 f924 	bl	800460c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004530 <pvPortMalloc+0x188>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 8095 	bne.w	80044fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01e      	beq.n	8004416 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80043d8:	2208      	movs	r2, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d015      	beq.n	8004416 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	3308      	adds	r3, #8
 80043f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <pvPortMalloc+0x6e>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	617b      	str	r3, [r7, #20]
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	e7fd      	b.n	8004412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d06f      	beq.n	80044fc <pvPortMalloc+0x154>
 800441c:	4b45      	ldr	r3, [pc, #276]	@ (8004534 <pvPortMalloc+0x18c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d86a      	bhi.n	80044fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004426:	4b44      	ldr	r3, [pc, #272]	@ (8004538 <pvPortMalloc+0x190>)
 8004428:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800442a:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <pvPortMalloc+0x190>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004430:	e004      	b.n	800443c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <pvPortMalloc+0xa6>
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f1      	bne.n	8004432 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800444e:	4b37      	ldr	r3, [pc, #220]	@ (800452c <pvPortMalloc+0x184>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	429a      	cmp	r2, r3
 8004456:	d051      	beq.n	80044fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2208      	movs	r2, #8
 800445e:	4413      	add	r3, r2
 8004460:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	2308      	movs	r3, #8
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	429a      	cmp	r2, r3
 8004478:	d920      	bls.n	80044bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <pvPortMalloc+0xfc>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	613b      	str	r3, [r7, #16]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044b6:	69b8      	ldr	r0, [r7, #24]
 80044b8:	f000 f90a 	bl	80046d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80044bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004534 <pvPortMalloc+0x18c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004534 <pvPortMalloc+0x18c>)
 80044c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <pvPortMalloc+0x18c>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <pvPortMalloc+0x194>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d203      	bcs.n	80044de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044d6:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <pvPortMalloc+0x18c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a18      	ldr	r2, [pc, #96]	@ (800453c <pvPortMalloc+0x194>)
 80044dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <pvPortMalloc+0x188>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044f2:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <pvPortMalloc+0x198>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3301      	adds	r3, #1
 80044f8:	4a11      	ldr	r2, [pc, #68]	@ (8004540 <pvPortMalloc+0x198>)
 80044fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044fc:	f7ff fa52 	bl	80039a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <pvPortMalloc+0x17a>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60fb      	str	r3, [r7, #12]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <pvPortMalloc+0x176>
	return pvReturn;
 8004522:	69fb      	ldr	r3, [r7, #28]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	@ 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200042bc 	.word	0x200042bc
 8004530:	200042d0 	.word	0x200042d0
 8004534:	200042c0 	.word	0x200042c0
 8004538:	200042b4 	.word	0x200042b4
 800453c:	200042c4 	.word	0x200042c4
 8004540:	200042c8 	.word	0x200042c8

08004544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d04f      	beq.n	80045f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004556:	2308      	movs	r3, #8
 8004558:	425b      	negs	r3, r3
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4b25      	ldr	r3, [pc, #148]	@ (8004600 <vPortFree+0xbc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <vPortFree+0x46>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60fb      	str	r3, [r7, #12]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <vPortFree+0x66>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <vPortFree+0xbc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01e      	beq.n	80045f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d11a      	bne.n	80045f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <vPortFree+0xbc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80045d0:	f7ff f9da 	bl	8003988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <vPortFree+0xc0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4413      	add	r3, r2
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <vPortFree+0xc0>)
 80045e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045e2:	6938      	ldr	r0, [r7, #16]
 80045e4:	f000 f874 	bl	80046d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <vPortFree+0xc4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a06      	ldr	r2, [pc, #24]	@ (8004608 <vPortFree+0xc4>)
 80045f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045f2:	f7ff f9d7 	bl	80039a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	200042d0 	.word	0x200042d0
 8004604:	200042c0 	.word	0x200042c0
 8004608:	200042cc 	.word	0x200042cc

0800460c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004612:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004616:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004618:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <prvHeapInit+0xac>)
 800461a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3307      	adds	r3, #7
 800462a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	4a1f      	ldr	r2, [pc, #124]	@ (80046b8 <prvHeapInit+0xac>)
 800463c:	4413      	add	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004644:	4a1d      	ldr	r2, [pc, #116]	@ (80046bc <prvHeapInit+0xb0>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800464a:	4b1c      	ldr	r3, [pc, #112]	@ (80046bc <prvHeapInit+0xb0>)
 800464c:	2200      	movs	r2, #0
 800464e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004658:	2208      	movs	r2, #8
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a15      	ldr	r2, [pc, #84]	@ (80046c0 <prvHeapInit+0xb4>)
 800466c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800466e:	4b14      	ldr	r3, [pc, #80]	@ (80046c0 <prvHeapInit+0xb4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <prvHeapInit+0xb4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800468c:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <prvHeapInit+0xb4>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <prvHeapInit+0xb8>)
 800469a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <prvHeapInit+0xbc>)
 80046a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046a4:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <prvHeapInit+0xc0>)
 80046a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046aa:	601a      	str	r2, [r3, #0]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	200006b4 	.word	0x200006b4
 80046bc:	200042b4 	.word	0x200042b4
 80046c0:	200042bc 	.word	0x200042bc
 80046c4:	200042c4 	.word	0x200042c4
 80046c8:	200042c0 	.word	0x200042c0
 80046cc:	200042d0 	.word	0x200042d0

080046d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046d8:	4b28      	ldr	r3, [pc, #160]	@ (800477c <prvInsertBlockIntoFreeList+0xac>)
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e002      	b.n	80046e4 <prvInsertBlockIntoFreeList+0x14>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d8f7      	bhi.n	80046de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d108      	bne.n	8004712 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	441a      	add	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d118      	bne.n	8004758 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <prvInsertBlockIntoFreeList+0xb0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d00d      	beq.n	800474e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	441a      	add	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e008      	b.n	8004760 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <prvInsertBlockIntoFreeList+0xb0>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e003      	b.n	8004760 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d002      	beq.n	800476e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	200042b4 	.word	0x200042b4
 8004780:	200042bc 	.word	0x200042bc

08004784 <__cvt>:
 8004784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	ec57 6b10 	vmov	r6, r7, d0
 800478c:	2f00      	cmp	r7, #0
 800478e:	460c      	mov	r4, r1
 8004790:	4619      	mov	r1, r3
 8004792:	463b      	mov	r3, r7
 8004794:	bfbb      	ittet	lt
 8004796:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800479a:	461f      	movlt	r7, r3
 800479c:	2300      	movge	r3, #0
 800479e:	232d      	movlt	r3, #45	@ 0x2d
 80047a0:	700b      	strb	r3, [r1, #0]
 80047a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80047a8:	4691      	mov	r9, r2
 80047aa:	f023 0820 	bic.w	r8, r3, #32
 80047ae:	bfbc      	itt	lt
 80047b0:	4632      	movlt	r2, r6
 80047b2:	4616      	movlt	r6, r2
 80047b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047b8:	d005      	beq.n	80047c6 <__cvt+0x42>
 80047ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047be:	d100      	bne.n	80047c2 <__cvt+0x3e>
 80047c0:	3401      	adds	r4, #1
 80047c2:	2102      	movs	r1, #2
 80047c4:	e000      	b.n	80047c8 <__cvt+0x44>
 80047c6:	2103      	movs	r1, #3
 80047c8:	ab03      	add	r3, sp, #12
 80047ca:	9301      	str	r3, [sp, #4]
 80047cc:	ab02      	add	r3, sp, #8
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	ec47 6b10 	vmov	d0, r6, r7
 80047d4:	4653      	mov	r3, sl
 80047d6:	4622      	mov	r2, r4
 80047d8:	f000 fe46 	bl	8005468 <_dtoa_r>
 80047dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047e0:	4605      	mov	r5, r0
 80047e2:	d119      	bne.n	8004818 <__cvt+0x94>
 80047e4:	f019 0f01 	tst.w	r9, #1
 80047e8:	d00e      	beq.n	8004808 <__cvt+0x84>
 80047ea:	eb00 0904 	add.w	r9, r0, r4
 80047ee:	2200      	movs	r2, #0
 80047f0:	2300      	movs	r3, #0
 80047f2:	4630      	mov	r0, r6
 80047f4:	4639      	mov	r1, r7
 80047f6:	f7fc f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80047fa:	b108      	cbz	r0, 8004800 <__cvt+0x7c>
 80047fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004800:	2230      	movs	r2, #48	@ 0x30
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	454b      	cmp	r3, r9
 8004806:	d31e      	bcc.n	8004846 <__cvt+0xc2>
 8004808:	9b03      	ldr	r3, [sp, #12]
 800480a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800480c:	1b5b      	subs	r3, r3, r5
 800480e:	4628      	mov	r0, r5
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	b004      	add	sp, #16
 8004814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800481c:	eb00 0904 	add.w	r9, r0, r4
 8004820:	d1e5      	bne.n	80047ee <__cvt+0x6a>
 8004822:	7803      	ldrb	r3, [r0, #0]
 8004824:	2b30      	cmp	r3, #48	@ 0x30
 8004826:	d10a      	bne.n	800483e <__cvt+0xba>
 8004828:	2200      	movs	r2, #0
 800482a:	2300      	movs	r3, #0
 800482c:	4630      	mov	r0, r6
 800482e:	4639      	mov	r1, r7
 8004830:	f7fc f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8004834:	b918      	cbnz	r0, 800483e <__cvt+0xba>
 8004836:	f1c4 0401 	rsb	r4, r4, #1
 800483a:	f8ca 4000 	str.w	r4, [sl]
 800483e:	f8da 3000 	ldr.w	r3, [sl]
 8004842:	4499      	add	r9, r3
 8004844:	e7d3      	b.n	80047ee <__cvt+0x6a>
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	9103      	str	r1, [sp, #12]
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e7d9      	b.n	8004802 <__cvt+0x7e>

0800484e <__exponent>:
 800484e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004850:	2900      	cmp	r1, #0
 8004852:	bfba      	itte	lt
 8004854:	4249      	neglt	r1, r1
 8004856:	232d      	movlt	r3, #45	@ 0x2d
 8004858:	232b      	movge	r3, #43	@ 0x2b
 800485a:	2909      	cmp	r1, #9
 800485c:	7002      	strb	r2, [r0, #0]
 800485e:	7043      	strb	r3, [r0, #1]
 8004860:	dd29      	ble.n	80048b6 <__exponent+0x68>
 8004862:	f10d 0307 	add.w	r3, sp, #7
 8004866:	461d      	mov	r5, r3
 8004868:	270a      	movs	r7, #10
 800486a:	461a      	mov	r2, r3
 800486c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004870:	fb07 1416 	mls	r4, r7, r6, r1
 8004874:	3430      	adds	r4, #48	@ 0x30
 8004876:	f802 4c01 	strb.w	r4, [r2, #-1]
 800487a:	460c      	mov	r4, r1
 800487c:	2c63      	cmp	r4, #99	@ 0x63
 800487e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004882:	4631      	mov	r1, r6
 8004884:	dcf1      	bgt.n	800486a <__exponent+0x1c>
 8004886:	3130      	adds	r1, #48	@ 0x30
 8004888:	1e94      	subs	r4, r2, #2
 800488a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800488e:	1c41      	adds	r1, r0, #1
 8004890:	4623      	mov	r3, r4
 8004892:	42ab      	cmp	r3, r5
 8004894:	d30a      	bcc.n	80048ac <__exponent+0x5e>
 8004896:	f10d 0309 	add.w	r3, sp, #9
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	42ac      	cmp	r4, r5
 800489e:	bf88      	it	hi
 80048a0:	2300      	movhi	r3, #0
 80048a2:	3302      	adds	r3, #2
 80048a4:	4403      	add	r3, r0
 80048a6:	1a18      	subs	r0, r3, r0
 80048a8:	b003      	add	sp, #12
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048b4:	e7ed      	b.n	8004892 <__exponent+0x44>
 80048b6:	2330      	movs	r3, #48	@ 0x30
 80048b8:	3130      	adds	r1, #48	@ 0x30
 80048ba:	7083      	strb	r3, [r0, #2]
 80048bc:	70c1      	strb	r1, [r0, #3]
 80048be:	1d03      	adds	r3, r0, #4
 80048c0:	e7f1      	b.n	80048a6 <__exponent+0x58>
	...

080048c4 <_printf_float>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	b08d      	sub	sp, #52	@ 0x34
 80048ca:	460c      	mov	r4, r1
 80048cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048d0:	4616      	mov	r6, r2
 80048d2:	461f      	mov	r7, r3
 80048d4:	4605      	mov	r5, r0
 80048d6:	f000 fcb9 	bl	800524c <_localeconv_r>
 80048da:	6803      	ldr	r3, [r0, #0]
 80048dc:	9304      	str	r3, [sp, #16]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fcce 	bl	8000280 <strlen>
 80048e4:	2300      	movs	r3, #0
 80048e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80048e8:	f8d8 3000 	ldr.w	r3, [r8]
 80048ec:	9005      	str	r0, [sp, #20]
 80048ee:	3307      	adds	r3, #7
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	f103 0208 	add.w	r2, r3, #8
 80048f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048fc:	f8d4 b000 	ldr.w	fp, [r4]
 8004900:	f8c8 2000 	str.w	r2, [r8]
 8004904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004908:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800490c:	9307      	str	r3, [sp, #28]
 800490e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004912:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800491a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b8c <_printf_float+0x2c8>)
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	f7fc f90c 	bl	8000b3c <__aeabi_dcmpun>
 8004924:	bb70      	cbnz	r0, 8004984 <_printf_float+0xc0>
 8004926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800492a:	4b98      	ldr	r3, [pc, #608]	@ (8004b8c <_printf_float+0x2c8>)
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	f7fc f8e6 	bl	8000b00 <__aeabi_dcmple>
 8004934:	bb30      	cbnz	r0, 8004984 <_printf_float+0xc0>
 8004936:	2200      	movs	r2, #0
 8004938:	2300      	movs	r3, #0
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fc f8d5 	bl	8000aec <__aeabi_dcmplt>
 8004942:	b110      	cbz	r0, 800494a <_printf_float+0x86>
 8004944:	232d      	movs	r3, #45	@ 0x2d
 8004946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800494a:	4a91      	ldr	r2, [pc, #580]	@ (8004b90 <_printf_float+0x2cc>)
 800494c:	4b91      	ldr	r3, [pc, #580]	@ (8004b94 <_printf_float+0x2d0>)
 800494e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004952:	bf8c      	ite	hi
 8004954:	4690      	movhi	r8, r2
 8004956:	4698      	movls	r8, r3
 8004958:	2303      	movs	r3, #3
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	f02b 0304 	bic.w	r3, fp, #4
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	f04f 0900 	mov.w	r9, #0
 8004966:	9700      	str	r7, [sp, #0]
 8004968:	4633      	mov	r3, r6
 800496a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800496c:	4621      	mov	r1, r4
 800496e:	4628      	mov	r0, r5
 8004970:	f000 f9d2 	bl	8004d18 <_printf_common>
 8004974:	3001      	adds	r0, #1
 8004976:	f040 808d 	bne.w	8004a94 <_printf_float+0x1d0>
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	b00d      	add	sp, #52	@ 0x34
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fc f8d6 	bl	8000b3c <__aeabi_dcmpun>
 8004990:	b140      	cbz	r0, 80049a4 <_printf_float+0xe0>
 8004992:	464b      	mov	r3, r9
 8004994:	2b00      	cmp	r3, #0
 8004996:	bfbc      	itt	lt
 8004998:	232d      	movlt	r3, #45	@ 0x2d
 800499a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800499e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b98 <_printf_float+0x2d4>)
 80049a0:	4b7e      	ldr	r3, [pc, #504]	@ (8004b9c <_printf_float+0x2d8>)
 80049a2:	e7d4      	b.n	800494e <_printf_float+0x8a>
 80049a4:	6863      	ldr	r3, [r4, #4]
 80049a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80049aa:	9206      	str	r2, [sp, #24]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	d13b      	bne.n	8004a28 <_printf_float+0x164>
 80049b0:	2306      	movs	r3, #6
 80049b2:	6063      	str	r3, [r4, #4]
 80049b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80049b8:	2300      	movs	r3, #0
 80049ba:	6022      	str	r2, [r4, #0]
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	ab0a      	add	r3, sp, #40	@ 0x28
 80049c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80049c4:	ab09      	add	r3, sp, #36	@ 0x24
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	6861      	ldr	r1, [r4, #4]
 80049ca:	ec49 8b10 	vmov	d0, r8, r9
 80049ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff fed6 	bl	8004784 <__cvt>
 80049d8:	9b06      	ldr	r3, [sp, #24]
 80049da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049dc:	2b47      	cmp	r3, #71	@ 0x47
 80049de:	4680      	mov	r8, r0
 80049e0:	d129      	bne.n	8004a36 <_printf_float+0x172>
 80049e2:	1cc8      	adds	r0, r1, #3
 80049e4:	db02      	blt.n	80049ec <_printf_float+0x128>
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	4299      	cmp	r1, r3
 80049ea:	dd41      	ble.n	8004a70 <_printf_float+0x1ac>
 80049ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80049f0:	fa5f fa8a 	uxtb.w	sl, sl
 80049f4:	3901      	subs	r1, #1
 80049f6:	4652      	mov	r2, sl
 80049f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80049fe:	f7ff ff26 	bl	800484e <__exponent>
 8004a02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a04:	1813      	adds	r3, r2, r0
 8004a06:	2a01      	cmp	r2, #1
 8004a08:	4681      	mov	r9, r0
 8004a0a:	6123      	str	r3, [r4, #16]
 8004a0c:	dc02      	bgt.n	8004a14 <_printf_float+0x150>
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	07d2      	lsls	r2, r2, #31
 8004a12:	d501      	bpl.n	8004a18 <_printf_float+0x154>
 8004a14:	3301      	adds	r3, #1
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0a2      	beq.n	8004966 <_printf_float+0xa2>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a26:	e79e      	b.n	8004966 <_printf_float+0xa2>
 8004a28:	9a06      	ldr	r2, [sp, #24]
 8004a2a:	2a47      	cmp	r2, #71	@ 0x47
 8004a2c:	d1c2      	bne.n	80049b4 <_printf_float+0xf0>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c0      	bne.n	80049b4 <_printf_float+0xf0>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7bd      	b.n	80049b2 <_printf_float+0xee>
 8004a36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a3a:	d9db      	bls.n	80049f4 <_printf_float+0x130>
 8004a3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a40:	d118      	bne.n	8004a74 <_printf_float+0x1b0>
 8004a42:	2900      	cmp	r1, #0
 8004a44:	6863      	ldr	r3, [r4, #4]
 8004a46:	dd0b      	ble.n	8004a60 <_printf_float+0x19c>
 8004a48:	6121      	str	r1, [r4, #16]
 8004a4a:	b913      	cbnz	r3, 8004a52 <_printf_float+0x18e>
 8004a4c:	6822      	ldr	r2, [r4, #0]
 8004a4e:	07d0      	lsls	r0, r2, #31
 8004a50:	d502      	bpl.n	8004a58 <_printf_float+0x194>
 8004a52:	3301      	adds	r3, #1
 8004a54:	440b      	add	r3, r1
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	e7db      	b.n	8004a18 <_printf_float+0x154>
 8004a60:	b913      	cbnz	r3, 8004a68 <_printf_float+0x1a4>
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	07d2      	lsls	r2, r2, #31
 8004a66:	d501      	bpl.n	8004a6c <_printf_float+0x1a8>
 8004a68:	3302      	adds	r3, #2
 8004a6a:	e7f4      	b.n	8004a56 <_printf_float+0x192>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e7f2      	b.n	8004a56 <_printf_float+0x192>
 8004a70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a76:	4299      	cmp	r1, r3
 8004a78:	db05      	blt.n	8004a86 <_printf_float+0x1c2>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	6121      	str	r1, [r4, #16]
 8004a7e:	07d8      	lsls	r0, r3, #31
 8004a80:	d5ea      	bpl.n	8004a58 <_printf_float+0x194>
 8004a82:	1c4b      	adds	r3, r1, #1
 8004a84:	e7e7      	b.n	8004a56 <_printf_float+0x192>
 8004a86:	2900      	cmp	r1, #0
 8004a88:	bfd4      	ite	le
 8004a8a:	f1c1 0202 	rsble	r2, r1, #2
 8004a8e:	2201      	movgt	r2, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	e7e0      	b.n	8004a56 <_printf_float+0x192>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	055a      	lsls	r2, r3, #21
 8004a98:	d407      	bmi.n	8004aaa <_printf_float+0x1e6>
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d12b      	bne.n	8004b00 <_printf_float+0x23c>
 8004aa8:	e767      	b.n	800497a <_printf_float+0xb6>
 8004aaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004aae:	f240 80dd 	bls.w	8004c6c <_printf_float+0x3a8>
 8004ab2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f7fc f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d033      	beq.n	8004b2a <_printf_float+0x266>
 8004ac2:	4a37      	ldr	r2, [pc, #220]	@ (8004ba0 <_printf_float+0x2dc>)
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	f43f af54 	beq.w	800497a <_printf_float+0xb6>
 8004ad2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004ad6:	4543      	cmp	r3, r8
 8004ad8:	db02      	blt.n	8004ae0 <_printf_float+0x21c>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	07d8      	lsls	r0, r3, #31
 8004ade:	d50f      	bpl.n	8004b00 <_printf_float+0x23c>
 8004ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b8      	blx	r7
 8004aea:	3001      	adds	r0, #1
 8004aec:	f43f af45 	beq.w	800497a <_printf_float+0xb6>
 8004af0:	f04f 0900 	mov.w	r9, #0
 8004af4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004af8:	f104 0a1a 	add.w	sl, r4, #26
 8004afc:	45c8      	cmp	r8, r9
 8004afe:	dc09      	bgt.n	8004b14 <_printf_float+0x250>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	079b      	lsls	r3, r3, #30
 8004b04:	f100 8103 	bmi.w	8004d0e <_printf_float+0x44a>
 8004b08:	68e0      	ldr	r0, [r4, #12]
 8004b0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b0c:	4298      	cmp	r0, r3
 8004b0e:	bfb8      	it	lt
 8004b10:	4618      	movlt	r0, r3
 8004b12:	e734      	b.n	800497e <_printf_float+0xba>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4652      	mov	r2, sl
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f43f af2b 	beq.w	800497a <_printf_float+0xb6>
 8004b24:	f109 0901 	add.w	r9, r9, #1
 8004b28:	e7e8      	b.n	8004afc <_printf_float+0x238>
 8004b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dc39      	bgt.n	8004ba4 <_printf_float+0x2e0>
 8004b30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba0 <_printf_float+0x2dc>)
 8004b32:	2301      	movs	r3, #1
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f af1d 	beq.w	800497a <_printf_float+0xb6>
 8004b40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b44:	ea59 0303 	orrs.w	r3, r9, r3
 8004b48:	d102      	bne.n	8004b50 <_printf_float+0x28c>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	07d9      	lsls	r1, r3, #31
 8004b4e:	d5d7      	bpl.n	8004b00 <_printf_float+0x23c>
 8004b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f af0d 	beq.w	800497a <_printf_float+0xb6>
 8004b60:	f04f 0a00 	mov.w	sl, #0
 8004b64:	f104 0b1a 	add.w	fp, r4, #26
 8004b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b6a:	425b      	negs	r3, r3
 8004b6c:	4553      	cmp	r3, sl
 8004b6e:	dc01      	bgt.n	8004b74 <_printf_float+0x2b0>
 8004b70:	464b      	mov	r3, r9
 8004b72:	e793      	b.n	8004a9c <_printf_float+0x1d8>
 8004b74:	2301      	movs	r3, #1
 8004b76:	465a      	mov	r2, fp
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f aefb 	beq.w	800497a <_printf_float+0xb6>
 8004b84:	f10a 0a01 	add.w	sl, sl, #1
 8004b88:	e7ee      	b.n	8004b68 <_printf_float+0x2a4>
 8004b8a:	bf00      	nop
 8004b8c:	7fefffff 	.word	0x7fefffff
 8004b90:	080070ec 	.word	0x080070ec
 8004b94:	080070e8 	.word	0x080070e8
 8004b98:	080070f4 	.word	0x080070f4
 8004b9c:	080070f0 	.word	0x080070f0
 8004ba0:	080070f8 	.word	0x080070f8
 8004ba4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ba6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004baa:	4553      	cmp	r3, sl
 8004bac:	bfa8      	it	ge
 8004bae:	4653      	movge	r3, sl
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	dc36      	bgt.n	8004c24 <_printf_float+0x360>
 8004bb6:	f04f 0b00 	mov.w	fp, #0
 8004bba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bbe:	f104 021a 	add.w	r2, r4, #26
 8004bc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bc4:	9306      	str	r3, [sp, #24]
 8004bc6:	eba3 0309 	sub.w	r3, r3, r9
 8004bca:	455b      	cmp	r3, fp
 8004bcc:	dc31      	bgt.n	8004c32 <_printf_float+0x36e>
 8004bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd0:	459a      	cmp	sl, r3
 8004bd2:	dc3a      	bgt.n	8004c4a <_printf_float+0x386>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	07da      	lsls	r2, r3, #31
 8004bd8:	d437      	bmi.n	8004c4a <_printf_float+0x386>
 8004bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bdc:	ebaa 0903 	sub.w	r9, sl, r3
 8004be0:	9b06      	ldr	r3, [sp, #24]
 8004be2:	ebaa 0303 	sub.w	r3, sl, r3
 8004be6:	4599      	cmp	r9, r3
 8004be8:	bfa8      	it	ge
 8004bea:	4699      	movge	r9, r3
 8004bec:	f1b9 0f00 	cmp.w	r9, #0
 8004bf0:	dc33      	bgt.n	8004c5a <_printf_float+0x396>
 8004bf2:	f04f 0800 	mov.w	r8, #0
 8004bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bfa:	f104 0b1a 	add.w	fp, r4, #26
 8004bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c00:	ebaa 0303 	sub.w	r3, sl, r3
 8004c04:	eba3 0309 	sub.w	r3, r3, r9
 8004c08:	4543      	cmp	r3, r8
 8004c0a:	f77f af79 	ble.w	8004b00 <_printf_float+0x23c>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	465a      	mov	r2, fp
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f aeae 	beq.w	800497a <_printf_float+0xb6>
 8004c1e:	f108 0801 	add.w	r8, r8, #1
 8004c22:	e7ec      	b.n	8004bfe <_printf_float+0x33a>
 8004c24:	4642      	mov	r2, r8
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d1c2      	bne.n	8004bb6 <_printf_float+0x2f2>
 8004c30:	e6a3      	b.n	800497a <_printf_float+0xb6>
 8004c32:	2301      	movs	r3, #1
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	9206      	str	r2, [sp, #24]
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f ae9c 	beq.w	800497a <_printf_float+0xb6>
 8004c42:	9a06      	ldr	r2, [sp, #24]
 8004c44:	f10b 0b01 	add.w	fp, fp, #1
 8004c48:	e7bb      	b.n	8004bc2 <_printf_float+0x2fe>
 8004c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b8      	blx	r7
 8004c54:	3001      	adds	r0, #1
 8004c56:	d1c0      	bne.n	8004bda <_printf_float+0x316>
 8004c58:	e68f      	b.n	800497a <_printf_float+0xb6>
 8004c5a:	9a06      	ldr	r2, [sp, #24]
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	4442      	add	r2, r8
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	d1c3      	bne.n	8004bf2 <_printf_float+0x32e>
 8004c6a:	e686      	b.n	800497a <_printf_float+0xb6>
 8004c6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c70:	f1ba 0f01 	cmp.w	sl, #1
 8004c74:	dc01      	bgt.n	8004c7a <_printf_float+0x3b6>
 8004c76:	07db      	lsls	r3, r3, #31
 8004c78:	d536      	bpl.n	8004ce8 <_printf_float+0x424>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f ae78 	beq.w	800497a <_printf_float+0xb6>
 8004c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f ae70 	beq.w	800497a <_printf_float+0xb6>
 8004c9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ca6:	f7fb ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8004caa:	b9c0      	cbnz	r0, 8004cde <_printf_float+0x41a>
 8004cac:	4653      	mov	r3, sl
 8004cae:	f108 0201 	add.w	r2, r8, #1
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	47b8      	blx	r7
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d10c      	bne.n	8004cd6 <_printf_float+0x412>
 8004cbc:	e65d      	b.n	800497a <_printf_float+0xb6>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	465a      	mov	r2, fp
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	47b8      	blx	r7
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f43f ae56 	beq.w	800497a <_printf_float+0xb6>
 8004cce:	f108 0801 	add.w	r8, r8, #1
 8004cd2:	45d0      	cmp	r8, sl
 8004cd4:	dbf3      	blt.n	8004cbe <_printf_float+0x3fa>
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cdc:	e6df      	b.n	8004a9e <_printf_float+0x1da>
 8004cde:	f04f 0800 	mov.w	r8, #0
 8004ce2:	f104 0b1a 	add.w	fp, r4, #26
 8004ce6:	e7f4      	b.n	8004cd2 <_printf_float+0x40e>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4642      	mov	r2, r8
 8004cec:	e7e1      	b.n	8004cb2 <_printf_float+0x3ee>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	464a      	mov	r2, r9
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f ae3e 	beq.w	800497a <_printf_float+0xb6>
 8004cfe:	f108 0801 	add.w	r8, r8, #1
 8004d02:	68e3      	ldr	r3, [r4, #12]
 8004d04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d06:	1a5b      	subs	r3, r3, r1
 8004d08:	4543      	cmp	r3, r8
 8004d0a:	dcf0      	bgt.n	8004cee <_printf_float+0x42a>
 8004d0c:	e6fc      	b.n	8004b08 <_printf_float+0x244>
 8004d0e:	f04f 0800 	mov.w	r8, #0
 8004d12:	f104 0919 	add.w	r9, r4, #25
 8004d16:	e7f4      	b.n	8004d02 <_printf_float+0x43e>

08004d18 <_printf_common>:
 8004d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	4698      	mov	r8, r3
 8004d20:	688a      	ldr	r2, [r1, #8]
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	bfb8      	it	lt
 8004d2c:	4613      	movlt	r3, r2
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b10a      	cbz	r2, 8004d3e <_printf_common+0x26>
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	0699      	lsls	r1, r3, #26
 8004d42:	bf42      	ittt	mi
 8004d44:	6833      	ldrmi	r3, [r6, #0]
 8004d46:	3302      	addmi	r3, #2
 8004d48:	6033      	strmi	r3, [r6, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	f015 0506 	ands.w	r5, r5, #6
 8004d50:	d106      	bne.n	8004d60 <_printf_common+0x48>
 8004d52:	f104 0a19 	add.w	sl, r4, #25
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	6832      	ldr	r2, [r6, #0]
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dc26      	bgt.n	8004dae <_printf_common+0x96>
 8004d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d64:	6822      	ldr	r2, [r4, #0]
 8004d66:	3b00      	subs	r3, #0
 8004d68:	bf18      	it	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d42b      	bmi.n	8004dc8 <_printf_common+0xb0>
 8004d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d74:	4641      	mov	r1, r8
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c8      	blx	r9
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d01e      	beq.n	8004dbc <_printf_common+0xa4>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	6922      	ldr	r2, [r4, #16]
 8004d82:	f003 0306 	and.w	r3, r3, #6
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	bf02      	ittt	eq
 8004d8a:	68e5      	ldreq	r5, [r4, #12]
 8004d8c:	6833      	ldreq	r3, [r6, #0]
 8004d8e:	1aed      	subeq	r5, r5, r3
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	bf0c      	ite	eq
 8004d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d98:	2500      	movne	r5, #0
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bfc4      	itt	gt
 8004d9e:	1a9b      	subgt	r3, r3, r2
 8004da0:	18ed      	addgt	r5, r5, r3
 8004da2:	2600      	movs	r6, #0
 8004da4:	341a      	adds	r4, #26
 8004da6:	42b5      	cmp	r5, r6
 8004da8:	d11a      	bne.n	8004de0 <_printf_common+0xc8>
 8004daa:	2000      	movs	r0, #0
 8004dac:	e008      	b.n	8004dc0 <_printf_common+0xa8>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	4641      	mov	r1, r8
 8004db4:	4638      	mov	r0, r7
 8004db6:	47c8      	blx	r9
 8004db8:	3001      	adds	r0, #1
 8004dba:	d103      	bne.n	8004dc4 <_printf_common+0xac>
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	e7c6      	b.n	8004d56 <_printf_common+0x3e>
 8004dc8:	18e1      	adds	r1, r4, r3
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	2030      	movs	r0, #48	@ 0x30
 8004dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dd2:	4422      	add	r2, r4
 8004dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ddc:	3302      	adds	r3, #2
 8004dde:	e7c7      	b.n	8004d70 <_printf_common+0x58>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4622      	mov	r2, r4
 8004de4:	4641      	mov	r1, r8
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c8      	blx	r9
 8004dea:	3001      	adds	r0, #1
 8004dec:	d0e6      	beq.n	8004dbc <_printf_common+0xa4>
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7d9      	b.n	8004da6 <_printf_common+0x8e>
	...

08004df4 <_printf_i>:
 8004df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	7e0f      	ldrb	r7, [r1, #24]
 8004dfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dfc:	2f78      	cmp	r7, #120	@ 0x78
 8004dfe:	4691      	mov	r9, r2
 8004e00:	4680      	mov	r8, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	469a      	mov	sl, r3
 8004e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e0a:	d807      	bhi.n	8004e1c <_printf_i+0x28>
 8004e0c:	2f62      	cmp	r7, #98	@ 0x62
 8004e0e:	d80a      	bhi.n	8004e26 <_printf_i+0x32>
 8004e10:	2f00      	cmp	r7, #0
 8004e12:	f000 80d1 	beq.w	8004fb8 <_printf_i+0x1c4>
 8004e16:	2f58      	cmp	r7, #88	@ 0x58
 8004e18:	f000 80b8 	beq.w	8004f8c <_printf_i+0x198>
 8004e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e24:	e03a      	b.n	8004e9c <_printf_i+0xa8>
 8004e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e2a:	2b15      	cmp	r3, #21
 8004e2c:	d8f6      	bhi.n	8004e1c <_printf_i+0x28>
 8004e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e34 <_printf_i+0x40>)
 8004e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004e1d 	.word	0x08004e1d
 8004e40:	08004e1d 	.word	0x08004e1d
 8004e44:	08004e1d 	.word	0x08004e1d
 8004e48:	08004e1d 	.word	0x08004e1d
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004e1d 	.word	0x08004e1d
 8004e54:	08004e1d 	.word	0x08004e1d
 8004e58:	08004e1d 	.word	0x08004e1d
 8004e5c:	08004e1d 	.word	0x08004e1d
 8004e60:	08004f9f 	.word	0x08004f9f
 8004e64:	08004ecb 	.word	0x08004ecb
 8004e68:	08004f59 	.word	0x08004f59
 8004e6c:	08004e1d 	.word	0x08004e1d
 8004e70:	08004e1d 	.word	0x08004e1d
 8004e74:	08004fc1 	.word	0x08004fc1
 8004e78:	08004e1d 	.word	0x08004e1d
 8004e7c:	08004ecb 	.word	0x08004ecb
 8004e80:	08004e1d 	.word	0x08004e1d
 8004e84:	08004e1d 	.word	0x08004e1d
 8004e88:	08004f61 	.word	0x08004f61
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6032      	str	r2, [r6, #0]
 8004e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e09c      	b.n	8004fda <_printf_i+0x1e6>
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	1d19      	adds	r1, r3, #4
 8004ea6:	6031      	str	r1, [r6, #0]
 8004ea8:	0606      	lsls	r6, r0, #24
 8004eaa:	d501      	bpl.n	8004eb0 <_printf_i+0xbc>
 8004eac:	681d      	ldr	r5, [r3, #0]
 8004eae:	e003      	b.n	8004eb8 <_printf_i+0xc4>
 8004eb0:	0645      	lsls	r5, r0, #25
 8004eb2:	d5fb      	bpl.n	8004eac <_printf_i+0xb8>
 8004eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	da03      	bge.n	8004ec4 <_printf_i+0xd0>
 8004ebc:	232d      	movs	r3, #45	@ 0x2d
 8004ebe:	426d      	negs	r5, r5
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec4:	4858      	ldr	r0, [pc, #352]	@ (8005028 <_printf_i+0x234>)
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e011      	b.n	8004eee <_printf_i+0xfa>
 8004eca:	6821      	ldr	r1, [r4, #0]
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	0608      	lsls	r0, r1, #24
 8004ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ed4:	d402      	bmi.n	8004edc <_printf_i+0xe8>
 8004ed6:	0649      	lsls	r1, r1, #25
 8004ed8:	bf48      	it	mi
 8004eda:	b2ad      	uxthmi	r5, r5
 8004edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ede:	4852      	ldr	r0, [pc, #328]	@ (8005028 <_printf_i+0x234>)
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	bf14      	ite	ne
 8004ee4:	230a      	movne	r3, #10
 8004ee6:	2308      	moveq	r3, #8
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eee:	6866      	ldr	r6, [r4, #4]
 8004ef0:	60a6      	str	r6, [r4, #8]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	db05      	blt.n	8004f02 <_printf_i+0x10e>
 8004ef6:	6821      	ldr	r1, [r4, #0]
 8004ef8:	432e      	orrs	r6, r5
 8004efa:	f021 0104 	bic.w	r1, r1, #4
 8004efe:	6021      	str	r1, [r4, #0]
 8004f00:	d04b      	beq.n	8004f9a <_printf_i+0x1a6>
 8004f02:	4616      	mov	r6, r2
 8004f04:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f08:	fb03 5711 	mls	r7, r3, r1, r5
 8004f0c:	5dc7      	ldrb	r7, [r0, r7]
 8004f0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f12:	462f      	mov	r7, r5
 8004f14:	42bb      	cmp	r3, r7
 8004f16:	460d      	mov	r5, r1
 8004f18:	d9f4      	bls.n	8004f04 <_printf_i+0x110>
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d10b      	bne.n	8004f36 <_printf_i+0x142>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	07df      	lsls	r7, r3, #31
 8004f22:	d508      	bpl.n	8004f36 <_printf_i+0x142>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	6861      	ldr	r1, [r4, #4]
 8004f28:	4299      	cmp	r1, r3
 8004f2a:	bfde      	ittt	le
 8004f2c:	2330      	movle	r3, #48	@ 0x30
 8004f2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f36:	1b92      	subs	r2, r2, r6
 8004f38:	6122      	str	r2, [r4, #16]
 8004f3a:	f8cd a000 	str.w	sl, [sp]
 8004f3e:	464b      	mov	r3, r9
 8004f40:	aa03      	add	r2, sp, #12
 8004f42:	4621      	mov	r1, r4
 8004f44:	4640      	mov	r0, r8
 8004f46:	f7ff fee7 	bl	8004d18 <_printf_common>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d14a      	bne.n	8004fe4 <_printf_i+0x1f0>
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	b004      	add	sp, #16
 8004f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	f043 0320 	orr.w	r3, r3, #32
 8004f5e:	6023      	str	r3, [r4, #0]
 8004f60:	4832      	ldr	r0, [pc, #200]	@ (800502c <_printf_i+0x238>)
 8004f62:	2778      	movs	r7, #120	@ 0x78
 8004f64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	6831      	ldr	r1, [r6, #0]
 8004f6c:	061f      	lsls	r7, r3, #24
 8004f6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f72:	d402      	bmi.n	8004f7a <_printf_i+0x186>
 8004f74:	065f      	lsls	r7, r3, #25
 8004f76:	bf48      	it	mi
 8004f78:	b2ad      	uxthmi	r5, r5
 8004f7a:	6031      	str	r1, [r6, #0]
 8004f7c:	07d9      	lsls	r1, r3, #31
 8004f7e:	bf44      	itt	mi
 8004f80:	f043 0320 	orrmi.w	r3, r3, #32
 8004f84:	6023      	strmi	r3, [r4, #0]
 8004f86:	b11d      	cbz	r5, 8004f90 <_printf_i+0x19c>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	e7ad      	b.n	8004ee8 <_printf_i+0xf4>
 8004f8c:	4826      	ldr	r0, [pc, #152]	@ (8005028 <_printf_i+0x234>)
 8004f8e:	e7e9      	b.n	8004f64 <_printf_i+0x170>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f023 0320 	bic.w	r3, r3, #32
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	e7f6      	b.n	8004f88 <_printf_i+0x194>
 8004f9a:	4616      	mov	r6, r2
 8004f9c:	e7bd      	b.n	8004f1a <_printf_i+0x126>
 8004f9e:	6833      	ldr	r3, [r6, #0]
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	6961      	ldr	r1, [r4, #20]
 8004fa4:	1d18      	adds	r0, r3, #4
 8004fa6:	6030      	str	r0, [r6, #0]
 8004fa8:	062e      	lsls	r6, r5, #24
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	d501      	bpl.n	8004fb2 <_printf_i+0x1be>
 8004fae:	6019      	str	r1, [r3, #0]
 8004fb0:	e002      	b.n	8004fb8 <_printf_i+0x1c4>
 8004fb2:	0668      	lsls	r0, r5, #25
 8004fb4:	d5fb      	bpl.n	8004fae <_printf_i+0x1ba>
 8004fb6:	8019      	strh	r1, [r3, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6123      	str	r3, [r4, #16]
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	e7bc      	b.n	8004f3a <_printf_i+0x146>
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	6032      	str	r2, [r6, #0]
 8004fc6:	681e      	ldr	r6, [r3, #0]
 8004fc8:	6862      	ldr	r2, [r4, #4]
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7fb f907 	bl	80001e0 <memchr>
 8004fd2:	b108      	cbz	r0, 8004fd8 <_printf_i+0x1e4>
 8004fd4:	1b80      	subs	r0, r0, r6
 8004fd6:	6060      	str	r0, [r4, #4]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe2:	e7aa      	b.n	8004f3a <_printf_i+0x146>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4649      	mov	r1, r9
 8004fea:	4640      	mov	r0, r8
 8004fec:	47d0      	blx	sl
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0ad      	beq.n	8004f4e <_printf_i+0x15a>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	079b      	lsls	r3, r3, #30
 8004ff6:	d413      	bmi.n	8005020 <_printf_i+0x22c>
 8004ff8:	68e0      	ldr	r0, [r4, #12]
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	bfb8      	it	lt
 8005000:	4618      	movlt	r0, r3
 8005002:	e7a6      	b.n	8004f52 <_printf_i+0x15e>
 8005004:	2301      	movs	r3, #1
 8005006:	4632      	mov	r2, r6
 8005008:	4649      	mov	r1, r9
 800500a:	4640      	mov	r0, r8
 800500c:	47d0      	blx	sl
 800500e:	3001      	adds	r0, #1
 8005010:	d09d      	beq.n	8004f4e <_printf_i+0x15a>
 8005012:	3501      	adds	r5, #1
 8005014:	68e3      	ldr	r3, [r4, #12]
 8005016:	9903      	ldr	r1, [sp, #12]
 8005018:	1a5b      	subs	r3, r3, r1
 800501a:	42ab      	cmp	r3, r5
 800501c:	dcf2      	bgt.n	8005004 <_printf_i+0x210>
 800501e:	e7eb      	b.n	8004ff8 <_printf_i+0x204>
 8005020:	2500      	movs	r5, #0
 8005022:	f104 0619 	add.w	r6, r4, #25
 8005026:	e7f5      	b.n	8005014 <_printf_i+0x220>
 8005028:	080070fa 	.word	0x080070fa
 800502c:	0800710b 	.word	0x0800710b

08005030 <std>:
 8005030:	2300      	movs	r3, #0
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	e9c0 3300 	strd	r3, r3, [r0]
 800503a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800503e:	6083      	str	r3, [r0, #8]
 8005040:	8181      	strh	r1, [r0, #12]
 8005042:	6643      	str	r3, [r0, #100]	@ 0x64
 8005044:	81c2      	strh	r2, [r0, #14]
 8005046:	6183      	str	r3, [r0, #24]
 8005048:	4619      	mov	r1, r3
 800504a:	2208      	movs	r2, #8
 800504c:	305c      	adds	r0, #92	@ 0x5c
 800504e:	f000 f8f4 	bl	800523a <memset>
 8005052:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <std+0x58>)
 8005054:	6263      	str	r3, [r4, #36]	@ 0x24
 8005056:	4b0d      	ldr	r3, [pc, #52]	@ (800508c <std+0x5c>)
 8005058:	62a3      	str	r3, [r4, #40]	@ 0x28
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <std+0x60>)
 800505c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <std+0x64>)
 8005060:	6323      	str	r3, [r4, #48]	@ 0x30
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <std+0x68>)
 8005064:	6224      	str	r4, [r4, #32]
 8005066:	429c      	cmp	r4, r3
 8005068:	d006      	beq.n	8005078 <std+0x48>
 800506a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800506e:	4294      	cmp	r4, r2
 8005070:	d002      	beq.n	8005078 <std+0x48>
 8005072:	33d0      	adds	r3, #208	@ 0xd0
 8005074:	429c      	cmp	r4, r3
 8005076:	d105      	bne.n	8005084 <std+0x54>
 8005078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800507c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005080:	f000 b958 	b.w	8005334 <__retarget_lock_init_recursive>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	bf00      	nop
 8005088:	080051b5 	.word	0x080051b5
 800508c:	080051d7 	.word	0x080051d7
 8005090:	0800520f 	.word	0x0800520f
 8005094:	08005233 	.word	0x08005233
 8005098:	200042d4 	.word	0x200042d4

0800509c <stdio_exit_handler>:
 800509c:	4a02      	ldr	r2, [pc, #8]	@ (80050a8 <stdio_exit_handler+0xc>)
 800509e:	4903      	ldr	r1, [pc, #12]	@ (80050ac <stdio_exit_handler+0x10>)
 80050a0:	4803      	ldr	r0, [pc, #12]	@ (80050b0 <stdio_exit_handler+0x14>)
 80050a2:	f000 b869 	b.w	8005178 <_fwalk_sglue>
 80050a6:	bf00      	nop
 80050a8:	20000010 	.word	0x20000010
 80050ac:	08006a05 	.word	0x08006a05
 80050b0:	20000020 	.word	0x20000020

080050b4 <cleanup_stdio>:
 80050b4:	6841      	ldr	r1, [r0, #4]
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <cleanup_stdio+0x34>)
 80050b8:	4299      	cmp	r1, r3
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
 80050be:	d001      	beq.n	80050c4 <cleanup_stdio+0x10>
 80050c0:	f001 fca0 	bl	8006a04 <_fflush_r>
 80050c4:	68a1      	ldr	r1, [r4, #8]
 80050c6:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <cleanup_stdio+0x38>)
 80050c8:	4299      	cmp	r1, r3
 80050ca:	d002      	beq.n	80050d2 <cleanup_stdio+0x1e>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f001 fc99 	bl	8006a04 <_fflush_r>
 80050d2:	68e1      	ldr	r1, [r4, #12]
 80050d4:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <cleanup_stdio+0x3c>)
 80050d6:	4299      	cmp	r1, r3
 80050d8:	d004      	beq.n	80050e4 <cleanup_stdio+0x30>
 80050da:	4620      	mov	r0, r4
 80050dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e0:	f001 bc90 	b.w	8006a04 <_fflush_r>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	bf00      	nop
 80050e8:	200042d4 	.word	0x200042d4
 80050ec:	2000433c 	.word	0x2000433c
 80050f0:	200043a4 	.word	0x200043a4

080050f4 <global_stdio_init.part.0>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <global_stdio_init.part.0+0x30>)
 80050f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005128 <global_stdio_init.part.0+0x34>)
 80050fa:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <global_stdio_init.part.0+0x38>)
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	4620      	mov	r0, r4
 8005100:	2200      	movs	r2, #0
 8005102:	2104      	movs	r1, #4
 8005104:	f7ff ff94 	bl	8005030 <std>
 8005108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800510c:	2201      	movs	r2, #1
 800510e:	2109      	movs	r1, #9
 8005110:	f7ff ff8e 	bl	8005030 <std>
 8005114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005118:	2202      	movs	r2, #2
 800511a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800511e:	2112      	movs	r1, #18
 8005120:	f7ff bf86 	b.w	8005030 <std>
 8005124:	2000440c 	.word	0x2000440c
 8005128:	200042d4 	.word	0x200042d4
 800512c:	0800509d 	.word	0x0800509d

08005130 <__sfp_lock_acquire>:
 8005130:	4801      	ldr	r0, [pc, #4]	@ (8005138 <__sfp_lock_acquire+0x8>)
 8005132:	f000 b900 	b.w	8005336 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	20004415 	.word	0x20004415

0800513c <__sfp_lock_release>:
 800513c:	4801      	ldr	r0, [pc, #4]	@ (8005144 <__sfp_lock_release+0x8>)
 800513e:	f000 b8fb 	b.w	8005338 <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	20004415 	.word	0x20004415

08005148 <__sinit>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4604      	mov	r4, r0
 800514c:	f7ff fff0 	bl	8005130 <__sfp_lock_acquire>
 8005150:	6a23      	ldr	r3, [r4, #32]
 8005152:	b11b      	cbz	r3, 800515c <__sinit+0x14>
 8005154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005158:	f7ff bff0 	b.w	800513c <__sfp_lock_release>
 800515c:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <__sinit+0x28>)
 800515e:	6223      	str	r3, [r4, #32]
 8005160:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <__sinit+0x2c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f5      	bne.n	8005154 <__sinit+0xc>
 8005168:	f7ff ffc4 	bl	80050f4 <global_stdio_init.part.0>
 800516c:	e7f2      	b.n	8005154 <__sinit+0xc>
 800516e:	bf00      	nop
 8005170:	080050b5 	.word	0x080050b5
 8005174:	2000440c 	.word	0x2000440c

08005178 <_fwalk_sglue>:
 8005178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800517c:	4607      	mov	r7, r0
 800517e:	4688      	mov	r8, r1
 8005180:	4614      	mov	r4, r2
 8005182:	2600      	movs	r6, #0
 8005184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005188:	f1b9 0901 	subs.w	r9, r9, #1
 800518c:	d505      	bpl.n	800519a <_fwalk_sglue+0x22>
 800518e:	6824      	ldr	r4, [r4, #0]
 8005190:	2c00      	cmp	r4, #0
 8005192:	d1f7      	bne.n	8005184 <_fwalk_sglue+0xc>
 8005194:	4630      	mov	r0, r6
 8005196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d907      	bls.n	80051b0 <_fwalk_sglue+0x38>
 80051a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051a4:	3301      	adds	r3, #1
 80051a6:	d003      	beq.n	80051b0 <_fwalk_sglue+0x38>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	47c0      	blx	r8
 80051ae:	4306      	orrs	r6, r0
 80051b0:	3568      	adds	r5, #104	@ 0x68
 80051b2:	e7e9      	b.n	8005188 <_fwalk_sglue+0x10>

080051b4 <__sread>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	460c      	mov	r4, r1
 80051b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051bc:	f000 f86c 	bl	8005298 <_read_r>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	bfab      	itete	ge
 80051c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051c6:	89a3      	ldrhlt	r3, [r4, #12]
 80051c8:	181b      	addge	r3, r3, r0
 80051ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051ce:	bfac      	ite	ge
 80051d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051d2:	81a3      	strhlt	r3, [r4, #12]
 80051d4:	bd10      	pop	{r4, pc}

080051d6 <__swrite>:
 80051d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051da:	461f      	mov	r7, r3
 80051dc:	898b      	ldrh	r3, [r1, #12]
 80051de:	05db      	lsls	r3, r3, #23
 80051e0:	4605      	mov	r5, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	4616      	mov	r6, r2
 80051e6:	d505      	bpl.n	80051f4 <__swrite+0x1e>
 80051e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ec:	2302      	movs	r3, #2
 80051ee:	2200      	movs	r2, #0
 80051f0:	f000 f840 	bl	8005274 <_lseek_r>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	4632      	mov	r2, r6
 8005202:	463b      	mov	r3, r7
 8005204:	4628      	mov	r0, r5
 8005206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800520a:	f000 b857 	b.w	80052bc <_write_r>

0800520e <__sseek>:
 800520e:	b510      	push	{r4, lr}
 8005210:	460c      	mov	r4, r1
 8005212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005216:	f000 f82d 	bl	8005274 <_lseek_r>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	bf15      	itete	ne
 8005220:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800522a:	81a3      	strheq	r3, [r4, #12]
 800522c:	bf18      	it	ne
 800522e:	81a3      	strhne	r3, [r4, #12]
 8005230:	bd10      	pop	{r4, pc}

08005232 <__sclose>:
 8005232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005236:	f000 b80d 	b.w	8005254 <_close_r>

0800523a <memset>:
 800523a:	4402      	add	r2, r0
 800523c:	4603      	mov	r3, r0
 800523e:	4293      	cmp	r3, r2
 8005240:	d100      	bne.n	8005244 <memset+0xa>
 8005242:	4770      	bx	lr
 8005244:	f803 1b01 	strb.w	r1, [r3], #1
 8005248:	e7f9      	b.n	800523e <memset+0x4>
	...

0800524c <_localeconv_r>:
 800524c:	4800      	ldr	r0, [pc, #0]	@ (8005250 <_localeconv_r+0x4>)
 800524e:	4770      	bx	lr
 8005250:	2000015c 	.word	0x2000015c

08005254 <_close_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_close_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc f9c8 	bl	80015f4 <_close>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_close_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_close_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	20004410 	.word	0x20004410

08005274 <_lseek_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	@ (8005294 <_lseek_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fc f9dd 	bl	8001642 <_lseek>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_lseek_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_lseek_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	20004410 	.word	0x20004410

08005298 <_read_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d07      	ldr	r5, [pc, #28]	@ (80052b8 <_read_r+0x20>)
 800529c:	4604      	mov	r4, r0
 800529e:	4608      	mov	r0, r1
 80052a0:	4611      	mov	r1, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fc f96b 	bl	8001582 <_read>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_read_r+0x1e>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_read_r+0x1e>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	20004410 	.word	0x20004410

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d07      	ldr	r5, [pc, #28]	@ (80052dc <_write_r+0x20>)
 80052c0:	4604      	mov	r4, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fc f976 	bl	80015bc <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	20004410 	.word	0x20004410

080052e0 <__errno>:
 80052e0:	4b01      	ldr	r3, [pc, #4]	@ (80052e8 <__errno+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	2000001c 	.word	0x2000001c

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	@ (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005330 <__libc_init_array+0x44>)
 8005300:	f001 fec0 	bl	8007084 <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08007464 	.word	0x08007464
 8005328:	08007464 	.word	0x08007464
 800532c:	08007464 	.word	0x08007464
 8005330:	08007468 	.word	0x08007468

08005334 <__retarget_lock_init_recursive>:
 8005334:	4770      	bx	lr

08005336 <__retarget_lock_acquire_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_release_recursive>:
 8005338:	4770      	bx	lr

0800533a <memcpy>:
 800533a:	440a      	add	r2, r1
 800533c:	4291      	cmp	r1, r2
 800533e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005342:	d100      	bne.n	8005346 <memcpy+0xc>
 8005344:	4770      	bx	lr
 8005346:	b510      	push	{r4, lr}
 8005348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800534c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005350:	4291      	cmp	r1, r2
 8005352:	d1f9      	bne.n	8005348 <memcpy+0xe>
 8005354:	bd10      	pop	{r4, pc}

08005356 <quorem>:
 8005356:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	6903      	ldr	r3, [r0, #16]
 800535c:	690c      	ldr	r4, [r1, #16]
 800535e:	42a3      	cmp	r3, r4
 8005360:	4607      	mov	r7, r0
 8005362:	db7e      	blt.n	8005462 <quorem+0x10c>
 8005364:	3c01      	subs	r4, #1
 8005366:	f101 0814 	add.w	r8, r1, #20
 800536a:	00a3      	lsls	r3, r4, #2
 800536c:	f100 0514 	add.w	r5, r0, #20
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800537c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005380:	3301      	adds	r3, #1
 8005382:	429a      	cmp	r2, r3
 8005384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005388:	fbb2 f6f3 	udiv	r6, r2, r3
 800538c:	d32e      	bcc.n	80053ec <quorem+0x96>
 800538e:	f04f 0a00 	mov.w	sl, #0
 8005392:	46c4      	mov	ip, r8
 8005394:	46ae      	mov	lr, r5
 8005396:	46d3      	mov	fp, sl
 8005398:	f85c 3b04 	ldr.w	r3, [ip], #4
 800539c:	b298      	uxth	r0, r3
 800539e:	fb06 a000 	mla	r0, r6, r0, sl
 80053a2:	0c02      	lsrs	r2, r0, #16
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	fb06 2303 	mla	r3, r6, r3, r2
 80053aa:	f8de 2000 	ldr.w	r2, [lr]
 80053ae:	b280      	uxth	r0, r0
 80053b0:	b292      	uxth	r2, r2
 80053b2:	1a12      	subs	r2, r2, r0
 80053b4:	445a      	add	r2, fp
 80053b6:	f8de 0000 	ldr.w	r0, [lr]
 80053ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80053c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80053c8:	b292      	uxth	r2, r2
 80053ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80053ce:	45e1      	cmp	r9, ip
 80053d0:	f84e 2b04 	str.w	r2, [lr], #4
 80053d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80053d8:	d2de      	bcs.n	8005398 <quorem+0x42>
 80053da:	9b00      	ldr	r3, [sp, #0]
 80053dc:	58eb      	ldr	r3, [r5, r3]
 80053de:	b92b      	cbnz	r3, 80053ec <quorem+0x96>
 80053e0:	9b01      	ldr	r3, [sp, #4]
 80053e2:	3b04      	subs	r3, #4
 80053e4:	429d      	cmp	r5, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	d32f      	bcc.n	800544a <quorem+0xf4>
 80053ea:	613c      	str	r4, [r7, #16]
 80053ec:	4638      	mov	r0, r7
 80053ee:	f001 f97d 	bl	80066ec <__mcmp>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	db25      	blt.n	8005442 <quorem+0xec>
 80053f6:	4629      	mov	r1, r5
 80053f8:	2000      	movs	r0, #0
 80053fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80053fe:	f8d1 c000 	ldr.w	ip, [r1]
 8005402:	fa1f fe82 	uxth.w	lr, r2
 8005406:	fa1f f38c 	uxth.w	r3, ip
 800540a:	eba3 030e 	sub.w	r3, r3, lr
 800540e:	4403      	add	r3, r0
 8005410:	0c12      	lsrs	r2, r2, #16
 8005412:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005416:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005420:	45c1      	cmp	r9, r8
 8005422:	f841 3b04 	str.w	r3, [r1], #4
 8005426:	ea4f 4022 	mov.w	r0, r2, asr #16
 800542a:	d2e6      	bcs.n	80053fa <quorem+0xa4>
 800542c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005430:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005434:	b922      	cbnz	r2, 8005440 <quorem+0xea>
 8005436:	3b04      	subs	r3, #4
 8005438:	429d      	cmp	r5, r3
 800543a:	461a      	mov	r2, r3
 800543c:	d30b      	bcc.n	8005456 <quorem+0x100>
 800543e:	613c      	str	r4, [r7, #16]
 8005440:	3601      	adds	r6, #1
 8005442:	4630      	mov	r0, r6
 8005444:	b003      	add	sp, #12
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	3b04      	subs	r3, #4
 800544e:	2a00      	cmp	r2, #0
 8005450:	d1cb      	bne.n	80053ea <quorem+0x94>
 8005452:	3c01      	subs	r4, #1
 8005454:	e7c6      	b.n	80053e4 <quorem+0x8e>
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	3b04      	subs	r3, #4
 800545a:	2a00      	cmp	r2, #0
 800545c:	d1ef      	bne.n	800543e <quorem+0xe8>
 800545e:	3c01      	subs	r4, #1
 8005460:	e7ea      	b.n	8005438 <quorem+0xe2>
 8005462:	2000      	movs	r0, #0
 8005464:	e7ee      	b.n	8005444 <quorem+0xee>
	...

08005468 <_dtoa_r>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	69c7      	ldr	r7, [r0, #28]
 800546e:	b097      	sub	sp, #92	@ 0x5c
 8005470:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005474:	ec55 4b10 	vmov	r4, r5, d0
 8005478:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800547a:	9107      	str	r1, [sp, #28]
 800547c:	4681      	mov	r9, r0
 800547e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005480:	9311      	str	r3, [sp, #68]	@ 0x44
 8005482:	b97f      	cbnz	r7, 80054a4 <_dtoa_r+0x3c>
 8005484:	2010      	movs	r0, #16
 8005486:	f000 fe09 	bl	800609c <malloc>
 800548a:	4602      	mov	r2, r0
 800548c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005490:	b920      	cbnz	r0, 800549c <_dtoa_r+0x34>
 8005492:	4ba9      	ldr	r3, [pc, #676]	@ (8005738 <_dtoa_r+0x2d0>)
 8005494:	21ef      	movs	r1, #239	@ 0xef
 8005496:	48a9      	ldr	r0, [pc, #676]	@ (800573c <_dtoa_r+0x2d4>)
 8005498:	f001 faec 	bl	8006a74 <__assert_func>
 800549c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80054a0:	6007      	str	r7, [r0, #0]
 80054a2:	60c7      	str	r7, [r0, #12]
 80054a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	b159      	cbz	r1, 80054c4 <_dtoa_r+0x5c>
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	604a      	str	r2, [r1, #4]
 80054b0:	2301      	movs	r3, #1
 80054b2:	4093      	lsls	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
 80054b6:	4648      	mov	r0, r9
 80054b8:	f000 fee6 	bl	8006288 <_Bfree>
 80054bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	1e2b      	subs	r3, r5, #0
 80054c6:	bfb9      	ittee	lt
 80054c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80054cc:	9305      	strlt	r3, [sp, #20]
 80054ce:	2300      	movge	r3, #0
 80054d0:	6033      	strge	r3, [r6, #0]
 80054d2:	9f05      	ldr	r7, [sp, #20]
 80054d4:	4b9a      	ldr	r3, [pc, #616]	@ (8005740 <_dtoa_r+0x2d8>)
 80054d6:	bfbc      	itt	lt
 80054d8:	2201      	movlt	r2, #1
 80054da:	6032      	strlt	r2, [r6, #0]
 80054dc:	43bb      	bics	r3, r7
 80054de:	d112      	bne.n	8005506 <_dtoa_r+0x9e>
 80054e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054ec:	4323      	orrs	r3, r4
 80054ee:	f000 855a 	beq.w	8005fa6 <_dtoa_r+0xb3e>
 80054f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005754 <_dtoa_r+0x2ec>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 855c 	beq.w	8005fb6 <_dtoa_r+0xb4e>
 80054fe:	f10a 0303 	add.w	r3, sl, #3
 8005502:	f000 bd56 	b.w	8005fb2 <_dtoa_r+0xb4a>
 8005506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800550a:	2200      	movs	r2, #0
 800550c:	ec51 0b17 	vmov	r0, r1, d7
 8005510:	2300      	movs	r3, #0
 8005512:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005516:	f7fb fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800551a:	4680      	mov	r8, r0
 800551c:	b158      	cbz	r0, 8005536 <_dtoa_r+0xce>
 800551e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005520:	2301      	movs	r3, #1
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005526:	b113      	cbz	r3, 800552e <_dtoa_r+0xc6>
 8005528:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800552a:	4b86      	ldr	r3, [pc, #536]	@ (8005744 <_dtoa_r+0x2dc>)
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005758 <_dtoa_r+0x2f0>
 8005532:	f000 bd40 	b.w	8005fb6 <_dtoa_r+0xb4e>
 8005536:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800553a:	aa14      	add	r2, sp, #80	@ 0x50
 800553c:	a915      	add	r1, sp, #84	@ 0x54
 800553e:	4648      	mov	r0, r9
 8005540:	f001 f984 	bl	800684c <__d2b>
 8005544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	2e00      	cmp	r6, #0
 800554c:	d078      	beq.n	8005640 <_dtoa_r+0x1d8>
 800554e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005550:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800555c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005568:	4619      	mov	r1, r3
 800556a:	2200      	movs	r2, #0
 800556c:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <_dtoa_r+0x2e0>)
 800556e:	f7fa fe93 	bl	8000298 <__aeabi_dsub>
 8005572:	a36b      	add	r3, pc, #428	@ (adr r3, 8005720 <_dtoa_r+0x2b8>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f7fb f846 	bl	8000608 <__aeabi_dmul>
 800557c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005728 <_dtoa_r+0x2c0>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe8b 	bl	800029c <__adddf3>
 8005586:	4604      	mov	r4, r0
 8005588:	4630      	mov	r0, r6
 800558a:	460d      	mov	r5, r1
 800558c:	f7fa ffd2 	bl	8000534 <__aeabi_i2d>
 8005590:	a367      	add	r3, pc, #412	@ (adr r3, 8005730 <_dtoa_r+0x2c8>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fb f837 	bl	8000608 <__aeabi_dmul>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fa fe7b 	bl	800029c <__adddf3>
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	f7fb fadd 	bl	8000b68 <__aeabi_d2iz>
 80055ae:	2200      	movs	r2, #0
 80055b0:	4607      	mov	r7, r0
 80055b2:	2300      	movs	r3, #0
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb fa98 	bl	8000aec <__aeabi_dcmplt>
 80055bc:	b140      	cbz	r0, 80055d0 <_dtoa_r+0x168>
 80055be:	4638      	mov	r0, r7
 80055c0:	f7fa ffb8 	bl	8000534 <__aeabi_i2d>
 80055c4:	4622      	mov	r2, r4
 80055c6:	462b      	mov	r3, r5
 80055c8:	f7fb fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 80055cc:	b900      	cbnz	r0, 80055d0 <_dtoa_r+0x168>
 80055ce:	3f01      	subs	r7, #1
 80055d0:	2f16      	cmp	r7, #22
 80055d2:	d852      	bhi.n	800567a <_dtoa_r+0x212>
 80055d4:	4b5d      	ldr	r3, [pc, #372]	@ (800574c <_dtoa_r+0x2e4>)
 80055d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055e2:	f7fb fa83 	bl	8000aec <__aeabi_dcmplt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d049      	beq.n	800567e <_dtoa_r+0x216>
 80055ea:	3f01      	subs	r7, #1
 80055ec:	2300      	movs	r3, #0
 80055ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80055f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055f2:	1b9b      	subs	r3, r3, r6
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	bf45      	ittet	mi
 80055f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80055fc:	9300      	strmi	r3, [sp, #0]
 80055fe:	2300      	movpl	r3, #0
 8005600:	2300      	movmi	r3, #0
 8005602:	9206      	str	r2, [sp, #24]
 8005604:	bf54      	ite	pl
 8005606:	9300      	strpl	r3, [sp, #0]
 8005608:	9306      	strmi	r3, [sp, #24]
 800560a:	2f00      	cmp	r7, #0
 800560c:	db39      	blt.n	8005682 <_dtoa_r+0x21a>
 800560e:	9b06      	ldr	r3, [sp, #24]
 8005610:	970d      	str	r7, [sp, #52]	@ 0x34
 8005612:	443b      	add	r3, r7
 8005614:	9306      	str	r3, [sp, #24]
 8005616:	2300      	movs	r3, #0
 8005618:	9308      	str	r3, [sp, #32]
 800561a:	9b07      	ldr	r3, [sp, #28]
 800561c:	2b09      	cmp	r3, #9
 800561e:	d863      	bhi.n	80056e8 <_dtoa_r+0x280>
 8005620:	2b05      	cmp	r3, #5
 8005622:	bfc4      	itt	gt
 8005624:	3b04      	subgt	r3, #4
 8005626:	9307      	strgt	r3, [sp, #28]
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	f1a3 0302 	sub.w	r3, r3, #2
 800562e:	bfcc      	ite	gt
 8005630:	2400      	movgt	r4, #0
 8005632:	2401      	movle	r4, #1
 8005634:	2b03      	cmp	r3, #3
 8005636:	d863      	bhi.n	8005700 <_dtoa_r+0x298>
 8005638:	e8df f003 	tbb	[pc, r3]
 800563c:	2b375452 	.word	0x2b375452
 8005640:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005644:	441e      	add	r6, r3
 8005646:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800564a:	2b20      	cmp	r3, #32
 800564c:	bfc1      	itttt	gt
 800564e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005652:	409f      	lslgt	r7, r3
 8005654:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005658:	fa24 f303 	lsrgt.w	r3, r4, r3
 800565c:	bfd6      	itet	le
 800565e:	f1c3 0320 	rsble	r3, r3, #32
 8005662:	ea47 0003 	orrgt.w	r0, r7, r3
 8005666:	fa04 f003 	lslle.w	r0, r4, r3
 800566a:	f7fa ff53 	bl	8000514 <__aeabi_ui2d>
 800566e:	2201      	movs	r2, #1
 8005670:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005674:	3e01      	subs	r6, #1
 8005676:	9212      	str	r2, [sp, #72]	@ 0x48
 8005678:	e776      	b.n	8005568 <_dtoa_r+0x100>
 800567a:	2301      	movs	r3, #1
 800567c:	e7b7      	b.n	80055ee <_dtoa_r+0x186>
 800567e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005680:	e7b6      	b.n	80055f0 <_dtoa_r+0x188>
 8005682:	9b00      	ldr	r3, [sp, #0]
 8005684:	1bdb      	subs	r3, r3, r7
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	427b      	negs	r3, r7
 800568a:	9308      	str	r3, [sp, #32]
 800568c:	2300      	movs	r3, #0
 800568e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005690:	e7c3      	b.n	800561a <_dtoa_r+0x1b2>
 8005692:	2301      	movs	r3, #1
 8005694:	9309      	str	r3, [sp, #36]	@ 0x24
 8005696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005698:	eb07 0b03 	add.w	fp, r7, r3
 800569c:	f10b 0301 	add.w	r3, fp, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	bfb8      	it	lt
 80056a6:	2301      	movlt	r3, #1
 80056a8:	e006      	b.n	80056b8 <_dtoa_r+0x250>
 80056aa:	2301      	movs	r3, #1
 80056ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dd28      	ble.n	8005706 <_dtoa_r+0x29e>
 80056b4:	469b      	mov	fp, r3
 80056b6:	9303      	str	r3, [sp, #12]
 80056b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80056bc:	2100      	movs	r1, #0
 80056be:	2204      	movs	r2, #4
 80056c0:	f102 0514 	add.w	r5, r2, #20
 80056c4:	429d      	cmp	r5, r3
 80056c6:	d926      	bls.n	8005716 <_dtoa_r+0x2ae>
 80056c8:	6041      	str	r1, [r0, #4]
 80056ca:	4648      	mov	r0, r9
 80056cc:	f000 fd9c 	bl	8006208 <_Balloc>
 80056d0:	4682      	mov	sl, r0
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d142      	bne.n	800575c <_dtoa_r+0x2f4>
 80056d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <_dtoa_r+0x2e8>)
 80056d8:	4602      	mov	r2, r0
 80056da:	f240 11af 	movw	r1, #431	@ 0x1af
 80056de:	e6da      	b.n	8005496 <_dtoa_r+0x2e>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e7e3      	b.n	80056ac <_dtoa_r+0x244>
 80056e4:	2300      	movs	r3, #0
 80056e6:	e7d5      	b.n	8005694 <_dtoa_r+0x22c>
 80056e8:	2401      	movs	r4, #1
 80056ea:	2300      	movs	r3, #0
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80056f0:	f04f 3bff 	mov.w	fp, #4294967295
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80056fa:	2312      	movs	r3, #18
 80056fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80056fe:	e7db      	b.n	80056b8 <_dtoa_r+0x250>
 8005700:	2301      	movs	r3, #1
 8005702:	9309      	str	r3, [sp, #36]	@ 0x24
 8005704:	e7f4      	b.n	80056f0 <_dtoa_r+0x288>
 8005706:	f04f 0b01 	mov.w	fp, #1
 800570a:	f8cd b00c 	str.w	fp, [sp, #12]
 800570e:	465b      	mov	r3, fp
 8005710:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005714:	e7d0      	b.n	80056b8 <_dtoa_r+0x250>
 8005716:	3101      	adds	r1, #1
 8005718:	0052      	lsls	r2, r2, #1
 800571a:	e7d1      	b.n	80056c0 <_dtoa_r+0x258>
 800571c:	f3af 8000 	nop.w
 8005720:	636f4361 	.word	0x636f4361
 8005724:	3fd287a7 	.word	0x3fd287a7
 8005728:	8b60c8b3 	.word	0x8b60c8b3
 800572c:	3fc68a28 	.word	0x3fc68a28
 8005730:	509f79fb 	.word	0x509f79fb
 8005734:	3fd34413 	.word	0x3fd34413
 8005738:	08007129 	.word	0x08007129
 800573c:	08007140 	.word	0x08007140
 8005740:	7ff00000 	.word	0x7ff00000
 8005744:	080070f9 	.word	0x080070f9
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	08007290 	.word	0x08007290
 8005750:	08007198 	.word	0x08007198
 8005754:	08007125 	.word	0x08007125
 8005758:	080070f8 	.word	0x080070f8
 800575c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005760:	6018      	str	r0, [r3, #0]
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	2b0e      	cmp	r3, #14
 8005766:	f200 80a1 	bhi.w	80058ac <_dtoa_r+0x444>
 800576a:	2c00      	cmp	r4, #0
 800576c:	f000 809e 	beq.w	80058ac <_dtoa_r+0x444>
 8005770:	2f00      	cmp	r7, #0
 8005772:	dd33      	ble.n	80057dc <_dtoa_r+0x374>
 8005774:	4b9c      	ldr	r3, [pc, #624]	@ (80059e8 <_dtoa_r+0x580>)
 8005776:	f007 020f 	and.w	r2, r7, #15
 800577a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800577e:	ed93 7b00 	vldr	d7, [r3]
 8005782:	05f8      	lsls	r0, r7, #23
 8005784:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800578c:	d516      	bpl.n	80057bc <_dtoa_r+0x354>
 800578e:	4b97      	ldr	r3, [pc, #604]	@ (80059ec <_dtoa_r+0x584>)
 8005790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005798:	f7fb f860 	bl	800085c <__aeabi_ddiv>
 800579c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057a0:	f004 040f 	and.w	r4, r4, #15
 80057a4:	2603      	movs	r6, #3
 80057a6:	4d91      	ldr	r5, [pc, #580]	@ (80059ec <_dtoa_r+0x584>)
 80057a8:	b954      	cbnz	r4, 80057c0 <_dtoa_r+0x358>
 80057aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80057ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b2:	f7fb f853 	bl	800085c <__aeabi_ddiv>
 80057b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ba:	e028      	b.n	800580e <_dtoa_r+0x3a6>
 80057bc:	2602      	movs	r6, #2
 80057be:	e7f2      	b.n	80057a6 <_dtoa_r+0x33e>
 80057c0:	07e1      	lsls	r1, r4, #31
 80057c2:	d508      	bpl.n	80057d6 <_dtoa_r+0x36e>
 80057c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80057c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80057d4:	3601      	adds	r6, #1
 80057d6:	1064      	asrs	r4, r4, #1
 80057d8:	3508      	adds	r5, #8
 80057da:	e7e5      	b.n	80057a8 <_dtoa_r+0x340>
 80057dc:	f000 80af 	beq.w	800593e <_dtoa_r+0x4d6>
 80057e0:	427c      	negs	r4, r7
 80057e2:	4b81      	ldr	r3, [pc, #516]	@ (80059e8 <_dtoa_r+0x580>)
 80057e4:	4d81      	ldr	r5, [pc, #516]	@ (80059ec <_dtoa_r+0x584>)
 80057e6:	f004 020f 	and.w	r2, r4, #15
 80057ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057f6:	f7fa ff07 	bl	8000608 <__aeabi_dmul>
 80057fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057fe:	1124      	asrs	r4, r4, #4
 8005800:	2300      	movs	r3, #0
 8005802:	2602      	movs	r6, #2
 8005804:	2c00      	cmp	r4, #0
 8005806:	f040 808f 	bne.w	8005928 <_dtoa_r+0x4c0>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1d3      	bne.n	80057b6 <_dtoa_r+0x34e>
 800580e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005810:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8094 	beq.w	8005942 <_dtoa_r+0x4da>
 800581a:	4b75      	ldr	r3, [pc, #468]	@ (80059f0 <_dtoa_r+0x588>)
 800581c:	2200      	movs	r2, #0
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	f7fb f963 	bl	8000aec <__aeabi_dcmplt>
 8005826:	2800      	cmp	r0, #0
 8005828:	f000 808b 	beq.w	8005942 <_dtoa_r+0x4da>
 800582c:	9b03      	ldr	r3, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8087 	beq.w	8005942 <_dtoa_r+0x4da>
 8005834:	f1bb 0f00 	cmp.w	fp, #0
 8005838:	dd34      	ble.n	80058a4 <_dtoa_r+0x43c>
 800583a:	4620      	mov	r0, r4
 800583c:	4b6d      	ldr	r3, [pc, #436]	@ (80059f4 <_dtoa_r+0x58c>)
 800583e:	2200      	movs	r2, #0
 8005840:	4629      	mov	r1, r5
 8005842:	f7fa fee1 	bl	8000608 <__aeabi_dmul>
 8005846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800584a:	f107 38ff 	add.w	r8, r7, #4294967295
 800584e:	3601      	adds	r6, #1
 8005850:	465c      	mov	r4, fp
 8005852:	4630      	mov	r0, r6
 8005854:	f7fa fe6e 	bl	8000534 <__aeabi_i2d>
 8005858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585c:	f7fa fed4 	bl	8000608 <__aeabi_dmul>
 8005860:	4b65      	ldr	r3, [pc, #404]	@ (80059f8 <_dtoa_r+0x590>)
 8005862:	2200      	movs	r2, #0
 8005864:	f7fa fd1a 	bl	800029c <__adddf3>
 8005868:	4605      	mov	r5, r0
 800586a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800586e:	2c00      	cmp	r4, #0
 8005870:	d16a      	bne.n	8005948 <_dtoa_r+0x4e0>
 8005872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005876:	4b61      	ldr	r3, [pc, #388]	@ (80059fc <_dtoa_r+0x594>)
 8005878:	2200      	movs	r2, #0
 800587a:	f7fa fd0d 	bl	8000298 <__aeabi_dsub>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005886:	462a      	mov	r2, r5
 8005888:	4633      	mov	r3, r6
 800588a:	f7fb f94d 	bl	8000b28 <__aeabi_dcmpgt>
 800588e:	2800      	cmp	r0, #0
 8005890:	f040 8298 	bne.w	8005dc4 <_dtoa_r+0x95c>
 8005894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005898:	462a      	mov	r2, r5
 800589a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800589e:	f7fb f925 	bl	8000aec <__aeabi_dcmplt>
 80058a2:	bb38      	cbnz	r0, 80058f4 <_dtoa_r+0x48c>
 80058a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80058a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f2c0 8157 	blt.w	8005b62 <_dtoa_r+0x6fa>
 80058b4:	2f0e      	cmp	r7, #14
 80058b6:	f300 8154 	bgt.w	8005b62 <_dtoa_r+0x6fa>
 80058ba:	4b4b      	ldr	r3, [pc, #300]	@ (80059e8 <_dtoa_r+0x580>)
 80058bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058c0:	ed93 7b00 	vldr	d7, [r3]
 80058c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	ed8d 7b00 	vstr	d7, [sp]
 80058cc:	f280 80e5 	bge.w	8005a9a <_dtoa_r+0x632>
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f300 80e1 	bgt.w	8005a9a <_dtoa_r+0x632>
 80058d8:	d10c      	bne.n	80058f4 <_dtoa_r+0x48c>
 80058da:	4b48      	ldr	r3, [pc, #288]	@ (80059fc <_dtoa_r+0x594>)
 80058dc:	2200      	movs	r2, #0
 80058de:	ec51 0b17 	vmov	r0, r1, d7
 80058e2:	f7fa fe91 	bl	8000608 <__aeabi_dmul>
 80058e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ea:	f7fb f913 	bl	8000b14 <__aeabi_dcmpge>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	f000 8266 	beq.w	8005dc0 <_dtoa_r+0x958>
 80058f4:	2400      	movs	r4, #0
 80058f6:	4625      	mov	r5, r4
 80058f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058fa:	4656      	mov	r6, sl
 80058fc:	ea6f 0803 	mvn.w	r8, r3
 8005900:	2700      	movs	r7, #0
 8005902:	4621      	mov	r1, r4
 8005904:	4648      	mov	r0, r9
 8005906:	f000 fcbf 	bl	8006288 <_Bfree>
 800590a:	2d00      	cmp	r5, #0
 800590c:	f000 80bd 	beq.w	8005a8a <_dtoa_r+0x622>
 8005910:	b12f      	cbz	r7, 800591e <_dtoa_r+0x4b6>
 8005912:	42af      	cmp	r7, r5
 8005914:	d003      	beq.n	800591e <_dtoa_r+0x4b6>
 8005916:	4639      	mov	r1, r7
 8005918:	4648      	mov	r0, r9
 800591a:	f000 fcb5 	bl	8006288 <_Bfree>
 800591e:	4629      	mov	r1, r5
 8005920:	4648      	mov	r0, r9
 8005922:	f000 fcb1 	bl	8006288 <_Bfree>
 8005926:	e0b0      	b.n	8005a8a <_dtoa_r+0x622>
 8005928:	07e2      	lsls	r2, r4, #31
 800592a:	d505      	bpl.n	8005938 <_dtoa_r+0x4d0>
 800592c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005930:	f7fa fe6a 	bl	8000608 <__aeabi_dmul>
 8005934:	3601      	adds	r6, #1
 8005936:	2301      	movs	r3, #1
 8005938:	1064      	asrs	r4, r4, #1
 800593a:	3508      	adds	r5, #8
 800593c:	e762      	b.n	8005804 <_dtoa_r+0x39c>
 800593e:	2602      	movs	r6, #2
 8005940:	e765      	b.n	800580e <_dtoa_r+0x3a6>
 8005942:	9c03      	ldr	r4, [sp, #12]
 8005944:	46b8      	mov	r8, r7
 8005946:	e784      	b.n	8005852 <_dtoa_r+0x3ea>
 8005948:	4b27      	ldr	r3, [pc, #156]	@ (80059e8 <_dtoa_r+0x580>)
 800594a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800594c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005954:	4454      	add	r4, sl
 8005956:	2900      	cmp	r1, #0
 8005958:	d054      	beq.n	8005a04 <_dtoa_r+0x59c>
 800595a:	4929      	ldr	r1, [pc, #164]	@ (8005a00 <_dtoa_r+0x598>)
 800595c:	2000      	movs	r0, #0
 800595e:	f7fa ff7d 	bl	800085c <__aeabi_ddiv>
 8005962:	4633      	mov	r3, r6
 8005964:	462a      	mov	r2, r5
 8005966:	f7fa fc97 	bl	8000298 <__aeabi_dsub>
 800596a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800596e:	4656      	mov	r6, sl
 8005970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005974:	f7fb f8f8 	bl	8000b68 <__aeabi_d2iz>
 8005978:	4605      	mov	r5, r0
 800597a:	f7fa fddb 	bl	8000534 <__aeabi_i2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005986:	f7fa fc87 	bl	8000298 <__aeabi_dsub>
 800598a:	3530      	adds	r5, #48	@ 0x30
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005994:	f806 5b01 	strb.w	r5, [r6], #1
 8005998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800599c:	f7fb f8a6 	bl	8000aec <__aeabi_dcmplt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d172      	bne.n	8005a8a <_dtoa_r+0x622>
 80059a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059a8:	4911      	ldr	r1, [pc, #68]	@ (80059f0 <_dtoa_r+0x588>)
 80059aa:	2000      	movs	r0, #0
 80059ac:	f7fa fc74 	bl	8000298 <__aeabi_dsub>
 80059b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80059b4:	f7fb f89a 	bl	8000aec <__aeabi_dcmplt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f040 80b4 	bne.w	8005b26 <_dtoa_r+0x6be>
 80059be:	42a6      	cmp	r6, r4
 80059c0:	f43f af70 	beq.w	80058a4 <_dtoa_r+0x43c>
 80059c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80059c8:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <_dtoa_r+0x58c>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	f7fa fe1c 	bl	8000608 <__aeabi_dmul>
 80059d0:	4b08      	ldr	r3, [pc, #32]	@ (80059f4 <_dtoa_r+0x58c>)
 80059d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059d6:	2200      	movs	r2, #0
 80059d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059dc:	f7fa fe14 	bl	8000608 <__aeabi_dmul>
 80059e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e4:	e7c4      	b.n	8005970 <_dtoa_r+0x508>
 80059e6:	bf00      	nop
 80059e8:	08007290 	.word	0x08007290
 80059ec:	08007268 	.word	0x08007268
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	40240000 	.word	0x40240000
 80059f8:	401c0000 	.word	0x401c0000
 80059fc:	40140000 	.word	0x40140000
 8005a00:	3fe00000 	.word	0x3fe00000
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	f7fa fdfe 	bl	8000608 <__aeabi_dmul>
 8005a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a12:	4656      	mov	r6, sl
 8005a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a18:	f7fb f8a6 	bl	8000b68 <__aeabi_d2iz>
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	f7fa fd89 	bl	8000534 <__aeabi_i2d>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2a:	f7fa fc35 	bl	8000298 <__aeabi_dsub>
 8005a2e:	3530      	adds	r5, #48	@ 0x30
 8005a30:	f806 5b01 	strb.w	r5, [r6], #1
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	42a6      	cmp	r6, r4
 8005a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	d124      	bne.n	8005a8e <_dtoa_r+0x626>
 8005a44:	4baf      	ldr	r3, [pc, #700]	@ (8005d04 <_dtoa_r+0x89c>)
 8005a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a4a:	f7fa fc27 	bl	800029c <__adddf3>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a56:	f7fb f867 	bl	8000b28 <__aeabi_dcmpgt>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d163      	bne.n	8005b26 <_dtoa_r+0x6be>
 8005a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a62:	49a8      	ldr	r1, [pc, #672]	@ (8005d04 <_dtoa_r+0x89c>)
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fa fc17 	bl	8000298 <__aeabi_dsub>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a72:	f7fb f83b 	bl	8000aec <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f43f af14 	beq.w	80058a4 <_dtoa_r+0x43c>
 8005a7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a7e:	1e73      	subs	r3, r6, #1
 8005a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a86:	2b30      	cmp	r3, #48	@ 0x30
 8005a88:	d0f8      	beq.n	8005a7c <_dtoa_r+0x614>
 8005a8a:	4647      	mov	r7, r8
 8005a8c:	e03b      	b.n	8005b06 <_dtoa_r+0x69e>
 8005a8e:	4b9e      	ldr	r3, [pc, #632]	@ (8005d08 <_dtoa_r+0x8a0>)
 8005a90:	f7fa fdba 	bl	8000608 <__aeabi_dmul>
 8005a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a98:	e7bc      	b.n	8005a14 <_dtoa_r+0x5ac>
 8005a9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a9e:	4656      	mov	r6, sl
 8005aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	f7fa fed8 	bl	800085c <__aeabi_ddiv>
 8005aac:	f7fb f85c 	bl	8000b68 <__aeabi_d2iz>
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	f7fa fd3f 	bl	8000534 <__aeabi_i2d>
 8005ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aba:	f7fa fda5 	bl	8000608 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005aca:	f7fa fbe5 	bl	8000298 <__aeabi_dsub>
 8005ace:	f806 4b01 	strb.w	r4, [r6], #1
 8005ad2:	9d03      	ldr	r5, [sp, #12]
 8005ad4:	eba6 040a 	sub.w	r4, r6, sl
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	d133      	bne.n	8005b48 <_dtoa_r+0x6e0>
 8005ae0:	f7fa fbdc 	bl	800029c <__adddf3>
 8005ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ae8:	4604      	mov	r4, r0
 8005aea:	460d      	mov	r5, r1
 8005aec:	f7fb f81c 	bl	8000b28 <__aeabi_dcmpgt>
 8005af0:	b9c0      	cbnz	r0, 8005b24 <_dtoa_r+0x6bc>
 8005af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8005afe:	b110      	cbz	r0, 8005b06 <_dtoa_r+0x69e>
 8005b00:	f018 0f01 	tst.w	r8, #1
 8005b04:	d10e      	bne.n	8005b24 <_dtoa_r+0x6bc>
 8005b06:	9902      	ldr	r1, [sp, #8]
 8005b08:	4648      	mov	r0, r9
 8005b0a:	f000 fbbd 	bl	8006288 <_Bfree>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	7033      	strb	r3, [r6, #0]
 8005b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b14:	3701      	adds	r7, #1
 8005b16:	601f      	str	r7, [r3, #0]
 8005b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 824b 	beq.w	8005fb6 <_dtoa_r+0xb4e>
 8005b20:	601e      	str	r6, [r3, #0]
 8005b22:	e248      	b.n	8005fb6 <_dtoa_r+0xb4e>
 8005b24:	46b8      	mov	r8, r7
 8005b26:	4633      	mov	r3, r6
 8005b28:	461e      	mov	r6, r3
 8005b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2e:	2a39      	cmp	r2, #57	@ 0x39
 8005b30:	d106      	bne.n	8005b40 <_dtoa_r+0x6d8>
 8005b32:	459a      	cmp	sl, r3
 8005b34:	d1f8      	bne.n	8005b28 <_dtoa_r+0x6c0>
 8005b36:	2230      	movs	r2, #48	@ 0x30
 8005b38:	f108 0801 	add.w	r8, r8, #1
 8005b3c:	f88a 2000 	strb.w	r2, [sl]
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	3201      	adds	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e7a0      	b.n	8005a8a <_dtoa_r+0x622>
 8005b48:	4b6f      	ldr	r3, [pc, #444]	@ (8005d08 <_dtoa_r+0x8a0>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fd5c 	bl	8000608 <__aeabi_dmul>
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	4604      	mov	r4, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	f7fa ffbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d09f      	beq.n	8005aa0 <_dtoa_r+0x638>
 8005b60:	e7d1      	b.n	8005b06 <_dtoa_r+0x69e>
 8005b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	f000 80ea 	beq.w	8005d3e <_dtoa_r+0x8d6>
 8005b6a:	9a07      	ldr	r2, [sp, #28]
 8005b6c:	2a01      	cmp	r2, #1
 8005b6e:	f300 80cd 	bgt.w	8005d0c <_dtoa_r+0x8a4>
 8005b72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	f000 80c1 	beq.w	8005cfc <_dtoa_r+0x894>
 8005b7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b7e:	9c08      	ldr	r4, [sp, #32]
 8005b80:	9e00      	ldr	r6, [sp, #0]
 8005b82:	9a00      	ldr	r2, [sp, #0]
 8005b84:	441a      	add	r2, r3
 8005b86:	9200      	str	r2, [sp, #0]
 8005b88:	9a06      	ldr	r2, [sp, #24]
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	441a      	add	r2, r3
 8005b8e:	4648      	mov	r0, r9
 8005b90:	9206      	str	r2, [sp, #24]
 8005b92:	f000 fc2d 	bl	80063f0 <__i2b>
 8005b96:	4605      	mov	r5, r0
 8005b98:	b166      	cbz	r6, 8005bb4 <_dtoa_r+0x74c>
 8005b9a:	9b06      	ldr	r3, [sp, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd09      	ble.n	8005bb4 <_dtoa_r+0x74c>
 8005ba0:	42b3      	cmp	r3, r6
 8005ba2:	9a00      	ldr	r2, [sp, #0]
 8005ba4:	bfa8      	it	ge
 8005ba6:	4633      	movge	r3, r6
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	9200      	str	r2, [sp, #0]
 8005bac:	9a06      	ldr	r2, [sp, #24]
 8005bae:	1af6      	subs	r6, r6, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	9306      	str	r3, [sp, #24]
 8005bb4:	9b08      	ldr	r3, [sp, #32]
 8005bb6:	b30b      	cbz	r3, 8005bfc <_dtoa_r+0x794>
 8005bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80c6 	beq.w	8005d4c <_dtoa_r+0x8e4>
 8005bc0:	2c00      	cmp	r4, #0
 8005bc2:	f000 80c0 	beq.w	8005d46 <_dtoa_r+0x8de>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4622      	mov	r2, r4
 8005bca:	4648      	mov	r0, r9
 8005bcc:	f000 fcc8 	bl	8006560 <__pow5mult>
 8005bd0:	9a02      	ldr	r2, [sp, #8]
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	4648      	mov	r0, r9
 8005bd8:	f000 fc20 	bl	800641c <__multiply>
 8005bdc:	9902      	ldr	r1, [sp, #8]
 8005bde:	4680      	mov	r8, r0
 8005be0:	4648      	mov	r0, r9
 8005be2:	f000 fb51 	bl	8006288 <_Bfree>
 8005be6:	9b08      	ldr	r3, [sp, #32]
 8005be8:	1b1b      	subs	r3, r3, r4
 8005bea:	9308      	str	r3, [sp, #32]
 8005bec:	f000 80b1 	beq.w	8005d52 <_dtoa_r+0x8ea>
 8005bf0:	9a08      	ldr	r2, [sp, #32]
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	4648      	mov	r0, r9
 8005bf6:	f000 fcb3 	bl	8006560 <__pow5mult>
 8005bfa:	9002      	str	r0, [sp, #8]
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4648      	mov	r0, r9
 8005c00:	f000 fbf6 	bl	80063f0 <__i2b>
 8005c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c06:	4604      	mov	r4, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 81d8 	beq.w	8005fbe <_dtoa_r+0xb56>
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4601      	mov	r1, r0
 8005c12:	4648      	mov	r0, r9
 8005c14:	f000 fca4 	bl	8006560 <__pow5mult>
 8005c18:	9b07      	ldr	r3, [sp, #28]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	f300 809f 	bgt.w	8005d60 <_dtoa_r+0x8f8>
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 8097 	bne.w	8005d58 <_dtoa_r+0x8f0>
 8005c2a:	9b05      	ldr	r3, [sp, #20]
 8005c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 8093 	bne.w	8005d5c <_dtoa_r+0x8f4>
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c3c:	0d1b      	lsrs	r3, r3, #20
 8005c3e:	051b      	lsls	r3, r3, #20
 8005c40:	b133      	cbz	r3, 8005c50 <_dtoa_r+0x7e8>
 8005c42:	9b00      	ldr	r3, [sp, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	9b06      	ldr	r3, [sp, #24]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	9306      	str	r3, [sp, #24]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	9308      	str	r3, [sp, #32]
 8005c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 81b8 	beq.w	8005fca <_dtoa_r+0xb62>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c60:	6918      	ldr	r0, [r3, #16]
 8005c62:	f000 fb79 	bl	8006358 <__hi0bits>
 8005c66:	f1c0 0020 	rsb	r0, r0, #32
 8005c6a:	9b06      	ldr	r3, [sp, #24]
 8005c6c:	4418      	add	r0, r3
 8005c6e:	f010 001f 	ands.w	r0, r0, #31
 8005c72:	f000 8082 	beq.w	8005d7a <_dtoa_r+0x912>
 8005c76:	f1c0 0320 	rsb	r3, r0, #32
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	dd73      	ble.n	8005d66 <_dtoa_r+0x8fe>
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	f1c0 001c 	rsb	r0, r0, #28
 8005c84:	4403      	add	r3, r0
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	9b06      	ldr	r3, [sp, #24]
 8005c8a:	4403      	add	r3, r0
 8005c8c:	4406      	add	r6, r0
 8005c8e:	9306      	str	r3, [sp, #24]
 8005c90:	9b00      	ldr	r3, [sp, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd05      	ble.n	8005ca2 <_dtoa_r+0x83a>
 8005c96:	9902      	ldr	r1, [sp, #8]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4648      	mov	r0, r9
 8005c9c:	f000 fcba 	bl	8006614 <__lshift>
 8005ca0:	9002      	str	r0, [sp, #8]
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dd05      	ble.n	8005cb4 <_dtoa_r+0x84c>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	461a      	mov	r2, r3
 8005cac:	4648      	mov	r0, r9
 8005cae:	f000 fcb1 	bl	8006614 <__lshift>
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d061      	beq.n	8005d7e <_dtoa_r+0x916>
 8005cba:	9802      	ldr	r0, [sp, #8]
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	f000 fd15 	bl	80066ec <__mcmp>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	da5b      	bge.n	8005d7e <_dtoa_r+0x916>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9902      	ldr	r1, [sp, #8]
 8005cca:	220a      	movs	r2, #10
 8005ccc:	4648      	mov	r0, r9
 8005cce:	f000 fafd 	bl	80062cc <__multadd>
 8005cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8177 	beq.w	8005fce <_dtoa_r+0xb66>
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	220a      	movs	r2, #10
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 faf0 	bl	80062cc <__multadd>
 8005cec:	f1bb 0f00 	cmp.w	fp, #0
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	dc6f      	bgt.n	8005dd4 <_dtoa_r+0x96c>
 8005cf4:	9b07      	ldr	r3, [sp, #28]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	dc49      	bgt.n	8005d8e <_dtoa_r+0x926>
 8005cfa:	e06b      	b.n	8005dd4 <_dtoa_r+0x96c>
 8005cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d02:	e73c      	b.n	8005b7e <_dtoa_r+0x716>
 8005d04:	3fe00000 	.word	0x3fe00000
 8005d08:	40240000 	.word	0x40240000
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	1e5c      	subs	r4, r3, #1
 8005d10:	9b08      	ldr	r3, [sp, #32]
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	db09      	blt.n	8005d2a <_dtoa_r+0x8c2>
 8005d16:	1b1c      	subs	r4, r3, r4
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f6bf af30 	bge.w	8005b80 <_dtoa_r+0x718>
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	9a03      	ldr	r2, [sp, #12]
 8005d24:	1a9e      	subs	r6, r3, r2
 8005d26:	2300      	movs	r3, #0
 8005d28:	e72b      	b.n	8005b82 <_dtoa_r+0x71a>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d2e:	9408      	str	r4, [sp, #32]
 8005d30:	1ae3      	subs	r3, r4, r3
 8005d32:	441a      	add	r2, r3
 8005d34:	9e00      	ldr	r6, [sp, #0]
 8005d36:	9b03      	ldr	r3, [sp, #12]
 8005d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	e721      	b.n	8005b82 <_dtoa_r+0x71a>
 8005d3e:	9c08      	ldr	r4, [sp, #32]
 8005d40:	9e00      	ldr	r6, [sp, #0]
 8005d42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005d44:	e728      	b.n	8005b98 <_dtoa_r+0x730>
 8005d46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005d4a:	e751      	b.n	8005bf0 <_dtoa_r+0x788>
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	9902      	ldr	r1, [sp, #8]
 8005d50:	e750      	b.n	8005bf4 <_dtoa_r+0x78c>
 8005d52:	f8cd 8008 	str.w	r8, [sp, #8]
 8005d56:	e751      	b.n	8005bfc <_dtoa_r+0x794>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e779      	b.n	8005c50 <_dtoa_r+0x7e8>
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	e777      	b.n	8005c50 <_dtoa_r+0x7e8>
 8005d60:	2300      	movs	r3, #0
 8005d62:	9308      	str	r3, [sp, #32]
 8005d64:	e779      	b.n	8005c5a <_dtoa_r+0x7f2>
 8005d66:	d093      	beq.n	8005c90 <_dtoa_r+0x828>
 8005d68:	9a00      	ldr	r2, [sp, #0]
 8005d6a:	331c      	adds	r3, #28
 8005d6c:	441a      	add	r2, r3
 8005d6e:	9200      	str	r2, [sp, #0]
 8005d70:	9a06      	ldr	r2, [sp, #24]
 8005d72:	441a      	add	r2, r3
 8005d74:	441e      	add	r6, r3
 8005d76:	9206      	str	r2, [sp, #24]
 8005d78:	e78a      	b.n	8005c90 <_dtoa_r+0x828>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	e7f4      	b.n	8005d68 <_dtoa_r+0x900>
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	46b8      	mov	r8, r7
 8005d84:	dc20      	bgt.n	8005dc8 <_dtoa_r+0x960>
 8005d86:	469b      	mov	fp, r3
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	dd1e      	ble.n	8005dcc <_dtoa_r+0x964>
 8005d8e:	f1bb 0f00 	cmp.w	fp, #0
 8005d92:	f47f adb1 	bne.w	80058f8 <_dtoa_r+0x490>
 8005d96:	4621      	mov	r1, r4
 8005d98:	465b      	mov	r3, fp
 8005d9a:	2205      	movs	r2, #5
 8005d9c:	4648      	mov	r0, r9
 8005d9e:	f000 fa95 	bl	80062cc <__multadd>
 8005da2:	4601      	mov	r1, r0
 8005da4:	4604      	mov	r4, r0
 8005da6:	9802      	ldr	r0, [sp, #8]
 8005da8:	f000 fca0 	bl	80066ec <__mcmp>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f77f ada3 	ble.w	80058f8 <_dtoa_r+0x490>
 8005db2:	4656      	mov	r6, sl
 8005db4:	2331      	movs	r3, #49	@ 0x31
 8005db6:	f806 3b01 	strb.w	r3, [r6], #1
 8005dba:	f108 0801 	add.w	r8, r8, #1
 8005dbe:	e59f      	b.n	8005900 <_dtoa_r+0x498>
 8005dc0:	9c03      	ldr	r4, [sp, #12]
 8005dc2:	46b8      	mov	r8, r7
 8005dc4:	4625      	mov	r5, r4
 8005dc6:	e7f4      	b.n	8005db2 <_dtoa_r+0x94a>
 8005dc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8101 	beq.w	8005fd6 <_dtoa_r+0xb6e>
 8005dd4:	2e00      	cmp	r6, #0
 8005dd6:	dd05      	ble.n	8005de4 <_dtoa_r+0x97c>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4632      	mov	r2, r6
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f000 fc19 	bl	8006614 <__lshift>
 8005de2:	4605      	mov	r5, r0
 8005de4:	9b08      	ldr	r3, [sp, #32]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05c      	beq.n	8005ea4 <_dtoa_r+0xa3c>
 8005dea:	6869      	ldr	r1, [r5, #4]
 8005dec:	4648      	mov	r0, r9
 8005dee:	f000 fa0b 	bl	8006208 <_Balloc>
 8005df2:	4606      	mov	r6, r0
 8005df4:	b928      	cbnz	r0, 8005e02 <_dtoa_r+0x99a>
 8005df6:	4b82      	ldr	r3, [pc, #520]	@ (8006000 <_dtoa_r+0xb98>)
 8005df8:	4602      	mov	r2, r0
 8005dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005dfe:	f7ff bb4a 	b.w	8005496 <_dtoa_r+0x2e>
 8005e02:	692a      	ldr	r2, [r5, #16]
 8005e04:	3202      	adds	r2, #2
 8005e06:	0092      	lsls	r2, r2, #2
 8005e08:	f105 010c 	add.w	r1, r5, #12
 8005e0c:	300c      	adds	r0, #12
 8005e0e:	f7ff fa94 	bl	800533a <memcpy>
 8005e12:	2201      	movs	r2, #1
 8005e14:	4631      	mov	r1, r6
 8005e16:	4648      	mov	r0, r9
 8005e18:	f000 fbfc 	bl	8006614 <__lshift>
 8005e1c:	f10a 0301 	add.w	r3, sl, #1
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	eb0a 030b 	add.w	r3, sl, fp
 8005e26:	9308      	str	r3, [sp, #32]
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	462f      	mov	r7, r5
 8005e30:	9306      	str	r3, [sp, #24]
 8005e32:	4605      	mov	r5, r0
 8005e34:	9b00      	ldr	r3, [sp, #0]
 8005e36:	9802      	ldr	r0, [sp, #8]
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e3e:	f7ff fa8a 	bl	8005356 <quorem>
 8005e42:	4603      	mov	r3, r0
 8005e44:	3330      	adds	r3, #48	@ 0x30
 8005e46:	9003      	str	r0, [sp, #12]
 8005e48:	4639      	mov	r1, r7
 8005e4a:	9802      	ldr	r0, [sp, #8]
 8005e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e4e:	f000 fc4d 	bl	80066ec <__mcmp>
 8005e52:	462a      	mov	r2, r5
 8005e54:	9004      	str	r0, [sp, #16]
 8005e56:	4621      	mov	r1, r4
 8005e58:	4648      	mov	r0, r9
 8005e5a:	f000 fc63 	bl	8006724 <__mdiff>
 8005e5e:	68c2      	ldr	r2, [r0, #12]
 8005e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e62:	4606      	mov	r6, r0
 8005e64:	bb02      	cbnz	r2, 8005ea8 <_dtoa_r+0xa40>
 8005e66:	4601      	mov	r1, r0
 8005e68:	9802      	ldr	r0, [sp, #8]
 8005e6a:	f000 fc3f 	bl	80066ec <__mcmp>
 8005e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e70:	4602      	mov	r2, r0
 8005e72:	4631      	mov	r1, r6
 8005e74:	4648      	mov	r0, r9
 8005e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	f000 fa05 	bl	8006288 <_Bfree>
 8005e7e:	9b07      	ldr	r3, [sp, #28]
 8005e80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e82:	9e00      	ldr	r6, [sp, #0]
 8005e84:	ea42 0103 	orr.w	r1, r2, r3
 8005e88:	9b06      	ldr	r3, [sp, #24]
 8005e8a:	4319      	orrs	r1, r3
 8005e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8e:	d10d      	bne.n	8005eac <_dtoa_r+0xa44>
 8005e90:	2b39      	cmp	r3, #57	@ 0x39
 8005e92:	d027      	beq.n	8005ee4 <_dtoa_r+0xa7c>
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	dd01      	ble.n	8005e9e <_dtoa_r+0xa36>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	3331      	adds	r3, #49	@ 0x31
 8005e9e:	f88b 3000 	strb.w	r3, [fp]
 8005ea2:	e52e      	b.n	8005902 <_dtoa_r+0x49a>
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	e7b9      	b.n	8005e1c <_dtoa_r+0x9b4>
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	e7e2      	b.n	8005e72 <_dtoa_r+0xa0a>
 8005eac:	9904      	ldr	r1, [sp, #16]
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	db04      	blt.n	8005ebc <_dtoa_r+0xa54>
 8005eb2:	9807      	ldr	r0, [sp, #28]
 8005eb4:	4301      	orrs	r1, r0
 8005eb6:	9806      	ldr	r0, [sp, #24]
 8005eb8:	4301      	orrs	r1, r0
 8005eba:	d120      	bne.n	8005efe <_dtoa_r+0xa96>
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	ddee      	ble.n	8005e9e <_dtoa_r+0xa36>
 8005ec0:	9902      	ldr	r1, [sp, #8]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4648      	mov	r0, r9
 8005ec8:	f000 fba4 	bl	8006614 <__lshift>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	9002      	str	r0, [sp, #8]
 8005ed0:	f000 fc0c 	bl	80066ec <__mcmp>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	dc02      	bgt.n	8005ee0 <_dtoa_r+0xa78>
 8005eda:	d1e0      	bne.n	8005e9e <_dtoa_r+0xa36>
 8005edc:	07da      	lsls	r2, r3, #31
 8005ede:	d5de      	bpl.n	8005e9e <_dtoa_r+0xa36>
 8005ee0:	2b39      	cmp	r3, #57	@ 0x39
 8005ee2:	d1da      	bne.n	8005e9a <_dtoa_r+0xa32>
 8005ee4:	2339      	movs	r3, #57	@ 0x39
 8005ee6:	f88b 3000 	strb.w	r3, [fp]
 8005eea:	4633      	mov	r3, r6
 8005eec:	461e      	mov	r6, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ef4:	2a39      	cmp	r2, #57	@ 0x39
 8005ef6:	d04e      	beq.n	8005f96 <_dtoa_r+0xb2e>
 8005ef8:	3201      	adds	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e501      	b.n	8005902 <_dtoa_r+0x49a>
 8005efe:	2a00      	cmp	r2, #0
 8005f00:	dd03      	ble.n	8005f0a <_dtoa_r+0xaa2>
 8005f02:	2b39      	cmp	r3, #57	@ 0x39
 8005f04:	d0ee      	beq.n	8005ee4 <_dtoa_r+0xa7c>
 8005f06:	3301      	adds	r3, #1
 8005f08:	e7c9      	b.n	8005e9e <_dtoa_r+0xa36>
 8005f0a:	9a00      	ldr	r2, [sp, #0]
 8005f0c:	9908      	ldr	r1, [sp, #32]
 8005f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f12:	428a      	cmp	r2, r1
 8005f14:	d028      	beq.n	8005f68 <_dtoa_r+0xb00>
 8005f16:	9902      	ldr	r1, [sp, #8]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4648      	mov	r0, r9
 8005f1e:	f000 f9d5 	bl	80062cc <__multadd>
 8005f22:	42af      	cmp	r7, r5
 8005f24:	9002      	str	r0, [sp, #8]
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f04f 020a 	mov.w	r2, #10
 8005f2e:	4639      	mov	r1, r7
 8005f30:	4648      	mov	r0, r9
 8005f32:	d107      	bne.n	8005f44 <_dtoa_r+0xadc>
 8005f34:	f000 f9ca 	bl	80062cc <__multadd>
 8005f38:	4607      	mov	r7, r0
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	9b00      	ldr	r3, [sp, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	e777      	b.n	8005e34 <_dtoa_r+0x9cc>
 8005f44:	f000 f9c2 	bl	80062cc <__multadd>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	220a      	movs	r2, #10
 8005f50:	4648      	mov	r0, r9
 8005f52:	f000 f9bb 	bl	80062cc <__multadd>
 8005f56:	4605      	mov	r5, r0
 8005f58:	e7f0      	b.n	8005f3c <_dtoa_r+0xad4>
 8005f5a:	f1bb 0f00 	cmp.w	fp, #0
 8005f5e:	bfcc      	ite	gt
 8005f60:	465e      	movgt	r6, fp
 8005f62:	2601      	movle	r6, #1
 8005f64:	4456      	add	r6, sl
 8005f66:	2700      	movs	r7, #0
 8005f68:	9902      	ldr	r1, [sp, #8]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4648      	mov	r0, r9
 8005f70:	f000 fb50 	bl	8006614 <__lshift>
 8005f74:	4621      	mov	r1, r4
 8005f76:	9002      	str	r0, [sp, #8]
 8005f78:	f000 fbb8 	bl	80066ec <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	dcb4      	bgt.n	8005eea <_dtoa_r+0xa82>
 8005f80:	d102      	bne.n	8005f88 <_dtoa_r+0xb20>
 8005f82:	9b00      	ldr	r3, [sp, #0]
 8005f84:	07db      	lsls	r3, r3, #31
 8005f86:	d4b0      	bmi.n	8005eea <_dtoa_r+0xa82>
 8005f88:	4633      	mov	r3, r6
 8005f8a:	461e      	mov	r6, r3
 8005f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f90:	2a30      	cmp	r2, #48	@ 0x30
 8005f92:	d0fa      	beq.n	8005f8a <_dtoa_r+0xb22>
 8005f94:	e4b5      	b.n	8005902 <_dtoa_r+0x49a>
 8005f96:	459a      	cmp	sl, r3
 8005f98:	d1a8      	bne.n	8005eec <_dtoa_r+0xa84>
 8005f9a:	2331      	movs	r3, #49	@ 0x31
 8005f9c:	f108 0801 	add.w	r8, r8, #1
 8005fa0:	f88a 3000 	strb.w	r3, [sl]
 8005fa4:	e4ad      	b.n	8005902 <_dtoa_r+0x49a>
 8005fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006004 <_dtoa_r+0xb9c>
 8005fac:	b11b      	cbz	r3, 8005fb6 <_dtoa_r+0xb4e>
 8005fae:	f10a 0308 	add.w	r3, sl, #8
 8005fb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	b017      	add	sp, #92	@ 0x5c
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	9b07      	ldr	r3, [sp, #28]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	f77f ae2e 	ble.w	8005c22 <_dtoa_r+0x7ba>
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc8:	9308      	str	r3, [sp, #32]
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e64d      	b.n	8005c6a <_dtoa_r+0x802>
 8005fce:	f1bb 0f00 	cmp.w	fp, #0
 8005fd2:	f77f aed9 	ble.w	8005d88 <_dtoa_r+0x920>
 8005fd6:	4656      	mov	r6, sl
 8005fd8:	9802      	ldr	r0, [sp, #8]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	f7ff f9bb 	bl	8005356 <quorem>
 8005fe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8005fe8:	eba6 020a 	sub.w	r2, r6, sl
 8005fec:	4593      	cmp	fp, r2
 8005fee:	ddb4      	ble.n	8005f5a <_dtoa_r+0xaf2>
 8005ff0:	9902      	ldr	r1, [sp, #8]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4648      	mov	r0, r9
 8005ff8:	f000 f968 	bl	80062cc <__multadd>
 8005ffc:	9002      	str	r0, [sp, #8]
 8005ffe:	e7eb      	b.n	8005fd8 <_dtoa_r+0xb70>
 8006000:	08007198 	.word	0x08007198
 8006004:	0800711c 	.word	0x0800711c

08006008 <_free_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4605      	mov	r5, r0
 800600c:	2900      	cmp	r1, #0
 800600e:	d041      	beq.n	8006094 <_free_r+0x8c>
 8006010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006014:	1f0c      	subs	r4, r1, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfb8      	it	lt
 800601a:	18e4      	addlt	r4, r4, r3
 800601c:	f000 f8e8 	bl	80061f0 <__malloc_lock>
 8006020:	4a1d      	ldr	r2, [pc, #116]	@ (8006098 <_free_r+0x90>)
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	b933      	cbnz	r3, 8006034 <_free_r+0x2c>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	6014      	str	r4, [r2, #0]
 800602a:	4628      	mov	r0, r5
 800602c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006030:	f000 b8e4 	b.w	80061fc <__malloc_unlock>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x42>
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	1821      	adds	r1, r4, r0
 800603c:	428b      	cmp	r3, r1
 800603e:	bf01      	itttt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	1809      	addeq	r1, r1, r0
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	e7ed      	b.n	8006026 <_free_r+0x1e>
 800604a:	461a      	mov	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b10b      	cbz	r3, 8006054 <_free_r+0x4c>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d9fa      	bls.n	800604a <_free_r+0x42>
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	1850      	adds	r0, r2, r1
 8006058:	42a0      	cmp	r0, r4
 800605a:	d10b      	bne.n	8006074 <_free_r+0x6c>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	4401      	add	r1, r0
 8006060:	1850      	adds	r0, r2, r1
 8006062:	4283      	cmp	r3, r0
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	d1e0      	bne.n	800602a <_free_r+0x22>
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	6053      	str	r3, [r2, #4]
 800606e:	4408      	add	r0, r1
 8006070:	6010      	str	r0, [r2, #0]
 8006072:	e7da      	b.n	800602a <_free_r+0x22>
 8006074:	d902      	bls.n	800607c <_free_r+0x74>
 8006076:	230c      	movs	r3, #12
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	e7d6      	b.n	800602a <_free_r+0x22>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf04      	itt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	bf04      	itt	eq
 800608c:	1809      	addeq	r1, r1, r0
 800608e:	6021      	streq	r1, [r4, #0]
 8006090:	6054      	str	r4, [r2, #4]
 8006092:	e7ca      	b.n	800602a <_free_r+0x22>
 8006094:	bd38      	pop	{r3, r4, r5, pc}
 8006096:	bf00      	nop
 8006098:	2000441c 	.word	0x2000441c

0800609c <malloc>:
 800609c:	4b02      	ldr	r3, [pc, #8]	@ (80060a8 <malloc+0xc>)
 800609e:	4601      	mov	r1, r0
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f000 b825 	b.w	80060f0 <_malloc_r>
 80060a6:	bf00      	nop
 80060a8:	2000001c 	.word	0x2000001c

080060ac <sbrk_aligned>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	4e0f      	ldr	r6, [pc, #60]	@ (80060ec <sbrk_aligned+0x40>)
 80060b0:	460c      	mov	r4, r1
 80060b2:	6831      	ldr	r1, [r6, #0]
 80060b4:	4605      	mov	r5, r0
 80060b6:	b911      	cbnz	r1, 80060be <sbrk_aligned+0x12>
 80060b8:	f000 fccc 	bl	8006a54 <_sbrk_r>
 80060bc:	6030      	str	r0, [r6, #0]
 80060be:	4621      	mov	r1, r4
 80060c0:	4628      	mov	r0, r5
 80060c2:	f000 fcc7 	bl	8006a54 <_sbrk_r>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	d103      	bne.n	80060d2 <sbrk_aligned+0x26>
 80060ca:	f04f 34ff 	mov.w	r4, #4294967295
 80060ce:	4620      	mov	r0, r4
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
 80060d2:	1cc4      	adds	r4, r0, #3
 80060d4:	f024 0403 	bic.w	r4, r4, #3
 80060d8:	42a0      	cmp	r0, r4
 80060da:	d0f8      	beq.n	80060ce <sbrk_aligned+0x22>
 80060dc:	1a21      	subs	r1, r4, r0
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 fcb8 	bl	8006a54 <_sbrk_r>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d1f2      	bne.n	80060ce <sbrk_aligned+0x22>
 80060e8:	e7ef      	b.n	80060ca <sbrk_aligned+0x1e>
 80060ea:	bf00      	nop
 80060ec:	20004418 	.word	0x20004418

080060f0 <_malloc_r>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	1ccd      	adds	r5, r1, #3
 80060f6:	f025 0503 	bic.w	r5, r5, #3
 80060fa:	3508      	adds	r5, #8
 80060fc:	2d0c      	cmp	r5, #12
 80060fe:	bf38      	it	cc
 8006100:	250c      	movcc	r5, #12
 8006102:	2d00      	cmp	r5, #0
 8006104:	4606      	mov	r6, r0
 8006106:	db01      	blt.n	800610c <_malloc_r+0x1c>
 8006108:	42a9      	cmp	r1, r5
 800610a:	d904      	bls.n	8006116 <_malloc_r+0x26>
 800610c:	230c      	movs	r3, #12
 800610e:	6033      	str	r3, [r6, #0]
 8006110:	2000      	movs	r0, #0
 8006112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061ec <_malloc_r+0xfc>
 800611a:	f000 f869 	bl	80061f0 <__malloc_lock>
 800611e:	f8d8 3000 	ldr.w	r3, [r8]
 8006122:	461c      	mov	r4, r3
 8006124:	bb44      	cbnz	r4, 8006178 <_malloc_r+0x88>
 8006126:	4629      	mov	r1, r5
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff ffbf 	bl	80060ac <sbrk_aligned>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	4604      	mov	r4, r0
 8006132:	d158      	bne.n	80061e6 <_malloc_r+0xf6>
 8006134:	f8d8 4000 	ldr.w	r4, [r8]
 8006138:	4627      	mov	r7, r4
 800613a:	2f00      	cmp	r7, #0
 800613c:	d143      	bne.n	80061c6 <_malloc_r+0xd6>
 800613e:	2c00      	cmp	r4, #0
 8006140:	d04b      	beq.n	80061da <_malloc_r+0xea>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	4639      	mov	r1, r7
 8006146:	4630      	mov	r0, r6
 8006148:	eb04 0903 	add.w	r9, r4, r3
 800614c:	f000 fc82 	bl	8006a54 <_sbrk_r>
 8006150:	4581      	cmp	r9, r0
 8006152:	d142      	bne.n	80061da <_malloc_r+0xea>
 8006154:	6821      	ldr	r1, [r4, #0]
 8006156:	1a6d      	subs	r5, r5, r1
 8006158:	4629      	mov	r1, r5
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ffa6 	bl	80060ac <sbrk_aligned>
 8006160:	3001      	adds	r0, #1
 8006162:	d03a      	beq.n	80061da <_malloc_r+0xea>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	442b      	add	r3, r5
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	f8d8 3000 	ldr.w	r3, [r8]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	bb62      	cbnz	r2, 80061cc <_malloc_r+0xdc>
 8006172:	f8c8 7000 	str.w	r7, [r8]
 8006176:	e00f      	b.n	8006198 <_malloc_r+0xa8>
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	1b52      	subs	r2, r2, r5
 800617c:	d420      	bmi.n	80061c0 <_malloc_r+0xd0>
 800617e:	2a0b      	cmp	r2, #11
 8006180:	d917      	bls.n	80061b2 <_malloc_r+0xc2>
 8006182:	1961      	adds	r1, r4, r5
 8006184:	42a3      	cmp	r3, r4
 8006186:	6025      	str	r5, [r4, #0]
 8006188:	bf18      	it	ne
 800618a:	6059      	strne	r1, [r3, #4]
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	bf08      	it	eq
 8006190:	f8c8 1000 	streq.w	r1, [r8]
 8006194:	5162      	str	r2, [r4, r5]
 8006196:	604b      	str	r3, [r1, #4]
 8006198:	4630      	mov	r0, r6
 800619a:	f000 f82f 	bl	80061fc <__malloc_unlock>
 800619e:	f104 000b 	add.w	r0, r4, #11
 80061a2:	1d23      	adds	r3, r4, #4
 80061a4:	f020 0007 	bic.w	r0, r0, #7
 80061a8:	1ac2      	subs	r2, r0, r3
 80061aa:	bf1c      	itt	ne
 80061ac:	1a1b      	subne	r3, r3, r0
 80061ae:	50a3      	strne	r3, [r4, r2]
 80061b0:	e7af      	b.n	8006112 <_malloc_r+0x22>
 80061b2:	6862      	ldr	r2, [r4, #4]
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	bf0c      	ite	eq
 80061b8:	f8c8 2000 	streq.w	r2, [r8]
 80061bc:	605a      	strne	r2, [r3, #4]
 80061be:	e7eb      	b.n	8006198 <_malloc_r+0xa8>
 80061c0:	4623      	mov	r3, r4
 80061c2:	6864      	ldr	r4, [r4, #4]
 80061c4:	e7ae      	b.n	8006124 <_malloc_r+0x34>
 80061c6:	463c      	mov	r4, r7
 80061c8:	687f      	ldr	r7, [r7, #4]
 80061ca:	e7b6      	b.n	800613a <_malloc_r+0x4a>
 80061cc:	461a      	mov	r2, r3
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d1fb      	bne.n	80061cc <_malloc_r+0xdc>
 80061d4:	2300      	movs	r3, #0
 80061d6:	6053      	str	r3, [r2, #4]
 80061d8:	e7de      	b.n	8006198 <_malloc_r+0xa8>
 80061da:	230c      	movs	r3, #12
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	4630      	mov	r0, r6
 80061e0:	f000 f80c 	bl	80061fc <__malloc_unlock>
 80061e4:	e794      	b.n	8006110 <_malloc_r+0x20>
 80061e6:	6005      	str	r5, [r0, #0]
 80061e8:	e7d6      	b.n	8006198 <_malloc_r+0xa8>
 80061ea:	bf00      	nop
 80061ec:	2000441c 	.word	0x2000441c

080061f0 <__malloc_lock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__malloc_lock+0x8>)
 80061f2:	f7ff b8a0 	b.w	8005336 <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	20004414 	.word	0x20004414

080061fc <__malloc_unlock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	@ (8006204 <__malloc_unlock+0x8>)
 80061fe:	f7ff b89b 	b.w	8005338 <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	20004414 	.word	0x20004414

08006208 <_Balloc>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	69c6      	ldr	r6, [r0, #28]
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	b976      	cbnz	r6, 8006230 <_Balloc+0x28>
 8006212:	2010      	movs	r0, #16
 8006214:	f7ff ff42 	bl	800609c <malloc>
 8006218:	4602      	mov	r2, r0
 800621a:	61e0      	str	r0, [r4, #28]
 800621c:	b920      	cbnz	r0, 8006228 <_Balloc+0x20>
 800621e:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <_Balloc+0x78>)
 8006220:	4818      	ldr	r0, [pc, #96]	@ (8006284 <_Balloc+0x7c>)
 8006222:	216b      	movs	r1, #107	@ 0x6b
 8006224:	f000 fc26 	bl	8006a74 <__assert_func>
 8006228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800622c:	6006      	str	r6, [r0, #0]
 800622e:	60c6      	str	r6, [r0, #12]
 8006230:	69e6      	ldr	r6, [r4, #28]
 8006232:	68f3      	ldr	r3, [r6, #12]
 8006234:	b183      	cbz	r3, 8006258 <_Balloc+0x50>
 8006236:	69e3      	ldr	r3, [r4, #28]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800623e:	b9b8      	cbnz	r0, 8006270 <_Balloc+0x68>
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f605 	lsl.w	r6, r1, r5
 8006246:	1d72      	adds	r2, r6, #5
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fc30 	bl	8006ab0 <_calloc_r>
 8006250:	b160      	cbz	r0, 800626c <_Balloc+0x64>
 8006252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006256:	e00e      	b.n	8006276 <_Balloc+0x6e>
 8006258:	2221      	movs	r2, #33	@ 0x21
 800625a:	2104      	movs	r1, #4
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fc27 	bl	8006ab0 <_calloc_r>
 8006262:	69e3      	ldr	r3, [r4, #28]
 8006264:	60f0      	str	r0, [r6, #12]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e4      	bne.n	8006236 <_Balloc+0x2e>
 800626c:	2000      	movs	r0, #0
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006276:	2300      	movs	r3, #0
 8006278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800627c:	e7f7      	b.n	800626e <_Balloc+0x66>
 800627e:	bf00      	nop
 8006280:	08007129 	.word	0x08007129
 8006284:	080071a9 	.word	0x080071a9

08006288 <_Bfree>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	69c6      	ldr	r6, [r0, #28]
 800628c:	4605      	mov	r5, r0
 800628e:	460c      	mov	r4, r1
 8006290:	b976      	cbnz	r6, 80062b0 <_Bfree+0x28>
 8006292:	2010      	movs	r0, #16
 8006294:	f7ff ff02 	bl	800609c <malloc>
 8006298:	4602      	mov	r2, r0
 800629a:	61e8      	str	r0, [r5, #28]
 800629c:	b920      	cbnz	r0, 80062a8 <_Bfree+0x20>
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <_Bfree+0x3c>)
 80062a0:	4809      	ldr	r0, [pc, #36]	@ (80062c8 <_Bfree+0x40>)
 80062a2:	218f      	movs	r1, #143	@ 0x8f
 80062a4:	f000 fbe6 	bl	8006a74 <__assert_func>
 80062a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062ac:	6006      	str	r6, [r0, #0]
 80062ae:	60c6      	str	r6, [r0, #12]
 80062b0:	b13c      	cbz	r4, 80062c2 <_Bfree+0x3a>
 80062b2:	69eb      	ldr	r3, [r5, #28]
 80062b4:	6862      	ldr	r2, [r4, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062bc:	6021      	str	r1, [r4, #0]
 80062be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	08007129 	.word	0x08007129
 80062c8:	080071a9 	.word	0x080071a9

080062cc <__multadd>:
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	690d      	ldr	r5, [r1, #16]
 80062d2:	4607      	mov	r7, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	461e      	mov	r6, r3
 80062d8:	f101 0c14 	add.w	ip, r1, #20
 80062dc:	2000      	movs	r0, #0
 80062de:	f8dc 3000 	ldr.w	r3, [ip]
 80062e2:	b299      	uxth	r1, r3
 80062e4:	fb02 6101 	mla	r1, r2, r1, r6
 80062e8:	0c1e      	lsrs	r6, r3, #16
 80062ea:	0c0b      	lsrs	r3, r1, #16
 80062ec:	fb02 3306 	mla	r3, r2, r6, r3
 80062f0:	b289      	uxth	r1, r1
 80062f2:	3001      	adds	r0, #1
 80062f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062f8:	4285      	cmp	r5, r0
 80062fa:	f84c 1b04 	str.w	r1, [ip], #4
 80062fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006302:	dcec      	bgt.n	80062de <__multadd+0x12>
 8006304:	b30e      	cbz	r6, 800634a <__multadd+0x7e>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc19      	bgt.n	8006340 <__multadd+0x74>
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4638      	mov	r0, r7
 8006310:	3101      	adds	r1, #1
 8006312:	f7ff ff79 	bl	8006208 <_Balloc>
 8006316:	4680      	mov	r8, r0
 8006318:	b928      	cbnz	r0, 8006326 <__multadd+0x5a>
 800631a:	4602      	mov	r2, r0
 800631c:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <__multadd+0x84>)
 800631e:	480d      	ldr	r0, [pc, #52]	@ (8006354 <__multadd+0x88>)
 8006320:	21ba      	movs	r1, #186	@ 0xba
 8006322:	f000 fba7 	bl	8006a74 <__assert_func>
 8006326:	6922      	ldr	r2, [r4, #16]
 8006328:	3202      	adds	r2, #2
 800632a:	f104 010c 	add.w	r1, r4, #12
 800632e:	0092      	lsls	r2, r2, #2
 8006330:	300c      	adds	r0, #12
 8006332:	f7ff f802 	bl	800533a <memcpy>
 8006336:	4621      	mov	r1, r4
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ffa5 	bl	8006288 <_Bfree>
 800633e:	4644      	mov	r4, r8
 8006340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006344:	3501      	adds	r5, #1
 8006346:	615e      	str	r6, [r3, #20]
 8006348:	6125      	str	r5, [r4, #16]
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	08007198 	.word	0x08007198
 8006354:	080071a9 	.word	0x080071a9

08006358 <__hi0bits>:
 8006358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800635c:	4603      	mov	r3, r0
 800635e:	bf36      	itet	cc
 8006360:	0403      	lslcc	r3, r0, #16
 8006362:	2000      	movcs	r0, #0
 8006364:	2010      	movcc	r0, #16
 8006366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636a:	bf3c      	itt	cc
 800636c:	021b      	lslcc	r3, r3, #8
 800636e:	3008      	addcc	r0, #8
 8006370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006374:	bf3c      	itt	cc
 8006376:	011b      	lslcc	r3, r3, #4
 8006378:	3004      	addcc	r0, #4
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637e:	bf3c      	itt	cc
 8006380:	009b      	lslcc	r3, r3, #2
 8006382:	3002      	addcc	r0, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	db05      	blt.n	8006394 <__hi0bits+0x3c>
 8006388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800638c:	f100 0001 	add.w	r0, r0, #1
 8006390:	bf08      	it	eq
 8006392:	2020      	moveq	r0, #32
 8006394:	4770      	bx	lr

08006396 <__lo0bits>:
 8006396:	6803      	ldr	r3, [r0, #0]
 8006398:	4602      	mov	r2, r0
 800639a:	f013 0007 	ands.w	r0, r3, #7
 800639e:	d00b      	beq.n	80063b8 <__lo0bits+0x22>
 80063a0:	07d9      	lsls	r1, r3, #31
 80063a2:	d421      	bmi.n	80063e8 <__lo0bits+0x52>
 80063a4:	0798      	lsls	r0, r3, #30
 80063a6:	bf49      	itett	mi
 80063a8:	085b      	lsrmi	r3, r3, #1
 80063aa:	089b      	lsrpl	r3, r3, #2
 80063ac:	2001      	movmi	r0, #1
 80063ae:	6013      	strmi	r3, [r2, #0]
 80063b0:	bf5c      	itt	pl
 80063b2:	6013      	strpl	r3, [r2, #0]
 80063b4:	2002      	movpl	r0, #2
 80063b6:	4770      	bx	lr
 80063b8:	b299      	uxth	r1, r3
 80063ba:	b909      	cbnz	r1, 80063c0 <__lo0bits+0x2a>
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	2010      	movs	r0, #16
 80063c0:	b2d9      	uxtb	r1, r3
 80063c2:	b909      	cbnz	r1, 80063c8 <__lo0bits+0x32>
 80063c4:	3008      	adds	r0, #8
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	0719      	lsls	r1, r3, #28
 80063ca:	bf04      	itt	eq
 80063cc:	091b      	lsreq	r3, r3, #4
 80063ce:	3004      	addeq	r0, #4
 80063d0:	0799      	lsls	r1, r3, #30
 80063d2:	bf04      	itt	eq
 80063d4:	089b      	lsreq	r3, r3, #2
 80063d6:	3002      	addeq	r0, #2
 80063d8:	07d9      	lsls	r1, r3, #31
 80063da:	d403      	bmi.n	80063e4 <__lo0bits+0x4e>
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	f100 0001 	add.w	r0, r0, #1
 80063e2:	d003      	beq.n	80063ec <__lo0bits+0x56>
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4770      	bx	lr
 80063e8:	2000      	movs	r0, #0
 80063ea:	4770      	bx	lr
 80063ec:	2020      	movs	r0, #32
 80063ee:	4770      	bx	lr

080063f0 <__i2b>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	460c      	mov	r4, r1
 80063f4:	2101      	movs	r1, #1
 80063f6:	f7ff ff07 	bl	8006208 <_Balloc>
 80063fa:	4602      	mov	r2, r0
 80063fc:	b928      	cbnz	r0, 800640a <__i2b+0x1a>
 80063fe:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <__i2b+0x24>)
 8006400:	4805      	ldr	r0, [pc, #20]	@ (8006418 <__i2b+0x28>)
 8006402:	f240 1145 	movw	r1, #325	@ 0x145
 8006406:	f000 fb35 	bl	8006a74 <__assert_func>
 800640a:	2301      	movs	r3, #1
 800640c:	6144      	str	r4, [r0, #20]
 800640e:	6103      	str	r3, [r0, #16]
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop
 8006414:	08007198 	.word	0x08007198
 8006418:	080071a9 	.word	0x080071a9

0800641c <__multiply>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	4617      	mov	r7, r2
 8006422:	690a      	ldr	r2, [r1, #16]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	bfa8      	it	ge
 800642a:	463b      	movge	r3, r7
 800642c:	4689      	mov	r9, r1
 800642e:	bfa4      	itt	ge
 8006430:	460f      	movge	r7, r1
 8006432:	4699      	movge	r9, r3
 8006434:	693d      	ldr	r5, [r7, #16]
 8006436:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	eb05 060a 	add.w	r6, r5, sl
 8006442:	42b3      	cmp	r3, r6
 8006444:	b085      	sub	sp, #20
 8006446:	bfb8      	it	lt
 8006448:	3101      	addlt	r1, #1
 800644a:	f7ff fedd 	bl	8006208 <_Balloc>
 800644e:	b930      	cbnz	r0, 800645e <__multiply+0x42>
 8006450:	4602      	mov	r2, r0
 8006452:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <__multiply+0x13c>)
 8006454:	4841      	ldr	r0, [pc, #260]	@ (800655c <__multiply+0x140>)
 8006456:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800645a:	f000 fb0b 	bl	8006a74 <__assert_func>
 800645e:	f100 0414 	add.w	r4, r0, #20
 8006462:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006466:	4623      	mov	r3, r4
 8006468:	2200      	movs	r2, #0
 800646a:	4573      	cmp	r3, lr
 800646c:	d320      	bcc.n	80064b0 <__multiply+0x94>
 800646e:	f107 0814 	add.w	r8, r7, #20
 8006472:	f109 0114 	add.w	r1, r9, #20
 8006476:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800647a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800647e:	9302      	str	r3, [sp, #8]
 8006480:	1beb      	subs	r3, r5, r7
 8006482:	3b15      	subs	r3, #21
 8006484:	f023 0303 	bic.w	r3, r3, #3
 8006488:	3304      	adds	r3, #4
 800648a:	3715      	adds	r7, #21
 800648c:	42bd      	cmp	r5, r7
 800648e:	bf38      	it	cc
 8006490:	2304      	movcc	r3, #4
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	9103      	str	r1, [sp, #12]
 8006498:	428b      	cmp	r3, r1
 800649a:	d80c      	bhi.n	80064b6 <__multiply+0x9a>
 800649c:	2e00      	cmp	r6, #0
 800649e:	dd03      	ble.n	80064a8 <__multiply+0x8c>
 80064a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d055      	beq.n	8006554 <__multiply+0x138>
 80064a8:	6106      	str	r6, [r0, #16]
 80064aa:	b005      	add	sp, #20
 80064ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b0:	f843 2b04 	str.w	r2, [r3], #4
 80064b4:	e7d9      	b.n	800646a <__multiply+0x4e>
 80064b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80064ba:	f1ba 0f00 	cmp.w	sl, #0
 80064be:	d01f      	beq.n	8006500 <__multiply+0xe4>
 80064c0:	46c4      	mov	ip, r8
 80064c2:	46a1      	mov	r9, r4
 80064c4:	2700      	movs	r7, #0
 80064c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064ca:	f8d9 3000 	ldr.w	r3, [r9]
 80064ce:	fa1f fb82 	uxth.w	fp, r2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80064d8:	443b      	add	r3, r7
 80064da:	f8d9 7000 	ldr.w	r7, [r9]
 80064de:	0c12      	lsrs	r2, r2, #16
 80064e0:	0c3f      	lsrs	r7, r7, #16
 80064e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80064e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f0:	4565      	cmp	r5, ip
 80064f2:	f849 3b04 	str.w	r3, [r9], #4
 80064f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80064fa:	d8e4      	bhi.n	80064c6 <__multiply+0xaa>
 80064fc:	9b01      	ldr	r3, [sp, #4]
 80064fe:	50e7      	str	r7, [r4, r3]
 8006500:	9b03      	ldr	r3, [sp, #12]
 8006502:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006506:	3104      	adds	r1, #4
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	d020      	beq.n	8006550 <__multiply+0x134>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	4647      	mov	r7, r8
 8006512:	46a4      	mov	ip, r4
 8006514:	f04f 0a00 	mov.w	sl, #0
 8006518:	f8b7 b000 	ldrh.w	fp, [r7]
 800651c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006520:	fb09 220b 	mla	r2, r9, fp, r2
 8006524:	4452      	add	r2, sl
 8006526:	b29b      	uxth	r3, r3
 8006528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800652c:	f84c 3b04 	str.w	r3, [ip], #4
 8006530:	f857 3b04 	ldr.w	r3, [r7], #4
 8006534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006538:	f8bc 3000 	ldrh.w	r3, [ip]
 800653c:	fb09 330a 	mla	r3, r9, sl, r3
 8006540:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006544:	42bd      	cmp	r5, r7
 8006546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800654a:	d8e5      	bhi.n	8006518 <__multiply+0xfc>
 800654c:	9a01      	ldr	r2, [sp, #4]
 800654e:	50a3      	str	r3, [r4, r2]
 8006550:	3404      	adds	r4, #4
 8006552:	e79f      	b.n	8006494 <__multiply+0x78>
 8006554:	3e01      	subs	r6, #1
 8006556:	e7a1      	b.n	800649c <__multiply+0x80>
 8006558:	08007198 	.word	0x08007198
 800655c:	080071a9 	.word	0x080071a9

08006560 <__pow5mult>:
 8006560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006564:	4615      	mov	r5, r2
 8006566:	f012 0203 	ands.w	r2, r2, #3
 800656a:	4607      	mov	r7, r0
 800656c:	460e      	mov	r6, r1
 800656e:	d007      	beq.n	8006580 <__pow5mult+0x20>
 8006570:	4c25      	ldr	r4, [pc, #148]	@ (8006608 <__pow5mult+0xa8>)
 8006572:	3a01      	subs	r2, #1
 8006574:	2300      	movs	r3, #0
 8006576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800657a:	f7ff fea7 	bl	80062cc <__multadd>
 800657e:	4606      	mov	r6, r0
 8006580:	10ad      	asrs	r5, r5, #2
 8006582:	d03d      	beq.n	8006600 <__pow5mult+0xa0>
 8006584:	69fc      	ldr	r4, [r7, #28]
 8006586:	b97c      	cbnz	r4, 80065a8 <__pow5mult+0x48>
 8006588:	2010      	movs	r0, #16
 800658a:	f7ff fd87 	bl	800609c <malloc>
 800658e:	4602      	mov	r2, r0
 8006590:	61f8      	str	r0, [r7, #28]
 8006592:	b928      	cbnz	r0, 80065a0 <__pow5mult+0x40>
 8006594:	4b1d      	ldr	r3, [pc, #116]	@ (800660c <__pow5mult+0xac>)
 8006596:	481e      	ldr	r0, [pc, #120]	@ (8006610 <__pow5mult+0xb0>)
 8006598:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800659c:	f000 fa6a 	bl	8006a74 <__assert_func>
 80065a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065a4:	6004      	str	r4, [r0, #0]
 80065a6:	60c4      	str	r4, [r0, #12]
 80065a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065b0:	b94c      	cbnz	r4, 80065c6 <__pow5mult+0x66>
 80065b2:	f240 2171 	movw	r1, #625	@ 0x271
 80065b6:	4638      	mov	r0, r7
 80065b8:	f7ff ff1a 	bl	80063f0 <__i2b>
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c8 0008 	str.w	r0, [r8, #8]
 80065c2:	4604      	mov	r4, r0
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	f04f 0900 	mov.w	r9, #0
 80065ca:	07eb      	lsls	r3, r5, #31
 80065cc:	d50a      	bpl.n	80065e4 <__pow5mult+0x84>
 80065ce:	4631      	mov	r1, r6
 80065d0:	4622      	mov	r2, r4
 80065d2:	4638      	mov	r0, r7
 80065d4:	f7ff ff22 	bl	800641c <__multiply>
 80065d8:	4631      	mov	r1, r6
 80065da:	4680      	mov	r8, r0
 80065dc:	4638      	mov	r0, r7
 80065de:	f7ff fe53 	bl	8006288 <_Bfree>
 80065e2:	4646      	mov	r6, r8
 80065e4:	106d      	asrs	r5, r5, #1
 80065e6:	d00b      	beq.n	8006600 <__pow5mult+0xa0>
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	b938      	cbnz	r0, 80065fc <__pow5mult+0x9c>
 80065ec:	4622      	mov	r2, r4
 80065ee:	4621      	mov	r1, r4
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff ff13 	bl	800641c <__multiply>
 80065f6:	6020      	str	r0, [r4, #0]
 80065f8:	f8c0 9000 	str.w	r9, [r0]
 80065fc:	4604      	mov	r4, r0
 80065fe:	e7e4      	b.n	80065ca <__pow5mult+0x6a>
 8006600:	4630      	mov	r0, r6
 8006602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006606:	bf00      	nop
 8006608:	0800725c 	.word	0x0800725c
 800660c:	08007129 	.word	0x08007129
 8006610:	080071a9 	.word	0x080071a9

08006614 <__lshift>:
 8006614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	460c      	mov	r4, r1
 800661a:	6849      	ldr	r1, [r1, #4]
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	4607      	mov	r7, r0
 8006626:	4691      	mov	r9, r2
 8006628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800662c:	f108 0601 	add.w	r6, r8, #1
 8006630:	42b3      	cmp	r3, r6
 8006632:	db0b      	blt.n	800664c <__lshift+0x38>
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff fde7 	bl	8006208 <_Balloc>
 800663a:	4605      	mov	r5, r0
 800663c:	b948      	cbnz	r0, 8006652 <__lshift+0x3e>
 800663e:	4602      	mov	r2, r0
 8006640:	4b28      	ldr	r3, [pc, #160]	@ (80066e4 <__lshift+0xd0>)
 8006642:	4829      	ldr	r0, [pc, #164]	@ (80066e8 <__lshift+0xd4>)
 8006644:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006648:	f000 fa14 	bl	8006a74 <__assert_func>
 800664c:	3101      	adds	r1, #1
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	e7ee      	b.n	8006630 <__lshift+0x1c>
 8006652:	2300      	movs	r3, #0
 8006654:	f100 0114 	add.w	r1, r0, #20
 8006658:	f100 0210 	add.w	r2, r0, #16
 800665c:	4618      	mov	r0, r3
 800665e:	4553      	cmp	r3, sl
 8006660:	db33      	blt.n	80066ca <__lshift+0xb6>
 8006662:	6920      	ldr	r0, [r4, #16]
 8006664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006668:	f104 0314 	add.w	r3, r4, #20
 800666c:	f019 091f 	ands.w	r9, r9, #31
 8006670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006678:	d02b      	beq.n	80066d2 <__lshift+0xbe>
 800667a:	f1c9 0e20 	rsb	lr, r9, #32
 800667e:	468a      	mov	sl, r1
 8006680:	2200      	movs	r2, #0
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	fa00 f009 	lsl.w	r0, r0, r9
 8006688:	4310      	orrs	r0, r2
 800668a:	f84a 0b04 	str.w	r0, [sl], #4
 800668e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006692:	459c      	cmp	ip, r3
 8006694:	fa22 f20e 	lsr.w	r2, r2, lr
 8006698:	d8f3      	bhi.n	8006682 <__lshift+0x6e>
 800669a:	ebac 0304 	sub.w	r3, ip, r4
 800669e:	3b15      	subs	r3, #21
 80066a0:	f023 0303 	bic.w	r3, r3, #3
 80066a4:	3304      	adds	r3, #4
 80066a6:	f104 0015 	add.w	r0, r4, #21
 80066aa:	4560      	cmp	r0, ip
 80066ac:	bf88      	it	hi
 80066ae:	2304      	movhi	r3, #4
 80066b0:	50ca      	str	r2, [r1, r3]
 80066b2:	b10a      	cbz	r2, 80066b8 <__lshift+0xa4>
 80066b4:	f108 0602 	add.w	r6, r8, #2
 80066b8:	3e01      	subs	r6, #1
 80066ba:	4638      	mov	r0, r7
 80066bc:	612e      	str	r6, [r5, #16]
 80066be:	4621      	mov	r1, r4
 80066c0:	f7ff fde2 	bl	8006288 <_Bfree>
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7c5      	b.n	800665e <__lshift+0x4a>
 80066d2:	3904      	subs	r1, #4
 80066d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80066dc:	459c      	cmp	ip, r3
 80066de:	d8f9      	bhi.n	80066d4 <__lshift+0xc0>
 80066e0:	e7ea      	b.n	80066b8 <__lshift+0xa4>
 80066e2:	bf00      	nop
 80066e4:	08007198 	.word	0x08007198
 80066e8:	080071a9 	.word	0x080071a9

080066ec <__mcmp>:
 80066ec:	690a      	ldr	r2, [r1, #16]
 80066ee:	4603      	mov	r3, r0
 80066f0:	6900      	ldr	r0, [r0, #16]
 80066f2:	1a80      	subs	r0, r0, r2
 80066f4:	b530      	push	{r4, r5, lr}
 80066f6:	d10e      	bne.n	8006716 <__mcmp+0x2a>
 80066f8:	3314      	adds	r3, #20
 80066fa:	3114      	adds	r1, #20
 80066fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800670c:	4295      	cmp	r5, r2
 800670e:	d003      	beq.n	8006718 <__mcmp+0x2c>
 8006710:	d205      	bcs.n	800671e <__mcmp+0x32>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	bd30      	pop	{r4, r5, pc}
 8006718:	42a3      	cmp	r3, r4
 800671a:	d3f3      	bcc.n	8006704 <__mcmp+0x18>
 800671c:	e7fb      	b.n	8006716 <__mcmp+0x2a>
 800671e:	2001      	movs	r0, #1
 8006720:	e7f9      	b.n	8006716 <__mcmp+0x2a>
	...

08006724 <__mdiff>:
 8006724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4689      	mov	r9, r1
 800672a:	4606      	mov	r6, r0
 800672c:	4611      	mov	r1, r2
 800672e:	4648      	mov	r0, r9
 8006730:	4614      	mov	r4, r2
 8006732:	f7ff ffdb 	bl	80066ec <__mcmp>
 8006736:	1e05      	subs	r5, r0, #0
 8006738:	d112      	bne.n	8006760 <__mdiff+0x3c>
 800673a:	4629      	mov	r1, r5
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff fd63 	bl	8006208 <_Balloc>
 8006742:	4602      	mov	r2, r0
 8006744:	b928      	cbnz	r0, 8006752 <__mdiff+0x2e>
 8006746:	4b3f      	ldr	r3, [pc, #252]	@ (8006844 <__mdiff+0x120>)
 8006748:	f240 2137 	movw	r1, #567	@ 0x237
 800674c:	483e      	ldr	r0, [pc, #248]	@ (8006848 <__mdiff+0x124>)
 800674e:	f000 f991 	bl	8006a74 <__assert_func>
 8006752:	2301      	movs	r3, #1
 8006754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006758:	4610      	mov	r0, r2
 800675a:	b003      	add	sp, #12
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	bfbc      	itt	lt
 8006762:	464b      	movlt	r3, r9
 8006764:	46a1      	movlt	r9, r4
 8006766:	4630      	mov	r0, r6
 8006768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800676c:	bfba      	itte	lt
 800676e:	461c      	movlt	r4, r3
 8006770:	2501      	movlt	r5, #1
 8006772:	2500      	movge	r5, #0
 8006774:	f7ff fd48 	bl	8006208 <_Balloc>
 8006778:	4602      	mov	r2, r0
 800677a:	b918      	cbnz	r0, 8006784 <__mdiff+0x60>
 800677c:	4b31      	ldr	r3, [pc, #196]	@ (8006844 <__mdiff+0x120>)
 800677e:	f240 2145 	movw	r1, #581	@ 0x245
 8006782:	e7e3      	b.n	800674c <__mdiff+0x28>
 8006784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006788:	6926      	ldr	r6, [r4, #16]
 800678a:	60c5      	str	r5, [r0, #12]
 800678c:	f109 0310 	add.w	r3, r9, #16
 8006790:	f109 0514 	add.w	r5, r9, #20
 8006794:	f104 0e14 	add.w	lr, r4, #20
 8006798:	f100 0b14 	add.w	fp, r0, #20
 800679c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80067a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	46d9      	mov	r9, fp
 80067a8:	f04f 0c00 	mov.w	ip, #0
 80067ac:	9b01      	ldr	r3, [sp, #4]
 80067ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	fa1f f38a 	uxth.w	r3, sl
 80067bc:	4619      	mov	r1, r3
 80067be:	b283      	uxth	r3, r0
 80067c0:	1acb      	subs	r3, r1, r3
 80067c2:	0c00      	lsrs	r0, r0, #16
 80067c4:	4463      	add	r3, ip
 80067c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067d4:	4576      	cmp	r6, lr
 80067d6:	f849 3b04 	str.w	r3, [r9], #4
 80067da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067de:	d8e5      	bhi.n	80067ac <__mdiff+0x88>
 80067e0:	1b33      	subs	r3, r6, r4
 80067e2:	3b15      	subs	r3, #21
 80067e4:	f023 0303 	bic.w	r3, r3, #3
 80067e8:	3415      	adds	r4, #21
 80067ea:	3304      	adds	r3, #4
 80067ec:	42a6      	cmp	r6, r4
 80067ee:	bf38      	it	cc
 80067f0:	2304      	movcc	r3, #4
 80067f2:	441d      	add	r5, r3
 80067f4:	445b      	add	r3, fp
 80067f6:	461e      	mov	r6, r3
 80067f8:	462c      	mov	r4, r5
 80067fa:	4544      	cmp	r4, r8
 80067fc:	d30e      	bcc.n	800681c <__mdiff+0xf8>
 80067fe:	f108 0103 	add.w	r1, r8, #3
 8006802:	1b49      	subs	r1, r1, r5
 8006804:	f021 0103 	bic.w	r1, r1, #3
 8006808:	3d03      	subs	r5, #3
 800680a:	45a8      	cmp	r8, r5
 800680c:	bf38      	it	cc
 800680e:	2100      	movcc	r1, #0
 8006810:	440b      	add	r3, r1
 8006812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006816:	b191      	cbz	r1, 800683e <__mdiff+0x11a>
 8006818:	6117      	str	r7, [r2, #16]
 800681a:	e79d      	b.n	8006758 <__mdiff+0x34>
 800681c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006820:	46e6      	mov	lr, ip
 8006822:	0c08      	lsrs	r0, r1, #16
 8006824:	fa1c fc81 	uxtah	ip, ip, r1
 8006828:	4471      	add	r1, lr
 800682a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800682e:	b289      	uxth	r1, r1
 8006830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006834:	f846 1b04 	str.w	r1, [r6], #4
 8006838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800683c:	e7dd      	b.n	80067fa <__mdiff+0xd6>
 800683e:	3f01      	subs	r7, #1
 8006840:	e7e7      	b.n	8006812 <__mdiff+0xee>
 8006842:	bf00      	nop
 8006844:	08007198 	.word	0x08007198
 8006848:	080071a9 	.word	0x080071a9

0800684c <__d2b>:
 800684c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006850:	460f      	mov	r7, r1
 8006852:	2101      	movs	r1, #1
 8006854:	ec59 8b10 	vmov	r8, r9, d0
 8006858:	4616      	mov	r6, r2
 800685a:	f7ff fcd5 	bl	8006208 <_Balloc>
 800685e:	4604      	mov	r4, r0
 8006860:	b930      	cbnz	r0, 8006870 <__d2b+0x24>
 8006862:	4602      	mov	r2, r0
 8006864:	4b23      	ldr	r3, [pc, #140]	@ (80068f4 <__d2b+0xa8>)
 8006866:	4824      	ldr	r0, [pc, #144]	@ (80068f8 <__d2b+0xac>)
 8006868:	f240 310f 	movw	r1, #783	@ 0x30f
 800686c:	f000 f902 	bl	8006a74 <__assert_func>
 8006870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006878:	b10d      	cbz	r5, 800687e <__d2b+0x32>
 800687a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800687e:	9301      	str	r3, [sp, #4]
 8006880:	f1b8 0300 	subs.w	r3, r8, #0
 8006884:	d023      	beq.n	80068ce <__d2b+0x82>
 8006886:	4668      	mov	r0, sp
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	f7ff fd84 	bl	8006396 <__lo0bits>
 800688e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006892:	b1d0      	cbz	r0, 80068ca <__d2b+0x7e>
 8006894:	f1c0 0320 	rsb	r3, r0, #32
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	430b      	orrs	r3, r1
 800689e:	40c2      	lsrs	r2, r0
 80068a0:	6163      	str	r3, [r4, #20]
 80068a2:	9201      	str	r2, [sp, #4]
 80068a4:	9b01      	ldr	r3, [sp, #4]
 80068a6:	61a3      	str	r3, [r4, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	bf0c      	ite	eq
 80068ac:	2201      	moveq	r2, #1
 80068ae:	2202      	movne	r2, #2
 80068b0:	6122      	str	r2, [r4, #16]
 80068b2:	b1a5      	cbz	r5, 80068de <__d2b+0x92>
 80068b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068b8:	4405      	add	r5, r0
 80068ba:	603d      	str	r5, [r7, #0]
 80068bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068c0:	6030      	str	r0, [r6, #0]
 80068c2:	4620      	mov	r0, r4
 80068c4:	b003      	add	sp, #12
 80068c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068ca:	6161      	str	r1, [r4, #20]
 80068cc:	e7ea      	b.n	80068a4 <__d2b+0x58>
 80068ce:	a801      	add	r0, sp, #4
 80068d0:	f7ff fd61 	bl	8006396 <__lo0bits>
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	6163      	str	r3, [r4, #20]
 80068d8:	3020      	adds	r0, #32
 80068da:	2201      	movs	r2, #1
 80068dc:	e7e8      	b.n	80068b0 <__d2b+0x64>
 80068de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068e6:	6038      	str	r0, [r7, #0]
 80068e8:	6918      	ldr	r0, [r3, #16]
 80068ea:	f7ff fd35 	bl	8006358 <__hi0bits>
 80068ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068f2:	e7e5      	b.n	80068c0 <__d2b+0x74>
 80068f4:	08007198 	.word	0x08007198
 80068f8:	080071a9 	.word	0x080071a9

080068fc <__sflush_r>:
 80068fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006904:	0716      	lsls	r6, r2, #28
 8006906:	4605      	mov	r5, r0
 8006908:	460c      	mov	r4, r1
 800690a:	d454      	bmi.n	80069b6 <__sflush_r+0xba>
 800690c:	684b      	ldr	r3, [r1, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	dc02      	bgt.n	8006918 <__sflush_r+0x1c>
 8006912:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	dd48      	ble.n	80069aa <__sflush_r+0xae>
 8006918:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800691a:	2e00      	cmp	r6, #0
 800691c:	d045      	beq.n	80069aa <__sflush_r+0xae>
 800691e:	2300      	movs	r3, #0
 8006920:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006924:	682f      	ldr	r7, [r5, #0]
 8006926:	6a21      	ldr	r1, [r4, #32]
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	d030      	beq.n	800698e <__sflush_r+0x92>
 800692c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	0759      	lsls	r1, r3, #29
 8006932:	d505      	bpl.n	8006940 <__sflush_r+0x44>
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800693a:	b10b      	cbz	r3, 8006940 <__sflush_r+0x44>
 800693c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	2300      	movs	r3, #0
 8006942:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006944:	6a21      	ldr	r1, [r4, #32]
 8006946:	4628      	mov	r0, r5
 8006948:	47b0      	blx	r6
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	d106      	bne.n	800695e <__sflush_r+0x62>
 8006950:	6829      	ldr	r1, [r5, #0]
 8006952:	291d      	cmp	r1, #29
 8006954:	d82b      	bhi.n	80069ae <__sflush_r+0xb2>
 8006956:	4a2a      	ldr	r2, [pc, #168]	@ (8006a00 <__sflush_r+0x104>)
 8006958:	40ca      	lsrs	r2, r1
 800695a:	07d6      	lsls	r6, r2, #31
 800695c:	d527      	bpl.n	80069ae <__sflush_r+0xb2>
 800695e:	2200      	movs	r2, #0
 8006960:	6062      	str	r2, [r4, #4]
 8006962:	04d9      	lsls	r1, r3, #19
 8006964:	6922      	ldr	r2, [r4, #16]
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	d504      	bpl.n	8006974 <__sflush_r+0x78>
 800696a:	1c42      	adds	r2, r0, #1
 800696c:	d101      	bne.n	8006972 <__sflush_r+0x76>
 800696e:	682b      	ldr	r3, [r5, #0]
 8006970:	b903      	cbnz	r3, 8006974 <__sflush_r+0x78>
 8006972:	6560      	str	r0, [r4, #84]	@ 0x54
 8006974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006976:	602f      	str	r7, [r5, #0]
 8006978:	b1b9      	cbz	r1, 80069aa <__sflush_r+0xae>
 800697a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800697e:	4299      	cmp	r1, r3
 8006980:	d002      	beq.n	8006988 <__sflush_r+0x8c>
 8006982:	4628      	mov	r0, r5
 8006984:	f7ff fb40 	bl	8006008 <_free_r>
 8006988:	2300      	movs	r3, #0
 800698a:	6363      	str	r3, [r4, #52]	@ 0x34
 800698c:	e00d      	b.n	80069aa <__sflush_r+0xae>
 800698e:	2301      	movs	r3, #1
 8006990:	4628      	mov	r0, r5
 8006992:	47b0      	blx	r6
 8006994:	4602      	mov	r2, r0
 8006996:	1c50      	adds	r0, r2, #1
 8006998:	d1c9      	bne.n	800692e <__sflush_r+0x32>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0c6      	beq.n	800692e <__sflush_r+0x32>
 80069a0:	2b1d      	cmp	r3, #29
 80069a2:	d001      	beq.n	80069a8 <__sflush_r+0xac>
 80069a4:	2b16      	cmp	r3, #22
 80069a6:	d11e      	bne.n	80069e6 <__sflush_r+0xea>
 80069a8:	602f      	str	r7, [r5, #0]
 80069aa:	2000      	movs	r0, #0
 80069ac:	e022      	b.n	80069f4 <__sflush_r+0xf8>
 80069ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	e01b      	b.n	80069ee <__sflush_r+0xf2>
 80069b6:	690f      	ldr	r7, [r1, #16]
 80069b8:	2f00      	cmp	r7, #0
 80069ba:	d0f6      	beq.n	80069aa <__sflush_r+0xae>
 80069bc:	0793      	lsls	r3, r2, #30
 80069be:	680e      	ldr	r6, [r1, #0]
 80069c0:	bf08      	it	eq
 80069c2:	694b      	ldreq	r3, [r1, #20]
 80069c4:	600f      	str	r7, [r1, #0]
 80069c6:	bf18      	it	ne
 80069c8:	2300      	movne	r3, #0
 80069ca:	eba6 0807 	sub.w	r8, r6, r7
 80069ce:	608b      	str	r3, [r1, #8]
 80069d0:	f1b8 0f00 	cmp.w	r8, #0
 80069d4:	dde9      	ble.n	80069aa <__sflush_r+0xae>
 80069d6:	6a21      	ldr	r1, [r4, #32]
 80069d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069da:	4643      	mov	r3, r8
 80069dc:	463a      	mov	r2, r7
 80069de:	4628      	mov	r0, r5
 80069e0:	47b0      	blx	r6
 80069e2:	2800      	cmp	r0, #0
 80069e4:	dc08      	bgt.n	80069f8 <__sflush_r+0xfc>
 80069e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ee:	81a3      	strh	r3, [r4, #12]
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	4407      	add	r7, r0
 80069fa:	eba8 0800 	sub.w	r8, r8, r0
 80069fe:	e7e7      	b.n	80069d0 <__sflush_r+0xd4>
 8006a00:	20400001 	.word	0x20400001

08006a04 <_fflush_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	690b      	ldr	r3, [r1, #16]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	b913      	cbnz	r3, 8006a14 <_fflush_r+0x10>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	4628      	mov	r0, r5
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	b118      	cbz	r0, 8006a1e <_fflush_r+0x1a>
 8006a16:	6a03      	ldr	r3, [r0, #32]
 8006a18:	b90b      	cbnz	r3, 8006a1e <_fflush_r+0x1a>
 8006a1a:	f7fe fb95 	bl	8005148 <__sinit>
 8006a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0f3      	beq.n	8006a0e <_fflush_r+0xa>
 8006a26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a28:	07d0      	lsls	r0, r2, #31
 8006a2a:	d404      	bmi.n	8006a36 <_fflush_r+0x32>
 8006a2c:	0599      	lsls	r1, r3, #22
 8006a2e:	d402      	bmi.n	8006a36 <_fflush_r+0x32>
 8006a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a32:	f7fe fc80 	bl	8005336 <__retarget_lock_acquire_recursive>
 8006a36:	4628      	mov	r0, r5
 8006a38:	4621      	mov	r1, r4
 8006a3a:	f7ff ff5f 	bl	80068fc <__sflush_r>
 8006a3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a40:	07da      	lsls	r2, r3, #31
 8006a42:	4605      	mov	r5, r0
 8006a44:	d4e4      	bmi.n	8006a10 <_fflush_r+0xc>
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	059b      	lsls	r3, r3, #22
 8006a4a:	d4e1      	bmi.n	8006a10 <_fflush_r+0xc>
 8006a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a4e:	f7fe fc73 	bl	8005338 <__retarget_lock_release_recursive>
 8006a52:	e7dd      	b.n	8006a10 <_fflush_r+0xc>

08006a54 <_sbrk_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	@ (8006a70 <_sbrk_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fa fdfc 	bl	800165c <_sbrk>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_sbrk_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_sbrk_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20004410 	.word	0x20004410

08006a74 <__assert_func>:
 8006a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a76:	4614      	mov	r4, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <__assert_func+0x2c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4605      	mov	r5, r0
 8006a80:	68d8      	ldr	r0, [r3, #12]
 8006a82:	b14c      	cbz	r4, 8006a98 <__assert_func+0x24>
 8006a84:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <__assert_func+0x30>)
 8006a86:	9100      	str	r1, [sp, #0]
 8006a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a8c:	4906      	ldr	r1, [pc, #24]	@ (8006aa8 <__assert_func+0x34>)
 8006a8e:	462b      	mov	r3, r5
 8006a90:	f000 f842 	bl	8006b18 <fiprintf>
 8006a94:	f000 f852 	bl	8006b3c <abort>
 8006a98:	4b04      	ldr	r3, [pc, #16]	@ (8006aac <__assert_func+0x38>)
 8006a9a:	461c      	mov	r4, r3
 8006a9c:	e7f3      	b.n	8006a86 <__assert_func+0x12>
 8006a9e:	bf00      	nop
 8006aa0:	2000001c 	.word	0x2000001c
 8006aa4:	0800720c 	.word	0x0800720c
 8006aa8:	08007219 	.word	0x08007219
 8006aac:	08007247 	.word	0x08007247

08006ab0 <_calloc_r>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ab6:	b934      	cbnz	r4, 8006ac6 <_calloc_r+0x16>
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7ff fb19 	bl	80060f0 <_malloc_r>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	b928      	cbnz	r0, 8006ace <_calloc_r+0x1e>
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	bd70      	pop	{r4, r5, r6, pc}
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	6002      	str	r2, [r0, #0]
 8006aca:	2600      	movs	r6, #0
 8006acc:	e7f9      	b.n	8006ac2 <_calloc_r+0x12>
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	f7fe fbb2 	bl	800523a <memset>
 8006ad6:	e7f4      	b.n	8006ac2 <_calloc_r+0x12>

08006ad8 <__ascii_mbtowc>:
 8006ad8:	b082      	sub	sp, #8
 8006ada:	b901      	cbnz	r1, 8006ade <__ascii_mbtowc+0x6>
 8006adc:	a901      	add	r1, sp, #4
 8006ade:	b142      	cbz	r2, 8006af2 <__ascii_mbtowc+0x1a>
 8006ae0:	b14b      	cbz	r3, 8006af6 <__ascii_mbtowc+0x1e>
 8006ae2:	7813      	ldrb	r3, [r2, #0]
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	1e10      	subs	r0, r2, #0
 8006aea:	bf18      	it	ne
 8006aec:	2001      	movne	r0, #1
 8006aee:	b002      	add	sp, #8
 8006af0:	4770      	bx	lr
 8006af2:	4610      	mov	r0, r2
 8006af4:	e7fb      	b.n	8006aee <__ascii_mbtowc+0x16>
 8006af6:	f06f 0001 	mvn.w	r0, #1
 8006afa:	e7f8      	b.n	8006aee <__ascii_mbtowc+0x16>

08006afc <__ascii_wctomb>:
 8006afc:	4603      	mov	r3, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	b141      	cbz	r1, 8006b14 <__ascii_wctomb+0x18>
 8006b02:	2aff      	cmp	r2, #255	@ 0xff
 8006b04:	d904      	bls.n	8006b10 <__ascii_wctomb+0x14>
 8006b06:	228a      	movs	r2, #138	@ 0x8a
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	4770      	bx	lr
 8006b10:	700a      	strb	r2, [r1, #0]
 8006b12:	2001      	movs	r0, #1
 8006b14:	4770      	bx	lr
	...

08006b18 <fiprintf>:
 8006b18:	b40e      	push	{r1, r2, r3}
 8006b1a:	b503      	push	{r0, r1, lr}
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <fiprintf+0x20>)
 8006b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b26:	6800      	ldr	r0, [r0, #0]
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	f000 f837 	bl	8006b9c <_vfiprintf_r>
 8006b2e:	b002      	add	sp, #8
 8006b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b34:	b003      	add	sp, #12
 8006b36:	4770      	bx	lr
 8006b38:	2000001c 	.word	0x2000001c

08006b3c <abort>:
 8006b3c:	b508      	push	{r3, lr}
 8006b3e:	2006      	movs	r0, #6
 8006b40:	f000 fa00 	bl	8006f44 <raise>
 8006b44:	2001      	movs	r0, #1
 8006b46:	f7fa fd11 	bl	800156c <_exit>

08006b4a <__sfputc_r>:
 8006b4a:	6893      	ldr	r3, [r2, #8]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	b410      	push	{r4}
 8006b52:	6093      	str	r3, [r2, #8]
 8006b54:	da08      	bge.n	8006b68 <__sfputc_r+0x1e>
 8006b56:	6994      	ldr	r4, [r2, #24]
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	db01      	blt.n	8006b60 <__sfputc_r+0x16>
 8006b5c:	290a      	cmp	r1, #10
 8006b5e:	d103      	bne.n	8006b68 <__sfputc_r+0x1e>
 8006b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b64:	f000 b932 	b.w	8006dcc <__swbuf_r>
 8006b68:	6813      	ldr	r3, [r2, #0]
 8006b6a:	1c58      	adds	r0, r3, #1
 8006b6c:	6010      	str	r0, [r2, #0]
 8006b6e:	7019      	strb	r1, [r3, #0]
 8006b70:	4608      	mov	r0, r1
 8006b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <__sfputs_r>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	4614      	mov	r4, r2
 8006b80:	18d5      	adds	r5, r2, r3
 8006b82:	42ac      	cmp	r4, r5
 8006b84:	d101      	bne.n	8006b8a <__sfputs_r+0x12>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e007      	b.n	8006b9a <__sfputs_r+0x22>
 8006b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff ffda 	bl	8006b4a <__sfputc_r>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d1f3      	bne.n	8006b82 <__sfputs_r+0xa>
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b9c <_vfiprintf_r>:
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	b09d      	sub	sp, #116	@ 0x74
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	4698      	mov	r8, r3
 8006ba8:	4606      	mov	r6, r0
 8006baa:	b118      	cbz	r0, 8006bb4 <_vfiprintf_r+0x18>
 8006bac:	6a03      	ldr	r3, [r0, #32]
 8006bae:	b90b      	cbnz	r3, 8006bb4 <_vfiprintf_r+0x18>
 8006bb0:	f7fe faca 	bl	8005148 <__sinit>
 8006bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bb6:	07d9      	lsls	r1, r3, #31
 8006bb8:	d405      	bmi.n	8006bc6 <_vfiprintf_r+0x2a>
 8006bba:	89ab      	ldrh	r3, [r5, #12]
 8006bbc:	059a      	lsls	r2, r3, #22
 8006bbe:	d402      	bmi.n	8006bc6 <_vfiprintf_r+0x2a>
 8006bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bc2:	f7fe fbb8 	bl	8005336 <__retarget_lock_acquire_recursive>
 8006bc6:	89ab      	ldrh	r3, [r5, #12]
 8006bc8:	071b      	lsls	r3, r3, #28
 8006bca:	d501      	bpl.n	8006bd0 <_vfiprintf_r+0x34>
 8006bcc:	692b      	ldr	r3, [r5, #16]
 8006bce:	b99b      	cbnz	r3, 8006bf8 <_vfiprintf_r+0x5c>
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f000 f938 	bl	8006e48 <__swsetup_r>
 8006bd8:	b170      	cbz	r0, 8006bf8 <_vfiprintf_r+0x5c>
 8006bda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bdc:	07dc      	lsls	r4, r3, #31
 8006bde:	d504      	bpl.n	8006bea <_vfiprintf_r+0x4e>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	b01d      	add	sp, #116	@ 0x74
 8006be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	0598      	lsls	r0, r3, #22
 8006bee:	d4f7      	bmi.n	8006be0 <_vfiprintf_r+0x44>
 8006bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bf2:	f7fe fba1 	bl	8005338 <__retarget_lock_release_recursive>
 8006bf6:	e7f3      	b.n	8006be0 <_vfiprintf_r+0x44>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c06:	2330      	movs	r3, #48	@ 0x30
 8006c08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006db8 <_vfiprintf_r+0x21c>
 8006c0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c10:	f04f 0901 	mov.w	r9, #1
 8006c14:	4623      	mov	r3, r4
 8006c16:	469a      	mov	sl, r3
 8006c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c1c:	b10a      	cbz	r2, 8006c22 <_vfiprintf_r+0x86>
 8006c1e:	2a25      	cmp	r2, #37	@ 0x25
 8006c20:	d1f9      	bne.n	8006c16 <_vfiprintf_r+0x7a>
 8006c22:	ebba 0b04 	subs.w	fp, sl, r4
 8006c26:	d00b      	beq.n	8006c40 <_vfiprintf_r+0xa4>
 8006c28:	465b      	mov	r3, fp
 8006c2a:	4622      	mov	r2, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7ff ffa2 	bl	8006b78 <__sfputs_r>
 8006c34:	3001      	adds	r0, #1
 8006c36:	f000 80a7 	beq.w	8006d88 <_vfiprintf_r+0x1ec>
 8006c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c3c:	445a      	add	r2, fp
 8006c3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c40:	f89a 3000 	ldrb.w	r3, [sl]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 809f 	beq.w	8006d88 <_vfiprintf_r+0x1ec>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c54:	f10a 0a01 	add.w	sl, sl, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	9307      	str	r3, [sp, #28]
 8006c5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c60:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c62:	4654      	mov	r4, sl
 8006c64:	2205      	movs	r2, #5
 8006c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6a:	4853      	ldr	r0, [pc, #332]	@ (8006db8 <_vfiprintf_r+0x21c>)
 8006c6c:	f7f9 fab8 	bl	80001e0 <memchr>
 8006c70:	9a04      	ldr	r2, [sp, #16]
 8006c72:	b9d8      	cbnz	r0, 8006cac <_vfiprintf_r+0x110>
 8006c74:	06d1      	lsls	r1, r2, #27
 8006c76:	bf44      	itt	mi
 8006c78:	2320      	movmi	r3, #32
 8006c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c7e:	0713      	lsls	r3, r2, #28
 8006c80:	bf44      	itt	mi
 8006c82:	232b      	movmi	r3, #43	@ 0x2b
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c88:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c8e:	d015      	beq.n	8006cbc <_vfiprintf_r+0x120>
 8006c90:	9a07      	ldr	r2, [sp, #28]
 8006c92:	4654      	mov	r4, sl
 8006c94:	2000      	movs	r0, #0
 8006c96:	f04f 0c0a 	mov.w	ip, #10
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca0:	3b30      	subs	r3, #48	@ 0x30
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d94b      	bls.n	8006d3e <_vfiprintf_r+0x1a2>
 8006ca6:	b1b0      	cbz	r0, 8006cd6 <_vfiprintf_r+0x13a>
 8006ca8:	9207      	str	r2, [sp, #28]
 8006caa:	e014      	b.n	8006cd6 <_vfiprintf_r+0x13a>
 8006cac:	eba0 0308 	sub.w	r3, r0, r8
 8006cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	46a2      	mov	sl, r4
 8006cba:	e7d2      	b.n	8006c62 <_vfiprintf_r+0xc6>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1d19      	adds	r1, r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	9103      	str	r1, [sp, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfbb      	ittet	lt
 8006cc8:	425b      	neglt	r3, r3
 8006cca:	f042 0202 	orrlt.w	r2, r2, #2
 8006cce:	9307      	strge	r3, [sp, #28]
 8006cd0:	9307      	strlt	r3, [sp, #28]
 8006cd2:	bfb8      	it	lt
 8006cd4:	9204      	strlt	r2, [sp, #16]
 8006cd6:	7823      	ldrb	r3, [r4, #0]
 8006cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cda:	d10a      	bne.n	8006cf2 <_vfiprintf_r+0x156>
 8006cdc:	7863      	ldrb	r3, [r4, #1]
 8006cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce0:	d132      	bne.n	8006d48 <_vfiprintf_r+0x1ac>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	1d1a      	adds	r2, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9203      	str	r2, [sp, #12]
 8006cea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cee:	3402      	adds	r4, #2
 8006cf0:	9305      	str	r3, [sp, #20]
 8006cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006dc8 <_vfiprintf_r+0x22c>
 8006cf6:	7821      	ldrb	r1, [r4, #0]
 8006cf8:	2203      	movs	r2, #3
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa70 	bl	80001e0 <memchr>
 8006d00:	b138      	cbz	r0, 8006d12 <_vfiprintf_r+0x176>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	eba0 000a 	sub.w	r0, r0, sl
 8006d08:	2240      	movs	r2, #64	@ 0x40
 8006d0a:	4082      	lsls	r2, r0
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	3401      	adds	r4, #1
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d16:	4829      	ldr	r0, [pc, #164]	@ (8006dbc <_vfiprintf_r+0x220>)
 8006d18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d1c:	2206      	movs	r2, #6
 8006d1e:	f7f9 fa5f 	bl	80001e0 <memchr>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d03f      	beq.n	8006da6 <_vfiprintf_r+0x20a>
 8006d26:	4b26      	ldr	r3, [pc, #152]	@ (8006dc0 <_vfiprintf_r+0x224>)
 8006d28:	bb1b      	cbnz	r3, 8006d72 <_vfiprintf_r+0x1d6>
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	3308      	adds	r3, #8
 8006d34:	9303      	str	r3, [sp, #12]
 8006d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d38:	443b      	add	r3, r7
 8006d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d3c:	e76a      	b.n	8006c14 <_vfiprintf_r+0x78>
 8006d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d42:	460c      	mov	r4, r1
 8006d44:	2001      	movs	r0, #1
 8006d46:	e7a8      	b.n	8006c9a <_vfiprintf_r+0xfe>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	3401      	adds	r4, #1
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f04f 0c0a 	mov.w	ip, #10
 8006d54:	4620      	mov	r0, r4
 8006d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d5a:	3a30      	subs	r2, #48	@ 0x30
 8006d5c:	2a09      	cmp	r2, #9
 8006d5e:	d903      	bls.n	8006d68 <_vfiprintf_r+0x1cc>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0c6      	beq.n	8006cf2 <_vfiprintf_r+0x156>
 8006d64:	9105      	str	r1, [sp, #20]
 8006d66:	e7c4      	b.n	8006cf2 <_vfiprintf_r+0x156>
 8006d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e7f0      	b.n	8006d54 <_vfiprintf_r+0x1b8>
 8006d72:	ab03      	add	r3, sp, #12
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	462a      	mov	r2, r5
 8006d78:	4b12      	ldr	r3, [pc, #72]	@ (8006dc4 <_vfiprintf_r+0x228>)
 8006d7a:	a904      	add	r1, sp, #16
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7fd fda1 	bl	80048c4 <_printf_float>
 8006d82:	4607      	mov	r7, r0
 8006d84:	1c78      	adds	r0, r7, #1
 8006d86:	d1d6      	bne.n	8006d36 <_vfiprintf_r+0x19a>
 8006d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d8a:	07d9      	lsls	r1, r3, #31
 8006d8c:	d405      	bmi.n	8006d9a <_vfiprintf_r+0x1fe>
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	059a      	lsls	r2, r3, #22
 8006d92:	d402      	bmi.n	8006d9a <_vfiprintf_r+0x1fe>
 8006d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d96:	f7fe facf 	bl	8005338 <__retarget_lock_release_recursive>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	065b      	lsls	r3, r3, #25
 8006d9e:	f53f af1f 	bmi.w	8006be0 <_vfiprintf_r+0x44>
 8006da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da4:	e71e      	b.n	8006be4 <_vfiprintf_r+0x48>
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <_vfiprintf_r+0x228>)
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7fe f81f 	bl	8004df4 <_printf_i>
 8006db6:	e7e4      	b.n	8006d82 <_vfiprintf_r+0x1e6>
 8006db8:	08007248 	.word	0x08007248
 8006dbc:	08007252 	.word	0x08007252
 8006dc0:	080048c5 	.word	0x080048c5
 8006dc4:	08006b79 	.word	0x08006b79
 8006dc8:	0800724e 	.word	0x0800724e

08006dcc <__swbuf_r>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	460e      	mov	r6, r1
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	b118      	cbz	r0, 8006dde <__swbuf_r+0x12>
 8006dd6:	6a03      	ldr	r3, [r0, #32]
 8006dd8:	b90b      	cbnz	r3, 8006dde <__swbuf_r+0x12>
 8006dda:	f7fe f9b5 	bl	8005148 <__sinit>
 8006dde:	69a3      	ldr	r3, [r4, #24]
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	071a      	lsls	r2, r3, #28
 8006de6:	d501      	bpl.n	8006dec <__swbuf_r+0x20>
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	b943      	cbnz	r3, 8006dfe <__swbuf_r+0x32>
 8006dec:	4621      	mov	r1, r4
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f82a 	bl	8006e48 <__swsetup_r>
 8006df4:	b118      	cbz	r0, 8006dfe <__swbuf_r+0x32>
 8006df6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	1a98      	subs	r0, r3, r2
 8006e04:	6963      	ldr	r3, [r4, #20]
 8006e06:	b2f6      	uxtb	r6, r6
 8006e08:	4283      	cmp	r3, r0
 8006e0a:	4637      	mov	r7, r6
 8006e0c:	dc05      	bgt.n	8006e1a <__swbuf_r+0x4e>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff fdf7 	bl	8006a04 <_fflush_r>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d1ed      	bne.n	8006df6 <__swbuf_r+0x2a>
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	60a3      	str	r3, [r4, #8]
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	6022      	str	r2, [r4, #0]
 8006e26:	701e      	strb	r6, [r3, #0]
 8006e28:	6962      	ldr	r2, [r4, #20]
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d004      	beq.n	8006e3a <__swbuf_r+0x6e>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	07db      	lsls	r3, r3, #31
 8006e34:	d5e1      	bpl.n	8006dfa <__swbuf_r+0x2e>
 8006e36:	2e0a      	cmp	r6, #10
 8006e38:	d1df      	bne.n	8006dfa <__swbuf_r+0x2e>
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f7ff fde1 	bl	8006a04 <_fflush_r>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d0d9      	beq.n	8006dfa <__swbuf_r+0x2e>
 8006e46:	e7d6      	b.n	8006df6 <__swbuf_r+0x2a>

08006e48 <__swsetup_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4b29      	ldr	r3, [pc, #164]	@ (8006ef0 <__swsetup_r+0xa8>)
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	460c      	mov	r4, r1
 8006e52:	b118      	cbz	r0, 8006e5c <__swsetup_r+0x14>
 8006e54:	6a03      	ldr	r3, [r0, #32]
 8006e56:	b90b      	cbnz	r3, 8006e5c <__swsetup_r+0x14>
 8006e58:	f7fe f976 	bl	8005148 <__sinit>
 8006e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e60:	0719      	lsls	r1, r3, #28
 8006e62:	d422      	bmi.n	8006eaa <__swsetup_r+0x62>
 8006e64:	06da      	lsls	r2, r3, #27
 8006e66:	d407      	bmi.n	8006e78 <__swsetup_r+0x30>
 8006e68:	2209      	movs	r2, #9
 8006e6a:	602a      	str	r2, [r5, #0]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295
 8006e76:	e033      	b.n	8006ee0 <__swsetup_r+0x98>
 8006e78:	0758      	lsls	r0, r3, #29
 8006e7a:	d512      	bpl.n	8006ea2 <__swsetup_r+0x5a>
 8006e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e7e:	b141      	cbz	r1, 8006e92 <__swsetup_r+0x4a>
 8006e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <__swsetup_r+0x46>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7ff f8bd 	bl	8006008 <_free_r>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e98:	81a3      	strh	r3, [r4, #12]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6063      	str	r3, [r4, #4]
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f043 0308 	orr.w	r3, r3, #8
 8006ea8:	81a3      	strh	r3, [r4, #12]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	b94b      	cbnz	r3, 8006ec2 <__swsetup_r+0x7a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb8:	d003      	beq.n	8006ec2 <__swsetup_r+0x7a>
 8006eba:	4621      	mov	r1, r4
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f000 f883 	bl	8006fc8 <__smakebuf_r>
 8006ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec6:	f013 0201 	ands.w	r2, r3, #1
 8006eca:	d00a      	beq.n	8006ee2 <__swsetup_r+0x9a>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	60a2      	str	r2, [r4, #8]
 8006ed0:	6962      	ldr	r2, [r4, #20]
 8006ed2:	4252      	negs	r2, r2
 8006ed4:	61a2      	str	r2, [r4, #24]
 8006ed6:	6922      	ldr	r2, [r4, #16]
 8006ed8:	b942      	cbnz	r2, 8006eec <__swsetup_r+0xa4>
 8006eda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ede:	d1c5      	bne.n	8006e6c <__swsetup_r+0x24>
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	0799      	lsls	r1, r3, #30
 8006ee4:	bf58      	it	pl
 8006ee6:	6962      	ldrpl	r2, [r4, #20]
 8006ee8:	60a2      	str	r2, [r4, #8]
 8006eea:	e7f4      	b.n	8006ed6 <__swsetup_r+0x8e>
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7f7      	b.n	8006ee0 <__swsetup_r+0x98>
 8006ef0:	2000001c 	.word	0x2000001c

08006ef4 <_raise_r>:
 8006ef4:	291f      	cmp	r1, #31
 8006ef6:	b538      	push	{r3, r4, r5, lr}
 8006ef8:	4605      	mov	r5, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	d904      	bls.n	8006f08 <_raise_r+0x14>
 8006efe:	2316      	movs	r3, #22
 8006f00:	6003      	str	r3, [r0, #0]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f0a:	b112      	cbz	r2, 8006f12 <_raise_r+0x1e>
 8006f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f10:	b94b      	cbnz	r3, 8006f26 <_raise_r+0x32>
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f830 	bl	8006f78 <_getpid_r>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f22:	f000 b817 	b.w	8006f54 <_kill_r>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d00a      	beq.n	8006f40 <_raise_r+0x4c>
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	d103      	bne.n	8006f36 <_raise_r+0x42>
 8006f2e:	2316      	movs	r3, #22
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	2001      	movs	r0, #1
 8006f34:	e7e7      	b.n	8006f06 <_raise_r+0x12>
 8006f36:	2100      	movs	r1, #0
 8006f38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4798      	blx	r3
 8006f40:	2000      	movs	r0, #0
 8006f42:	e7e0      	b.n	8006f06 <_raise_r+0x12>

08006f44 <raise>:
 8006f44:	4b02      	ldr	r3, [pc, #8]	@ (8006f50 <raise+0xc>)
 8006f46:	4601      	mov	r1, r0
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f7ff bfd3 	b.w	8006ef4 <_raise_r>
 8006f4e:	bf00      	nop
 8006f50:	2000001c 	.word	0x2000001c

08006f54 <_kill_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d07      	ldr	r5, [pc, #28]	@ (8006f74 <_kill_r+0x20>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	602b      	str	r3, [r5, #0]
 8006f62:	f7fa faf3 	bl	800154c <_kill>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d102      	bne.n	8006f70 <_kill_r+0x1c>
 8006f6a:	682b      	ldr	r3, [r5, #0]
 8006f6c:	b103      	cbz	r3, 8006f70 <_kill_r+0x1c>
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	bd38      	pop	{r3, r4, r5, pc}
 8006f72:	bf00      	nop
 8006f74:	20004410 	.word	0x20004410

08006f78 <_getpid_r>:
 8006f78:	f7fa bae0 	b.w	800153c <_getpid>

08006f7c <__swhatbuf_r>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	460c      	mov	r4, r1
 8006f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f84:	2900      	cmp	r1, #0
 8006f86:	b096      	sub	sp, #88	@ 0x58
 8006f88:	4615      	mov	r5, r2
 8006f8a:	461e      	mov	r6, r3
 8006f8c:	da0d      	bge.n	8006faa <__swhatbuf_r+0x2e>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f94:	f04f 0100 	mov.w	r1, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2340      	movne	r3, #64	@ 0x40
 8006f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	6031      	str	r1, [r6, #0]
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	b016      	add	sp, #88	@ 0x58
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	466a      	mov	r2, sp
 8006fac:	f000 f848 	bl	8007040 <_fstat_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	dbec      	blt.n	8006f8e <__swhatbuf_r+0x12>
 8006fb4:	9901      	ldr	r1, [sp, #4]
 8006fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fbe:	4259      	negs	r1, r3
 8006fc0:	4159      	adcs	r1, r3
 8006fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fc6:	e7eb      	b.n	8006fa0 <__swhatbuf_r+0x24>

08006fc8 <__smakebuf_r>:
 8006fc8:	898b      	ldrh	r3, [r1, #12]
 8006fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fcc:	079d      	lsls	r5, r3, #30
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	d507      	bpl.n	8006fe4 <__smakebuf_r+0x1c>
 8006fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	2301      	movs	r3, #1
 8006fde:	6163      	str	r3, [r4, #20]
 8006fe0:	b003      	add	sp, #12
 8006fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe4:	ab01      	add	r3, sp, #4
 8006fe6:	466a      	mov	r2, sp
 8006fe8:	f7ff ffc8 	bl	8006f7c <__swhatbuf_r>
 8006fec:	9f00      	ldr	r7, [sp, #0]
 8006fee:	4605      	mov	r5, r0
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff f87c 	bl	80060f0 <_malloc_r>
 8006ff8:	b948      	cbnz	r0, 800700e <__smakebuf_r+0x46>
 8006ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffe:	059a      	lsls	r2, r3, #22
 8007000:	d4ee      	bmi.n	8006fe0 <__smakebuf_r+0x18>
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	f043 0302 	orr.w	r3, r3, #2
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	e7e2      	b.n	8006fd4 <__smakebuf_r+0xc>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	6020      	str	r0, [r4, #0]
 8007012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800701e:	b15b      	cbz	r3, 8007038 <__smakebuf_r+0x70>
 8007020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f81d 	bl	8007064 <_isatty_r>
 800702a:	b128      	cbz	r0, 8007038 <__smakebuf_r+0x70>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	89a3      	ldrh	r3, [r4, #12]
 800703a:	431d      	orrs	r5, r3
 800703c:	81a5      	strh	r5, [r4, #12]
 800703e:	e7cf      	b.n	8006fe0 <__smakebuf_r+0x18>

08007040 <_fstat_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	@ (8007060 <_fstat_r+0x20>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa fadd 	bl	800160c <_fstat>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_fstat_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_fstat_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	20004410 	.word	0x20004410

08007064 <_isatty_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4d06      	ldr	r5, [pc, #24]	@ (8007080 <_isatty_r+0x1c>)
 8007068:	2300      	movs	r3, #0
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fa fadc 	bl	800162c <_isatty>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_isatty_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_isatty_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20004410 	.word	0x20004410

08007084 <_init>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr

08007090 <_fini>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr
