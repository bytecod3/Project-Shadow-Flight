
shadow_flight_mission_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004290  08004290  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004294  08004294  00005294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004298  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b44  20000064  080042fc  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ba8  080042fc  00006ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d5d  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  0000edf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00010b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000711  00000000  00000000  000114c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001742f  00000000  00000000  00011bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b760  00000000  00000000  00029008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919f9  00000000  00000000  00034768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000c61a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c8b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041e4 	.word	0x080041e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080041e4 	.word	0x080041e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 f922 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f804 	bl	8000584 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  mainapp();
 800057c:	f003 f968 	bl	8003850 <mainapp>

  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x10>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f9a6 	bl	80038e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <SystemClock_Config+0xb8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <SystemClock_Config+0xb8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <SystemClock_Config+0xb8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <SystemClock_Config+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <SystemClock_Config+0xbc>)
 80005d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <SystemClock_Config+0xbc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fa23 	bl	8000a44 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000604:	f000 f81e 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fc86 	bl	8000f34 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800062e:	f000 f809 	bl	8000644 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065e:	4a0f      	ldr	r2, [pc, #60]	@ (800069c <HAL_MspInit+0x4c>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000664:	6453      	str	r3, [r2, #68]	@ 0x44
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <HAL_MspInit+0x4c>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067a:	4a08      	ldr	r2, [pc, #32]	@ (800069c <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	@ 0x40
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_MspInit+0x4c>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f003 f8f4 	bl	80038f4 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20010000 	.word	0x20010000
 8000738:	00000400 	.word	0x00000400
 800073c:	20000080 	.word	0x20000080
 8000740:	20002ba8 	.word	0x20002ba8

08000744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SystemInit+0x20>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <SystemInit+0x20>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800076c:	f7ff ffea 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	@ (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	@ (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f003 f8b3 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079a:	f7ff fee9 	bl	8000570 <main>
  bx  lr    
 800079e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007ac:	08004298 	.word	0x08004298
  ldr r2, =_sbss
 80007b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007b4:	20002ba8 	.word	0x20002ba8

080007b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC_IRQHandler>
	...

080007bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <HAL_Init+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <HAL_Init+0x40>)
 80007c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_Init+0x40>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <HAL_Init+0x40>)
 80007d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_Init+0x40>)
 80007de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f8f9 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff ff2e 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023c00 	.word	0x40023c00

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f903 	bl	8000a2a <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f000 f8d9 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <HAL_GetTick+0x14>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000084 	.word	0x20000084

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	@ (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	@ (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	@ 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	@ 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff8e 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff47 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff5c 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff8e 	bl	8000930 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5d 	bl	80008dc <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffb0 	bl	8000998 <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e267      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d075      	beq.n	8000b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a62:	4b88      	ldr	r3, [pc, #544]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 030c 	and.w	r3, r3, #12
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d00c      	beq.n	8000a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a6e:	4b85      	ldr	r3, [pc, #532]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d112      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a7a:	4b82      	ldr	r3, [pc, #520]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a86:	d10b      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a88:	4b7e      	ldr	r3, [pc, #504]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d05b      	beq.n	8000b4c <HAL_RCC_OscConfig+0x108>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d157      	bne.n	8000b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e242      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aa8:	d106      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x74>
 8000aaa:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a75      	ldr	r2, [pc, #468]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e01d      	b.n	8000af4 <HAL_RCC_OscConfig+0xb0>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ac0:	d10c      	bne.n	8000adc <HAL_RCC_OscConfig+0x98>
 8000ac2:	4b70      	ldr	r3, [pc, #448]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b6d      	ldr	r3, [pc, #436]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e00b      	b.n	8000af4 <HAL_RCC_OscConfig+0xb0>
 8000adc:	4b69      	ldr	r3, [pc, #420]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a68      	ldr	r2, [pc, #416]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b66      	ldr	r3, [pc, #408]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a65      	ldr	r2, [pc, #404]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d013      	beq.n	8000b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afc:	f7ff feb0 	bl	8000860 <HAL_GetTick>
 8000b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b02:	e008      	b.n	8000b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b04:	f7ff feac 	bl	8000860 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b64      	cmp	r3, #100	@ 0x64
 8000b10:	d901      	bls.n	8000b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e207      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b16:	4b5b      	ldr	r3, [pc, #364]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f0      	beq.n	8000b04 <HAL_RCC_OscConfig+0xc0>
 8000b22:	e014      	b.n	8000b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b24:	f7ff fe9c 	bl	8000860 <HAL_GetTick>
 8000b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	e008      	b.n	8000b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b2c:	f7ff fe98 	bl	8000860 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b64      	cmp	r3, #100	@ 0x64
 8000b38:	d901      	bls.n	8000b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e1f3      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3e:	4b51      	ldr	r3, [pc, #324]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f0      	bne.n	8000b2c <HAL_RCC_OscConfig+0xe8>
 8000b4a:	e000      	b.n	8000b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d063      	beq.n	8000c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00b      	beq.n	8000b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b66:	4b47      	ldr	r3, [pc, #284]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d11c      	bne.n	8000bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b72:	4b44      	ldr	r3, [pc, #272]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d116      	bne.n	8000bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7e:	4b41      	ldr	r3, [pc, #260]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <HAL_RCC_OscConfig+0x152>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d001      	beq.n	8000b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e1c7      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b96:	4b3b      	ldr	r3, [pc, #236]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4937      	ldr	r1, [pc, #220]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000baa:	e03a      	b.n	8000c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d020      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb4:	4b34      	ldr	r3, [pc, #208]	@ (8000c88 <HAL_RCC_OscConfig+0x244>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bba:	f7ff fe51 	bl	8000860 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fe4d 	bl	8000860 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e1a8      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4925      	ldr	r1, [pc, #148]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e015      	b.n	8000c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_RCC_OscConfig+0x244>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fe30 	bl	8000860 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c04:	f7ff fe2c 	bl	8000860 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e187      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d036      	beq.n	8000c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d016      	beq.n	8000c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_RCC_OscConfig+0x248>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fe10 	bl	8000860 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c44:	f7ff fe0c 	bl	8000860 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e167      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_RCC_OscConfig+0x240>)
 8000c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0x200>
 8000c62:	e01b      	b.n	8000c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_RCC_OscConfig+0x248>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6a:	f7ff fdf9 	bl	8000860 <HAL_GetTick>
 8000c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	e00e      	b.n	8000c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c72:	f7ff fdf5 	bl	8000860 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d907      	bls.n	8000c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e150      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
 8000c84:	40023800 	.word	0x40023800
 8000c88:	42470000 	.word	0x42470000
 8000c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c90:	4b88      	ldr	r3, [pc, #544]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d1ea      	bne.n	8000c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 8097 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cae:	4b81      	ldr	r3, [pc, #516]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10f      	bne.n	8000cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b7a      	ldr	r3, [pc, #488]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	4b77      	ldr	r3, [pc, #476]	@ (8000eb8 <HAL_RCC_OscConfig+0x474>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d118      	bne.n	8000d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce6:	4b74      	ldr	r3, [pc, #464]	@ (8000eb8 <HAL_RCC_OscConfig+0x474>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a73      	ldr	r2, [pc, #460]	@ (8000eb8 <HAL_RCC_OscConfig+0x474>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cf2:	f7ff fdb5 	bl	8000860 <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfa:	f7ff fdb1 	bl	8000860 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e10c      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8000eb8 <HAL_RCC_OscConfig+0x474>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d106      	bne.n	8000d2e <HAL_RCC_OscConfig+0x2ea>
 8000d20:	4b64      	ldr	r3, [pc, #400]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d24:	4a63      	ldr	r2, [pc, #396]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d2c:	e01c      	b.n	8000d68 <HAL_RCC_OscConfig+0x324>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x30c>
 8000d36:	4b5f      	ldr	r3, [pc, #380]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d42:	4b5c      	ldr	r3, [pc, #368]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d46:	4a5b      	ldr	r2, [pc, #364]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0x324>
 8000d50:	4b58      	ldr	r3, [pc, #352]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d54:	4a57      	ldr	r2, [pc, #348]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d56:	f023 0301 	bic.w	r3, r3, #1
 8000d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000d5c:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d60:	4a54      	ldr	r2, [pc, #336]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d62:	f023 0304 	bic.w	r3, r3, #4
 8000d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d015      	beq.n	8000d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d70:	f7ff fd76 	bl	8000860 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d76:	e00a      	b.n	8000d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d78:	f7ff fd72 	bl	8000860 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e0cb      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8e:	4b49      	ldr	r3, [pc, #292]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0ee      	beq.n	8000d78 <HAL_RCC_OscConfig+0x334>
 8000d9a:	e014      	b.n	8000dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9c:	f7ff fd60 	bl	8000860 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000da2:	e00a      	b.n	8000dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da4:	f7ff fd5c 	bl	8000860 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e0b5      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dba:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1ee      	bne.n	8000da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dcc:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a38      	ldr	r2, [pc, #224]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80a1 	beq.w	8000f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000de2:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d05c      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d141      	bne.n	8000e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000df6:	4b31      	ldr	r3, [pc, #196]	@ (8000ebc <HAL_RCC_OscConfig+0x478>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fd30 	bl	8000860 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e04:	f7ff fd2c 	bl	8000860 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e087      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e16:	4b27      	ldr	r3, [pc, #156]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e38:	085b      	lsrs	r3, r3, #1
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e44:	061b      	lsls	r3, r3, #24
 8000e46:	491b      	ldr	r1, [pc, #108]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_RCC_OscConfig+0x478>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff fd05 	bl	8000860 <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e5a:	f7ff fd01 	bl	8000860 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e05c      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x416>
 8000e78:	e054      	b.n	8000f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_RCC_OscConfig+0x478>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fcee 	bl	8000860 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e88:	f7ff fcea 	bl	8000860 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e045      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x444>
 8000ea6:	e03d      	b.n	8000f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e038      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000
 8000ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_RCC_OscConfig+0x4ec>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d028      	beq.n	8000f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d121      	bne.n	8000f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d11a      	bne.n	8000f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d111      	bne.n	8000f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f06:	085b      	lsrs	r3, r3, #1
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d107      	bne.n	8000f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d001      	beq.n	8000f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0cc      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f48:	4b68      	ldr	r3, [pc, #416]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d90c      	bls.n	8000f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f56:	4b65      	ldr	r3, [pc, #404]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f5e:	4b63      	ldr	r3, [pc, #396]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d001      	beq.n	8000f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0b8      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d020      	beq.n	8000fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f88:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4a58      	ldr	r2, [pc, #352]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0308 	and.w	r3, r3, #8
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fa0:	4b53      	ldr	r3, [pc, #332]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a52      	ldr	r2, [pc, #328]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fac:	4b50      	ldr	r3, [pc, #320]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	494d      	ldr	r1, [pc, #308]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d044      	beq.n	8001054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4b47      	ldr	r3, [pc, #284]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d119      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e07f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d107      	bne.n	8001002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e06f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001002:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e067      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f023 0203 	bic.w	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4934      	ldr	r1, [pc, #208]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001024:	f7ff fc1c 	bl	8000860 <HAL_GetTick>
 8001028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102a:	e00a      	b.n	8001042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102c:	f7ff fc18 	bl	8000860 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800103a:	4293      	cmp	r3, r2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e04f      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001042:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 020c 	and.w	r2, r3, #12
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	429a      	cmp	r2, r3
 8001052:	d1eb      	bne.n	800102c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d20c      	bcs.n	800107c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800106a:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_RCC_ClockConfig+0x1b8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d001      	beq.n	800107c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e032      	b.n	80010e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4916      	ldr	r1, [pc, #88]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d009      	beq.n	80010ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ba:	f000 f821 	bl	8001100 <HAL_RCC_GetSysClockFreq>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	490a      	ldr	r1, [pc, #40]	@ (80010f4 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	5ccb      	ldrb	r3, [r1, r3]
 80010ce:	fa22 f303 	lsr.w	r3, r2, r3
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_RCC_ClockConfig+0x1c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fb90 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00
 80010f0:	40023800 	.word	0x40023800
 80010f4:	08004244 	.word	0x08004244
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001104:	b090      	sub	sp, #64	@ 0x40
 8001106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001118:	4b59      	ldr	r3, [pc, #356]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d00d      	beq.n	8001140 <HAL_RCC_GetSysClockFreq+0x40>
 8001124:	2b08      	cmp	r3, #8
 8001126:	f200 80a1 	bhi.w	800126c <HAL_RCC_GetSysClockFreq+0x16c>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <HAL_RCC_GetSysClockFreq+0x34>
 800112e:	2b04      	cmp	r3, #4
 8001130:	d003      	beq.n	800113a <HAL_RCC_GetSysClockFreq+0x3a>
 8001132:	e09b      	b.n	800126c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001134:	4b53      	ldr	r3, [pc, #332]	@ (8001284 <HAL_RCC_GetSysClockFreq+0x184>)
 8001136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001138:	e09b      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800113a:	4b53      	ldr	r3, [pc, #332]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x188>)
 800113c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800113e:	e098      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800114a:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d028      	beq.n	80011a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001156:	4b4a      	ldr	r3, [pc, #296]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	099b      	lsrs	r3, r3, #6
 800115c:	2200      	movs	r2, #0
 800115e:	623b      	str	r3, [r7, #32]
 8001160:	627a      	str	r2, [r7, #36]	@ 0x24
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001168:	2100      	movs	r1, #0
 800116a:	4b47      	ldr	r3, [pc, #284]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x188>)
 800116c:	fb03 f201 	mul.w	r2, r3, r1
 8001170:	2300      	movs	r3, #0
 8001172:	fb00 f303 	mul.w	r3, r0, r3
 8001176:	4413      	add	r3, r2
 8001178:	4a43      	ldr	r2, [pc, #268]	@ (8001288 <HAL_RCC_GetSysClockFreq+0x188>)
 800117a:	fba0 1202 	umull	r1, r2, r0, r2
 800117e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001180:	460a      	mov	r2, r1
 8001182:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001186:	4413      	add	r3, r2
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800118a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118c:	2200      	movs	r2, #0
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	61fa      	str	r2, [r7, #28]
 8001192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800119a:	f7ff f871 	bl	8000280 <__aeabi_uldivmod>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4613      	mov	r3, r2
 80011a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011a6:	e053      	b.n	8001250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	2200      	movs	r2, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	617a      	str	r2, [r7, #20]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80011ba:	f04f 0b00 	mov.w	fp, #0
 80011be:	4652      	mov	r2, sl
 80011c0:	465b      	mov	r3, fp
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	f04f 0100 	mov.w	r1, #0
 80011ca:	0159      	lsls	r1, r3, #5
 80011cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011d0:	0150      	lsls	r0, r2, #5
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	ebb2 080a 	subs.w	r8, r2, sl
 80011da:	eb63 090b 	sbc.w	r9, r3, fp
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80011ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80011ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80011f2:	ebb2 0408 	subs.w	r4, r2, r8
 80011f6:	eb63 0509 	sbc.w	r5, r3, r9
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	00eb      	lsls	r3, r5, #3
 8001204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001208:	00e2      	lsls	r2, r4, #3
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	eb14 030a 	adds.w	r3, r4, sl
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	eb45 030b 	adc.w	r3, r5, fp
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001226:	4629      	mov	r1, r5
 8001228:	028b      	lsls	r3, r1, #10
 800122a:	4621      	mov	r1, r4
 800122c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001230:	4621      	mov	r1, r4
 8001232:	028a      	lsls	r2, r1, #10
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123a:	2200      	movs	r2, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	60fa      	str	r2, [r7, #12]
 8001240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001244:	f7ff f81c 	bl	8000280 <__aeabi_uldivmod>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4613      	mov	r3, r2
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x180>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	0c1b      	lsrs	r3, r3, #16
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	3301      	adds	r3, #1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001260:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800126a:	e002      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_RCC_GetSysClockFreq+0x184>)
 800126e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001274:	4618      	mov	r0, r3
 8001276:	3740      	adds	r7, #64	@ 0x40
 8001278:	46bd      	mov	sp, r7
 800127a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	00f42400 	.word	0x00f42400
 8001288:	017d7840 	.word	0x017d7840

0800128c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f103 0208 	add.w	r2, r3, #8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0208 	add.w	r2, r3, #8
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f103 0208 	add.w	r2, r3, #8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d103      	bne.n	8001306 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e00c      	b.n	8001320 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3308      	adds	r3, #8
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e002      	b.n	8001314 <vListInsert+0x2e>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	d2f6      	bcs.n	800130e <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6892      	ldr	r2, [r2, #8]
 800136e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6852      	ldr	r2, [r2, #4]
 8001378:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	d103      	bne.n	800138c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80013c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013c8:	f383 8811 	msr	BASEPRI, r3
 80013cc:	f3bf 8f6f 	isb	sy
 80013d0:	f3bf 8f4f 	dsb	sy
 80013d4:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d05d      	beq.n	800149e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d059      	beq.n	800149e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f2:	2100      	movs	r1, #0
 80013f4:	fba3 2302 	umull	r2, r3, r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d000      	beq.n	80013fe <xQueueGenericReset+0x52>
 80013fc:	2101      	movs	r1, #1
 80013fe:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001400:	2b00      	cmp	r3, #0
 8001402:	d14c      	bne.n	800149e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8001404:	f001 feb8 	bl	8003178 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001414:	fb01 f303 	mul.w	r3, r1, r3
 8001418:	441a      	add	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2200      	movs	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001434:	3b01      	subs	r3, #1
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	441a      	add	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	22ff      	movs	r2, #255	@ 0xff
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	22ff      	movs	r2, #255	@ 0xff
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d114      	bne.n	8001484 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01a      	beq.n	8001498 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3310      	adds	r3, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f000 ffc4 	bl	80023f4 <xTaskRemoveFromEventList>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d012      	beq.n	8001498 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <xQueueGenericReset+0x120>)
 8001474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	e009      	b.n	8001498 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	3310      	adds	r3, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff feff 	bl	800128c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3324      	adds	r3, #36	@ 0x24
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fefa 	bl	800128c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001498:	f001 fea0 	bl	80031dc <vPortExitCritical>
 800149c:	e001      	b.n	80014a2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <xQueueGenericReset+0x114>
    __asm volatile
 80014a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	60bb      	str	r3, [r7, #8]
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80014c0:	697b      	ldr	r3, [r7, #20]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000ed04 	.word	0xe000ed04

080014d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	4613      	mov	r3, r2
 80014dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02e      	beq.n	8001546 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80014e8:	2100      	movs	r1, #0
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	fba3 2302 	umull	r2, r3, r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d000      	beq.n	80014f8 <xQueueGenericCreate+0x28>
 80014f6:	2101      	movs	r1, #1
 80014f8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d123      	bne.n	8001546 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( uxQueueLength * uxItemSize ) ) )
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001506:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800150a:	d81c      	bhi.n	8001546 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3350      	adds	r3, #80	@ 0x50
 800151a:	4618      	mov	r0, r3
 800151c:	f001 ff0c 	bl	8003338 <pvPortMalloc>
 8001520:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01d      	beq.n	8001564 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3350      	adds	r3, #80	@ 0x50
 8001530:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f815 	bl	800156e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001544:	e00e      	b.n	8001564 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10b      	bne.n	8001564 <xQueueGenericCreate+0x94>
    __asm volatile
 800154c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001550:	f383 8811 	msr	BASEPRI, r3
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	f3bf 8f4f 	dsb	sy
 800155c:	613b      	str	r3, [r7, #16]
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8001564:	69fb      	ldr	r3, [r7, #28]
    }
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e002      	b.n	8001590 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800159c:	2101      	movs	r1, #1
 800159e:	69b8      	ldr	r0, [r7, #24]
 80015a0:	f7ff ff04 	bl	80013ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	78fa      	ldrb	r2, [r7, #3]
 80015a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	@ 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80015c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10b      	bne.n	80015e6 <xQueueReceive+0x32>
    __asm volatile
 80015ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015d2:	f383 8811 	msr	BASEPRI, r3
 80015d6:	f3bf 8f6f 	isb	sy
 80015da:	f3bf 8f4f 	dsb	sy
 80015de:	623b      	str	r3, [r7, #32]
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <xQueueReceive+0x40>
 80015ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <xQueueReceive+0x44>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <xQueueReceive+0x46>
 80015f8:	2300      	movs	r3, #0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10b      	bne.n	8001616 <xQueueReceive+0x62>
    __asm volatile
 80015fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001602:	f383 8811 	msr	BASEPRI, r3
 8001606:	f3bf 8f6f 	isb	sy
 800160a:	f3bf 8f4f 	dsb	sy
 800160e:	61fb      	str	r3, [r7, #28]
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001616:	f001 f903 	bl	8002820 <xTaskGetSchedulerState>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <xQueueReceive+0x72>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <xQueueReceive+0x76>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <xQueueReceive+0x78>
 800162a:	2300      	movs	r3, #0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10b      	bne.n	8001648 <xQueueReceive+0x94>
    __asm volatile
 8001630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001634:	f383 8811 	msr	BASEPRI, r3
 8001638:	f3bf 8f6f 	isb	sy
 800163c:	f3bf 8f4f 	dsb	sy
 8001640:	61bb      	str	r3, [r7, #24]
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001648:	f001 fd96 	bl	8003178 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01f      	beq.n	8001698 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800165c:	f000 f88c 	bl	8001778 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001666:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00f      	beq.n	8001690 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001672:	3310      	adds	r3, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f000 febd 	bl	80023f4 <xTaskRemoveFromEventList>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001680:	4b3c      	ldr	r3, [pc, #240]	@ (8001774 <xQueueReceive+0x1c0>)
 8001682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001690:	f001 fda4 	bl	80031dc <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8001694:	2301      	movs	r3, #1
 8001696:	e069      	b.n	800176c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800169e:	f001 fd9d 	bl	80031dc <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e062      	b.n	800176c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80016a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 ff79 	bl	80025a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016ba:	f001 fd8f 	bl	80031dc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016be:	f000 fb8f 	bl	8001de0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016c2:	f001 fd59 	bl	8003178 <vPortEnterCritical>
 80016c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d103      	bne.n	80016dc <xQueueReceive+0x128>
 80016d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d103      	bne.n	80016f2 <xQueueReceive+0x13e>
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016f2:	f001 fd73 	bl	80031dc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016f6:	1d3a      	adds	r2, r7, #4
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 ff68 	bl	80025d4 <xTaskCheckForTimeOut>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d123      	bne.n	8001752 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800170a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800170c:	f000 f8ac 	bl	8001868 <prvIsQueueEmpty>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d017      	beq.n	8001746 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001718:	3324      	adds	r3, #36	@ 0x24
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fdfc 	bl	800231c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001726:	f000 f84d 	bl	80017c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800172a:	f000 fb67 	bl	8001dfc <xTaskResumeAll>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d189      	bne.n	8001648 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <xQueueReceive+0x1c0>)
 8001736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	e780      	b.n	8001648 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001748:	f000 f83c 	bl	80017c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800174c:	f000 fb56 	bl	8001dfc <xTaskResumeAll>
 8001750:	e77a      	b.n	8001648 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001754:	f000 f836 	bl	80017c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001758:	f000 fb50 	bl	8001dfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800175c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800175e:	f000 f883 	bl	8001868 <prvIsQueueEmpty>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	f43f af6f 	beq.w	8001648 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800176a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3730      	adds	r7, #48	@ 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	e000ed04 	.word	0xe000ed04

08001778 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d018      	beq.n	80017bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	441a      	add	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d303      	bcc.n	80017ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68d9      	ldr	r1, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	461a      	mov	r2, r3
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f002 f8c8 	bl	800394c <memcpy>
    }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80017cc:	f001 fcd4 	bl	8003178 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80017d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017d8:	e011      	b.n	80017fe <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3324      	adds	r3, #36	@ 0x24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fe04 	bl	80023f4 <xTaskRemoveFromEventList>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80017f2:	f000 ff57 	bl	80026a4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	dce9      	bgt.n	80017da <prvUnlockQueue+0x16>
 8001806:	e000      	b.n	800180a <prvUnlockQueue+0x46>
                    break;
 8001808:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	22ff      	movs	r2, #255	@ 0xff
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001812:	f001 fce3 	bl	80031dc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001816:	f001 fcaf 	bl	8003178 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001820:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001822:	e011      	b.n	8001848 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d012      	beq.n	8001852 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3310      	adds	r3, #16
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fddf 	bl	80023f4 <xTaskRemoveFromEventList>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800183c:	f000 ff32 	bl	80026a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	3b01      	subs	r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dce9      	bgt.n	8001824 <prvUnlockQueue+0x60>
 8001850:	e000      	b.n	8001854 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001852:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	22ff      	movs	r2, #255	@ 0xff
 8001858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800185c:	f001 fcbe 	bl	80031dc <vPortExitCritical>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001870:	f001 fc82 	bl	8003178 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800187c:	2301      	movs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e001      	b.n	8001886 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001886:	f001 fca9 	bl	80031dc <vPortExitCritical>

    return xReturn;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10b      	bne.n	80018c0 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80018a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ac:	f383 8811 	msr	BASEPRI, r3
 80018b0:	f3bf 8f6f 	isb	sy
 80018b4:	f3bf 8f4f 	dsb	sy
 80018b8:	60fb      	str	r3, [r7, #12]
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d024      	beq.n	8001910 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e01e      	b.n	800190a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80018cc:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <vQueueAddToRegistry+0x9c>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d105      	bne.n	80018e8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <vQueueAddToRegistry+0x9c>)
 80018e2:	4413      	add	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
                    break;
 80018e6:	e013      	b.n	8001910 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <vQueueAddToRegistry+0x70>
 80018ee:	4a10      	ldr	r2, [pc, #64]	@ (8001930 <vQueueAddToRegistry+0x9c>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d104      	bne.n	8001904 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001930 <vQueueAddToRegistry+0x9c>)
 8001900:	4413      	add	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d9dd      	bls.n	80018cc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001922:	bf00      	nop
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000088 	.word	0x20000088

08001934 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001944:	f001 fc18 	bl	8003178 <vPortEnterCritical>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800194e:	b25b      	sxtb	r3, r3
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d103      	bne.n	800195e <vQueueWaitForMessageRestricted+0x2a>
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001964:	b25b      	sxtb	r3, r3
 8001966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196a:	d103      	bne.n	8001974 <vQueueWaitForMessageRestricted+0x40>
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001974:	f001 fc32 	bl	80031dc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3324      	adds	r3, #36	@ 0x24
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fced 	bl	8002368 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff18 	bl	80017c4 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 fcc2 	bl	8003338 <pvPortMalloc>
 80019b4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80019bc:	2058      	movs	r0, #88	@ 0x58
 80019be:	f001 fcbb 	bl	8003338 <pvPortMalloc>
 80019c2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80019ca:	2258      	movs	r2, #88	@ 0x58
 80019cc:	2100      	movs	r1, #0
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f001 ff88 	bl	80038e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019da:	e005      	b.n	80019e8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80019dc:	6938      	ldr	r0, [r7, #16]
 80019de:	f001 fde3 	bl	80035a8 <vPortFree>
 80019e2:	e001      	b.n	80019e8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019ee:	2300      	movs	r3, #0
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f828 	bl	8001a5a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001a0a:	697b      	ldr	r3, [r7, #20]
    }
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff ffb3 	bl	800199c <prvCreateTask>
 8001a36:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001a3e:	6938      	ldr	r0, [r7, #16]
 8001a40:	f000 f89c 	bl	8001b7c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a44:	2301      	movs	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e002      	b.n	8001a50 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001a50:	697b      	ldr	r3, [r7, #20]
    }
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b088      	sub	sp, #32
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	21a5      	movs	r1, #165	@ 0xa5
 8001a74:	f001 ff36 	bl	80038e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a82:	3b01      	subs	r3, #1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f023 0307 	bic.w	r3, r3, #7
 8001a90:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00b      	beq.n	8001ab4 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	617b      	str	r3, [r7, #20]
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01e      	beq.n	8001af8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e012      	b.n	8001ae6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	7819      	ldrb	r1, [r3, #0]
 8001ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	3334      	adds	r3, #52	@ 0x34
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d9e9      	bls.n	8001ac0 <prvInitialiseNewTask+0x66>
 8001aec:	e000      	b.n	8001af0 <prvInitialiseNewTask+0x96>
            {
                break;
 8001aee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d90b      	bls.n	8001b16 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	613b      	str	r3, [r7, #16]
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	e7fd      	b.n	8001b12 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d901      	bls.n	8001b20 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b2a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbcb 	bl	80012cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b38:	3318      	adds	r3, #24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fbc6 	bl	80012cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b44:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b48:	f1c3 0205 	rsb	r2, r3, #5
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	69b8      	ldr	r0, [r7, #24]
 8001b5c:	f001 f992 	bl	8002e84 <pxPortInitialiseStack>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b64:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b72:	bf00      	nop
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001b84:	f001 faf8 	bl	8003178 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001b88:	4b41      	ldr	r3, [pc, #260]	@ (8001c90 <prvAddNewTaskToReadyList+0x114>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a40      	ldr	r2, [pc, #256]	@ (8001c90 <prvAddNewTaskToReadyList+0x114>)
 8001b90:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001b92:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <prvAddNewTaskToReadyList+0x118>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c94 <prvAddNewTaskToReadyList+0x118>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8001c90 <prvAddNewTaskToReadyList+0x114>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d110      	bne.n	8001bca <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001ba8:	f000 fda0 	bl	80026ec <prvInitialiseTaskLists>
 8001bac:	e00d      	b.n	8001bca <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8001bae:	4b3a      	ldr	r3, [pc, #232]	@ (8001c98 <prvAddNewTaskToReadyList+0x11c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bb6:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <prvAddNewTaskToReadyList+0x118>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d802      	bhi.n	8001bca <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001bc4:	4a33      	ldr	r2, [pc, #204]	@ (8001c94 <prvAddNewTaskToReadyList+0x118>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <prvAddNewTaskToReadyList+0x120>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	4a32      	ldr	r2, [pc, #200]	@ (8001c9c <prvAddNewTaskToReadyList+0x120>)
 8001bd2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <prvAddNewTaskToReadyList+0x120>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca0 <prvAddNewTaskToReadyList+0x124>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca0 <prvAddNewTaskToReadyList+0x124>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf2:	492c      	ldr	r1, [pc, #176]	@ (8001ca4 <prvAddNewTaskToReadyList+0x128>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	3204      	adds	r2, #4
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1d1a      	adds	r2, r3, #4
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <prvAddNewTaskToReadyList+0x128>)
 8001c32:	441a      	add	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3c:	4919      	ldr	r1, [pc, #100]	@ (8001ca4 <prvAddNewTaskToReadyList+0x128>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c4e:	1c59      	adds	r1, r3, #1
 8001c50:	4814      	ldr	r0, [pc, #80]	@ (8001ca4 <prvAddNewTaskToReadyList+0x128>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4403      	add	r3, r0
 8001c5c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001c5e:	f001 fabd 	bl	80031dc <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <prvAddNewTaskToReadyList+0x11c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <prvAddNewTaskToReadyList+0x118>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d207      	bcs.n	8001c88 <prvAddNewTaskToReadyList+0x10c>
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <prvAddNewTaskToReadyList+0x12c>)
 8001c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	200001a0 	.word	0x200001a0
 8001c94:	200000c8 	.word	0x200000c8
 8001c98:	200001ac 	.word	0x200001ac
 8001c9c:	200001bc 	.word	0x200001bc
 8001ca0:	200001a8 	.word	0x200001a8
 8001ca4:	200000cc 	.word	0x200000cc
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e011      	b.n	8001cf2 <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <prvCreateIdleTasks+0xa0>)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	7819      	ldrb	r1, [r3, #0]
 8001cd6:	1d3a      	adds	r2, r7, #4
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	4413      	add	r3, r2
 8001cdc:	460a      	mov	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d9ea      	bls.n	8001cce <prvCreateIdleTasks+0x22>
 8001cf8:	e000      	b.n	8001cfc <prvCreateIdleTasks+0x50>
        {
            break;
 8001cfa:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8001cfc:	1d3a      	adds	r2, r7, #4
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4413      	add	r3, r2
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e015      	b.n	8001d38 <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <prvCreateIdleTasks+0xa4>)
 8001d0e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <prvCreateIdleTasks+0xa8>)
 8001d16:	4413      	add	r3, r2
 8001d18:	1d39      	adds	r1, r7, #4
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	2282      	movs	r2, #130	@ 0x82
 8001d24:	6938      	ldr	r0, [r7, #16]
 8001d26:	f7ff fe75 	bl	8001a14 <xTaskCreate>
 8001d2a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d106      	bne.n	8001d40 <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dde6      	ble.n	8001d0c <prvCreateIdleTasks+0x60>
 8001d3e:	e000      	b.n	8001d42 <prvCreateIdleTasks+0x96>
        {
            break;
 8001d40:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001d42:	69fb      	ldr	r3, [r7, #28]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	080041fc 	.word	0x080041fc
 8001d50:	080026bd 	.word	0x080026bd
 8001d54:	200001c4 	.word	0x200001c4

08001d58 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001d5e:	f7ff ffa5 	bl	8001cac <prvCreateIdleTasks>
 8001d62:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8001d6a:	f000 fdf9 	bl	8002960 <xTimerCreateTimerTask>
 8001d6e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d116      	bne.n	8001da4 <vTaskStartScheduler+0x4c>
    __asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	60bb      	str	r3, [r7, #8]
}
 8001d88:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <vTaskStartScheduler+0x78>)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <vTaskStartScheduler+0x7c>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <vTaskStartScheduler+0x80>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001d9e:	f001 f8fb 	bl	8002f98 <xPortStartScheduler>
 8001da2:	e00f      	b.n	8001dc4 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d10b      	bne.n	8001dc4 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	607b      	str	r3, [r7, #4]
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <vTaskStartScheduler+0x84>)
 8001dc6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200001c0 	.word	0x200001c0
 8001dd4:	200001ac 	.word	0x200001ac
 8001dd8:	200001a4 	.word	0x200001a4
 8001ddc:	2000000c 	.word	0x2000000c

08001de0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <vTaskSuspendAll+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <vTaskSuspendAll+0x18>)
 8001dec:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	200001c8 	.word	0x200001c8

08001dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001e0a:	f001 f9b5 	bl	8003178 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8001e12:	4b75      	ldr	r3, [pc, #468]	@ (8001fe8 <xTaskResumeAll+0x1ec>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10b      	bne.n	8001e32 <xTaskResumeAll+0x36>
    __asm volatile
 8001e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	603b      	str	r3, [r7, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	e7fd      	b.n	8001e2e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001e32:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe8 <xTaskResumeAll+0x1ec>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe8 <xTaskResumeAll+0x1ec>)
 8001e3a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <xTaskResumeAll+0x1ec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 80ca 	bne.w	8001fda <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e46:	4b69      	ldr	r3, [pc, #420]	@ (8001fec <xTaskResumeAll+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80c5 	beq.w	8001fda <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e50:	e08e      	b.n	8001f70 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e52:	4b67      	ldr	r3, [pc, #412]	@ (8001ff0 <xTaskResumeAll+0x1f4>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	6a12      	ldr	r2, [r2, #32]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	69d2      	ldr	r2, [r2, #28]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d103      	bne.n	8001e88 <xTaskResumeAll+0x8c>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	6892      	ldr	r2, [r2, #8]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d103      	bne.n	8001ec6 <xTaskResumeAll+0xca>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	2201      	movs	r2, #1
 8001edc:	409a      	lsls	r2, r3
 8001ede:	4b45      	ldr	r3, [pc, #276]	@ (8001ff4 <xTaskResumeAll+0x1f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	4a43      	ldr	r2, [pc, #268]	@ (8001ff4 <xTaskResumeAll+0x1f8>)
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eec:	4942      	ldr	r1, [pc, #264]	@ (8001ff8 <xTaskResumeAll+0x1fc>)
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	3204      	adds	r2, #4
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	1d1a      	adds	r2, r3, #4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4a33      	ldr	r2, [pc, #204]	@ (8001ff8 <xTaskResumeAll+0x1fc>)
 8001f2c:	441a      	add	r2, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f36:	4930      	ldr	r1, [pc, #192]	@ (8001ff8 <xTaskResumeAll+0x1fc>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f48:	1c59      	adds	r1, r3, #1
 8001f4a:	482b      	ldr	r0, [pc, #172]	@ (8001ff8 <xTaskResumeAll+0x1fc>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4403      	add	r3, r0
 8001f56:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <xTaskResumeAll+0x200>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d904      	bls.n	8001f70 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001f66:	4a26      	ldr	r2, [pc, #152]	@ (8002000 <xTaskResumeAll+0x204>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <xTaskResumeAll+0x1f4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f47f af6c 	bne.w	8001e52 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001f80:	f000 fc32 	bl	80027e8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f84:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <xTaskResumeAll+0x208>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001f90:	f000 f84c 	bl	800202c <xTaskIncrementTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001f9a:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <xTaskResumeAll+0x204>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ef      	bne.n	8001f90 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <xTaskResumeAll+0x208>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <xTaskResumeAll+0x204>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <xTaskResumeAll+0x200>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <xTaskResumeAll+0x20c>)
 8001fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001fda:	f001 f8ff 	bl	80031dc <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001fde:	69bb      	ldr	r3, [r7, #24]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200001c8 	.word	0x200001c8
 8001fec:	200001a0 	.word	0x200001a0
 8001ff0:	20000160 	.word	0x20000160
 8001ff4:	200001a8 	.word	0x200001a8
 8001ff8:	200000cc 	.word	0x200000cc
 8001ffc:	200000c8 	.word	0x200000c8
 8002000:	200001b4 	.word	0x200001b4
 8002004:	200001b0 	.word	0x200001b0
 8002008:	e000ed04 	.word	0xe000ed04

0800200c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <xTaskGetTickCount+0x1c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200001a4 	.word	0x200001a4

0800202c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002036:	4b7f      	ldr	r3, [pc, #508]	@ (8002234 <xTaskIncrementTick+0x208>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 80ef 	bne.w	800221e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002040:	4b7d      	ldr	r3, [pc, #500]	@ (8002238 <xTaskIncrementTick+0x20c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002048:	4a7b      	ldr	r2, [pc, #492]	@ (8002238 <xTaskIncrementTick+0x20c>)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d121      	bne.n	8002098 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002054:	4b79      	ldr	r3, [pc, #484]	@ (800223c <xTaskIncrementTick+0x210>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <xTaskIncrementTick+0x4a>
    __asm volatile
 800205e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	607b      	str	r3, [r7, #4]
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	e7fd      	b.n	8002072 <xTaskIncrementTick+0x46>
 8002076:	4b71      	ldr	r3, [pc, #452]	@ (800223c <xTaskIncrementTick+0x210>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	4b70      	ldr	r3, [pc, #448]	@ (8002240 <xTaskIncrementTick+0x214>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <xTaskIncrementTick+0x210>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <xTaskIncrementTick+0x214>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6e      	ldr	r3, [pc, #440]	@ (8002244 <xTaskIncrementTick+0x218>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a6c      	ldr	r2, [pc, #432]	@ (8002244 <xTaskIncrementTick+0x218>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	f000 fba8 	bl	80027e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002098:	4b6b      	ldr	r3, [pc, #428]	@ (8002248 <xTaskIncrementTick+0x21c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	429a      	cmp	r2, r3
 80020a0:	f0c0 80a8 	bcc.w	80021f4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020a4:	4b65      	ldr	r3, [pc, #404]	@ (800223c <xTaskIncrementTick+0x210>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d104      	bne.n	80020b8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80020ae:	4b66      	ldr	r3, [pc, #408]	@ (8002248 <xTaskIncrementTick+0x21c>)
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	601a      	str	r2, [r3, #0]
                    break;
 80020b6:	e09d      	b.n	80021f4 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020b8:	4b60      	ldr	r3, [pc, #384]	@ (800223c <xTaskIncrementTick+0x210>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80020c8:	6a3a      	ldr	r2, [r7, #32]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d203      	bcs.n	80020d8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80020d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002248 <xTaskIncrementTick+0x21c>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	6013      	str	r3, [r2, #0]
                        break;
 80020d6:	e08d      	b.n	80021f4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	68d2      	ldr	r2, [r2, #12]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3304      	adds	r3, #4
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d103      	bne.n	8002106 <xTaskIncrementTick+0xda>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01e      	beq.n	800215c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	6a12      	ldr	r2, [r2, #32]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	69d2      	ldr	r2, [r2, #28]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	3318      	adds	r3, #24
 8002140:	429a      	cmp	r2, r3
 8002142:	d103      	bne.n	800214c <xTaskIncrementTick+0x120>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2200      	movs	r2, #0
 8002150:	629a      	str	r2, [r3, #40]	@ 0x28
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <xTaskIncrementTick+0x220>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	4a38      	ldr	r2, [pc, #224]	@ (800224c <xTaskIncrementTick+0x220>)
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002172:	4937      	ldr	r1, [pc, #220]	@ (8002250 <xTaskIncrementTick+0x224>)
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3304      	adds	r3, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	3204      	adds	r2, #4
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1d1a      	adds	r2, r3, #4
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <xTaskIncrementTick+0x224>)
 80021b2:	441a      	add	r2, r3
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021bc:	4924      	ldr	r1, [pc, #144]	@ (8002250 <xTaskIncrementTick+0x224>)
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	481f      	ldr	r0, [pc, #124]	@ (8002250 <xTaskIncrementTick+0x224>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4403      	add	r3, r0
 80021dc:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <xTaskIncrementTick+0x228>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f67f af5b 	bls.w	80020a4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021f2:	e757      	b.n	80020a4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80021f4:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <xTaskIncrementTick+0x228>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021fa:	4915      	ldr	r1, [pc, #84]	@ (8002250 <xTaskIncrementTick+0x224>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d901      	bls.n	8002210 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <xTaskIncrementTick+0x22c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	e004      	b.n	8002228 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800221e:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <xTaskIncrementTick+0x230>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <xTaskIncrementTick+0x230>)
 8002226:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800222a:	4618      	mov	r0, r3
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200001c8 	.word	0x200001c8
 8002238:	200001a4 	.word	0x200001a4
 800223c:	20000158 	.word	0x20000158
 8002240:	2000015c 	.word	0x2000015c
 8002244:	200001b8 	.word	0x200001b8
 8002248:	200001c0 	.word	0x200001c0
 800224c:	200001a8 	.word	0x200001a8
 8002250:	200000cc 	.word	0x200000cc
 8002254:	200000c8 	.word	0x200000c8
 8002258:	200001b4 	.word	0x200001b4
 800225c:	200001b0 	.word	0x200001b0

08002260 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002266:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <vTaskSwitchContext+0xa8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800226e:	4b27      	ldr	r3, [pc, #156]	@ (800230c <vTaskSwitchContext+0xac>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002274:	e041      	b.n	80022fa <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8002276:	4b25      	ldr	r3, [pc, #148]	@ (800230c <vTaskSwitchContext+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800227c:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <vTaskSwitchContext+0xb0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	fab3 f383 	clz	r3, r3
 8002288:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	f1c3 031f 	rsb	r3, r3, #31
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <vTaskSwitchContext+0xb4>)
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10b      	bne.n	80022be <vTaskSwitchContext+0x5e>
    __asm volatile
 80022a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	607b      	str	r3, [r7, #4]
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	e7fd      	b.n	80022ba <vTaskSwitchContext+0x5a>
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4a12      	ldr	r2, [pc, #72]	@ (8002314 <vTaskSwitchContext+0xb4>)
 80022ca:	4413      	add	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	3308      	adds	r3, #8
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d103      	bne.n	80022ec <vTaskSwitchContext+0x8c>
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <vTaskSwitchContext+0xb8>)
 80022f4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <vTaskSwitchContext+0xb8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
    }
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200001c8 	.word	0x200001c8
 800230c:	200001b4 	.word	0x200001b4
 8002310:	200001a8 	.word	0x200001a8
 8002314:	200000cc 	.word	0x200000cc
 8002318:	200000c8 	.word	0x200000c8

0800231c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	60fb      	str	r3, [r7, #12]
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <vTaskPlaceOnEventList+0x48>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3318      	adds	r3, #24
 800234a:	4619      	mov	r1, r3
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe ffca 	bl	80012e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002352:	2101      	movs	r1, #1
 8002354:	6838      	ldr	r0, [r7, #0]
 8002356:	f000 fa81 	bl	800285c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200000c8 	.word	0x200000c8

08002368 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	613b      	str	r3, [r7, #16]
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <vTaskPlaceOnEventListRestricted+0x88>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	6892      	ldr	r2, [r2, #8]
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	3218      	adds	r2, #24
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f103 0218 	add.w	r2, r3, #24
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <vTaskPlaceOnEventListRestricted+0x88>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	f000 fa3a 	bl	800285c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80023e8:	bf00      	nop
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000c8 	.word	0x200000c8

080023f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	@ 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800240a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	60fb      	str	r3, [r7, #12]
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	e7fd      	b.n	800241e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	6a3a      	ldr	r2, [r7, #32]
 800242e:	6a12      	ldr	r2, [r2, #32]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	6a3a      	ldr	r2, [r7, #32]
 8002438:	69d2      	ldr	r2, [r2, #28]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	3318      	adds	r3, #24
 8002444:	429a      	cmp	r2, r3
 8002446:	d103      	bne.n	8002450 <xTaskRemoveFromEventList+0x5c>
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002460:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <xTaskRemoveFromEventList+0x19c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d160      	bne.n	800252a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	6892      	ldr	r2, [r2, #8]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	3304      	adds	r3, #4
 800248a:	429a      	cmp	r2, r3
 800248c:	d103      	bne.n	8002496 <xTaskRemoveFromEventList+0xa2>
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	2201      	movs	r2, #1
 80024ac:	409a      	lsls	r2, r3
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <xTaskRemoveFromEventList+0x1a0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	4a37      	ldr	r2, [pc, #220]	@ (8002594 <xTaskRemoveFromEventList+0x1a0>)
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024bc:	4936      	ldr	r1, [pc, #216]	@ (8002598 <xTaskRemoveFromEventList+0x1a4>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	3204      	adds	r2, #4
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	1d1a      	adds	r2, r3, #4
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <xTaskRemoveFromEventList+0x1a4>)
 80024fc:	441a      	add	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002506:	4924      	ldr	r1, [pc, #144]	@ (8002598 <xTaskRemoveFromEventList+0x1a4>)
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002518:	1c59      	adds	r1, r3, #1
 800251a:	481f      	ldr	r0, [pc, #124]	@ (8002598 <xTaskRemoveFromEventList+0x1a4>)
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4403      	add	r3, r0
 8002526:	6019      	str	r1, [r3, #0]
 8002528:	e01b      	b.n	8002562 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <xTaskRemoveFromEventList+0x1a8>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	61da      	str	r2, [r3, #28]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	621a      	str	r2, [r3, #32]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	3218      	adds	r2, #24
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f103 0218 	add.w	r2, r3, #24
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <xTaskRemoveFromEventList+0x1a8>)
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <xTaskRemoveFromEventList+0x1a8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <xTaskRemoveFromEventList+0x1a8>)
 8002560:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <xTaskRemoveFromEventList+0x1ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d905      	bls.n	800257c <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8002570:	2301      	movs	r3, #1
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <xTaskRemoveFromEventList+0x1b0>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e001      	b.n	8002580 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002582:	4618      	mov	r0, r3
 8002584:	372c      	adds	r7, #44	@ 0x2c
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	200001c8 	.word	0x200001c8
 8002594:	200001a8 	.word	0x200001a8
 8002598:	200000cc 	.word	0x200000cc
 800259c:	20000160 	.word	0x20000160
 80025a0:	200000c8 	.word	0x200000c8
 80025a4:	200001b4 	.word	0x200001b4

080025a8 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <vTaskInternalSetTimeOutState+0x24>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <vTaskInternalSetTimeOutState+0x28>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	200001b8 	.word	0x200001b8
 80025d0:	200001a4 	.word	0x200001a4

080025d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	613b      	str	r3, [r7, #16]
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	60fb      	str	r3, [r7, #12]
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	e7fd      	b.n	8002616 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800261a:	f000 fdad 	bl	8003178 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800261e:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <xTaskCheckForTimeOut+0xc8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002636:	d102      	bne.n	800263e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e026      	b.n	800268c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <xTaskCheckForTimeOut+0xcc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d00a      	beq.n	8002660 <xTaskCheckForTimeOut+0x8c>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d305      	bcc.n	8002660 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002654:	2301      	movs	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e015      	b.n	800268c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20b      	bcs.n	8002682 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad2      	subs	r2, r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff96 	bl	80025a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e004      	b.n	800268c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800268c:	f000 fda6 	bl	80031dc <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002690:	69fb      	ldr	r3, [r7, #28]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200001a4 	.word	0x200001a4
 80026a0:	200001b8 	.word	0x200001b8

080026a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <vTaskMissedYield+0x14>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	200001b4 	.word	0x200001b4

080026bc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026c4:	f000 f852 	bl	800276c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <prvIdleTask+0x28>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d9f9      	bls.n	80026c4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <prvIdleTask+0x2c>)
 80026d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026e0:	e7f0      	b.n	80026c4 <prvIdleTask+0x8>
 80026e2:	bf00      	nop
 80026e4:	200000cc 	.word	0x200000cc
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e00c      	b.n	8002712 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4a12      	ldr	r2, [pc, #72]	@ (800274c <prvInitialiseTaskLists+0x60>)
 8002704:	4413      	add	r3, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fdc0 	bl	800128c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3301      	adds	r3, #1
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d9ef      	bls.n	80026f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002718:	480d      	ldr	r0, [pc, #52]	@ (8002750 <prvInitialiseTaskLists+0x64>)
 800271a:	f7fe fdb7 	bl	800128c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800271e:	480d      	ldr	r0, [pc, #52]	@ (8002754 <prvInitialiseTaskLists+0x68>)
 8002720:	f7fe fdb4 	bl	800128c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <prvInitialiseTaskLists+0x6c>)
 8002726:	f7fe fdb1 	bl	800128c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800272a:	480c      	ldr	r0, [pc, #48]	@ (800275c <prvInitialiseTaskLists+0x70>)
 800272c:	f7fe fdae 	bl	800128c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002730:	480b      	ldr	r0, [pc, #44]	@ (8002760 <prvInitialiseTaskLists+0x74>)
 8002732:	f7fe fdab 	bl	800128c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002736:	4b0b      	ldr	r3, [pc, #44]	@ (8002764 <prvInitialiseTaskLists+0x78>)
 8002738:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <prvInitialiseTaskLists+0x64>)
 800273a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <prvInitialiseTaskLists+0x7c>)
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <prvInitialiseTaskLists+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200000cc 	.word	0x200000cc
 8002750:	20000130 	.word	0x20000130
 8002754:	20000144 	.word	0x20000144
 8002758:	20000160 	.word	0x20000160
 800275c:	20000174 	.word	0x20000174
 8002760:	2000018c 	.word	0x2000018c
 8002764:	20000158 	.word	0x20000158
 8002768:	2000015c 	.word	0x2000015c

0800276c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002772:	e019      	b.n	80027a8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002774:	f000 fd00 	bl	8003178 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002778:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <prvCheckTasksWaitingTermination+0x50>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fde7 	bl	8001358 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <prvCheckTasksWaitingTermination+0x54>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <prvCheckTasksWaitingTermination+0x54>)
 8002792:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <prvCheckTasksWaitingTermination+0x58>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3b01      	subs	r3, #1
 800279a:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <prvCheckTasksWaitingTermination+0x58>)
 800279c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800279e:	f000 fd1d 	bl	80031dc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f810 	bl	80027c8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <prvCheckTasksWaitingTermination+0x58>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e1      	bne.n	8002774 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000174 	.word	0x20000174
 80027c0:	200001a0 	.word	0x200001a0
 80027c4:	20000188 	.word	0x20000188

080027c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fee7 	bl	80035a8 <vPortFree>
            vPortFree( pxTCB );
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fee4 	bl	80035a8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <prvResetNextTaskUnblockTime+0x30>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <prvResetNextTaskUnblockTime+0x34>)
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027fe:	e005      	b.n	800280c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <prvResetNextTaskUnblockTime+0x30>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a04      	ldr	r2, [pc, #16]	@ (800281c <prvResetNextTaskUnblockTime+0x34>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000158 	.word	0x20000158
 800281c:	200001c0 	.word	0x200001c0

08002820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <xTaskGetSchedulerState+0x34>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800282e:	2301      	movs	r3, #1
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	e008      	b.n	8002846 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <xTaskGetSchedulerState+0x38>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800283c:	2302      	movs	r3, #2
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e001      	b.n	8002846 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8002846:	687b      	ldr	r3, [r7, #4]
    }
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	200001ac 	.word	0x200001ac
 8002858:	200001c8 	.word	0x200001c8

0800285c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800286c:	4b36      	ldr	r3, [pc, #216]	@ (8002948 <prvAddCurrentTaskToDelayedList+0xec>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002872:	4b36      	ldr	r3, [pc, #216]	@ (800294c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3304      	adds	r3, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fd6a 	bl	8001358 <uxListRemove>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800288a:	4b31      	ldr	r3, [pc, #196]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	2201      	movs	r2, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <prvAddCurrentTaskToDelayedList+0xf8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4013      	ands	r3, r2
 800289e:	4a2d      	ldr	r2, [pc, #180]	@ (8002954 <prvAddCurrentTaskToDelayedList+0xf8>)
 80028a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d124      	bne.n	80028f4 <prvAddCurrentTaskToDelayedList+0x98>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028b0:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b26      	ldr	r3, [pc, #152]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	4b24      	ldr	r3, [pc, #144]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	6892      	ldr	r2, [r2, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	3204      	adds	r2, #4
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1d1a      	adds	r2, r3, #4
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3301      	adds	r3, #1
 80028ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80028f2:	e022      	b.n	800293a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800290c:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3304      	adds	r3, #4
 8002912:	4619      	mov	r1, r3
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7fe fce6 	bl	80012e6 <vListInsert>
}
 800291a:	e00e      	b.n	800293a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3304      	adds	r3, #4
 8002922:	4619      	mov	r1, r3
 8002924:	69b8      	ldr	r0, [r7, #24]
 8002926:	f7fe fcde 	bl	80012e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800292a:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <prvAddCurrentTaskToDelayedList+0x100>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d202      	bcs.n	800293a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002934:	4a09      	ldr	r2, [pc, #36]	@ (800295c <prvAddCurrentTaskToDelayedList+0x100>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6013      	str	r3, [r2, #0]
}
 800293a:	bf00      	nop
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200001a4 	.word	0x200001a4
 8002948:	20000158 	.word	0x20000158
 800294c:	2000015c 	.word	0x2000015c
 8002950:	200000c8 	.word	0x200000c8
 8002954:	200001a8 	.word	0x200001a8
 8002958:	2000018c 	.word	0x2000018c
 800295c:	200001c0 	.word	0x200001c0

08002960 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800296a:	f000 fa55 	bl	8002e18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800296e:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <xTimerCreateTimerTask+0x58>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002976:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <xTimerCreateTimerTask+0x5c>)
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002984:	490e      	ldr	r1, [pc, #56]	@ (80029c0 <xTimerCreateTimerTask+0x60>)
 8002986:	480f      	ldr	r0, [pc, #60]	@ (80029c4 <xTimerCreateTimerTask+0x64>)
 8002988:	f7ff f844 	bl	8001a14 <xTaskCreate>
 800298c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	603b      	str	r3, [r7, #0]
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80029ac:	687b      	ldr	r3, [r7, #4]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200001fc 	.word	0x200001fc
 80029bc:	20000200 	.word	0x20000200
 80029c0:	08004204 	.word	0x08004204
 80029c4:	08002a6d 	.word	0x08002a6d

080029c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80029d4:	e008      	b.n	80029e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4413      	add	r3, r2
 80029de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	18d1      	adds	r1, r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8df 	bl	8002bb8 <prvInsertTimerInActiveList>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <prvReloadTimer+0xe>
        }
    }
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a16:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <prvProcessExpiredTimer+0x5c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fc97 	bl	8001358 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff ffc3 	bl	80029c8 <prvReloadTimer>
 8002a42:	e008      	b.n	8002a56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	4798      	blx	r3
    }
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200001f4 	.word	0x200001f4

08002a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 f859 	bl	8002b30 <prvGetNextExpireTime>
 8002a7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4619      	mov	r1, r3
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f805 	bl	8002a94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002a8a:	f000 f8d7 	bl	8002c3c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a8e:	bf00      	nop
 8002a90:	e7f0      	b.n	8002a74 <prvTimerTask+0x8>
	...

08002a94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002a9e:	f7ff f99f 	bl	8001de0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f866 	bl	8002b78 <prvSampleTimeNow>
 8002aac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d130      	bne.n	8002b16 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <prvProcessTimerOrBlockTask+0x3c>
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d806      	bhi.n	8002ad0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002ac2:	f7ff f99b 	bl	8001dfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff9f 	bl	8002a0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002ace:	e024      	b.n	8002b1a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002ad6:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <prvProcessTimerOrBlockTask+0x90>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <prvProcessTimerOrBlockTask+0x50>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <prvProcessTimerOrBlockTask+0x52>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b28 <prvProcessTimerOrBlockTask+0x94>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe ff1d 	bl	8001934 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002afa:	f7ff f97f 	bl	8001dfc <xTaskResumeAll>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <prvProcessTimerOrBlockTask+0x98>)
 8002b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	f3bf 8f6f 	isb	sy
    }
 8002b14:	e001      	b.n	8002b1a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002b16:	f7ff f971 	bl	8001dfc <xTaskResumeAll>
    }
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200001f8 	.word	0x200001f8
 8002b28:	200001fc 	.word	0x200001fc
 8002b2c:	e000ed04 	.word	0xe000ed04

08002b30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <prvGetNextExpireTime+0x44>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <prvGetNextExpireTime+0x16>
 8002b42:	2201      	movs	r2, #1
 8002b44:	e000      	b.n	8002b48 <prvGetNextExpireTime+0x18>
 8002b46:	2200      	movs	r2, #0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b54:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <prvGetNextExpireTime+0x44>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e001      	b.n	8002b64 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002b64:	68fb      	ldr	r3, [r7, #12]
    }
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200001f4 	.word	0x200001f4

08002b78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002b80:	f7ff fa44 	bl	800200c <xTaskGetTickCount>
 8002b84:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <prvSampleTimeNow+0x3c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d205      	bcs.n	8002b9c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002b90:	f000 f91c 	bl	8002dcc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e002      	b.n	8002ba2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002ba2:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <prvSampleTimeNow+0x3c>)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    }
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000204 	.word	0x20000204

08002bb8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d812      	bhi.n	8002c04 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e01b      	b.n	8002c2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <prvInsertTimerInActiveList+0x7c>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f7fe fb72 	bl	80012e6 <vListInsert>
 8002c02:	e012      	b.n	8002c2a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d206      	bcs.n	8002c1a <prvInsertTimerInActiveList+0x62>
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e007      	b.n	8002c2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <prvInsertTimerInActiveList+0x80>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7fe fb5e 	bl	80012e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002c2a:	697b      	ldr	r3, [r7, #20]
    }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200001f8 	.word	0x200001f8
 8002c38:	200001f4 	.word	0x200001f4

08002c3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002c4e:	e0a9      	b.n	8002da4 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f2c0 80a6 	blt.w	8002da4 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fb75 	bl	8001358 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff81 	bl	8002b78 <prvSampleTimeNow>
 8002c76:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 808e 	bhi.w	8002d9e <prvProcessReceivedCommands+0x162>
 8002c82:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <prvProcessReceivedCommands+0x4c>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cad 	.word	0x08002cad
 8002c90:	08002d15 	.word	0x08002d15
 8002c94:	08002d29 	.word	0x08002d29
 8002c98:	08002d75 	.word	0x08002d75
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cad 	.word	0x08002cad
 8002ca4:	08002d15 	.word	0x08002d15
 8002ca8:	08002d29 	.word	0x08002d29
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	18d1      	adds	r1, r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	69f8      	ldr	r0, [r7, #28]
 8002ccc:	f7ff ff74 	bl	8002bb8 <prvInsertTimerInActiveList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d065      	beq.n	8002da2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	69f8      	ldr	r0, [r7, #28]
 8002cf2:	f7ff fe69 	bl	80029c8 <prvReloadTimer>
 8002cf6:	e008      	b.n	8002d0a <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	69f8      	ldr	r0, [r7, #28]
 8002d10:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002d12:	e046      	b.n	8002da2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002d26:	e03d      	b.n	8002da4 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	617b      	str	r3, [r7, #20]
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	18d1      	adds	r1, r2, r3
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	69f8      	ldr	r0, [r7, #28]
 8002d6e:	f7ff ff23 	bl	8002bb8 <prvInsertTimerInActiveList>
                        break;
 8002d72:	e017      	b.n	8002da4 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002d82:	69f8      	ldr	r0, [r7, #28]
 8002d84:	f000 fc10 	bl	80035a8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002d88:	e00c      	b.n	8002da4 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002d9c:	e002      	b.n	8002da4 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <prvProcessReceivedCommands+0x168>
                        break;
 8002da2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <prvProcessReceivedCommands+0x18c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f107 0108 	add.w	r1, r7, #8
 8002dac:	2200      	movs	r2, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fc00 	bl	80015b4 <xQueueReceive>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f af4a 	bne.w	8002c50 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200001fc 	.word	0x200001fc

08002dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002dd2:	e009      	b.n	8002de8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <prvSwitchTimerLists+0x44>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002dde:	f04f 31ff 	mov.w	r1, #4294967295
 8002de2:	6838      	ldr	r0, [r7, #0]
 8002de4:	f7ff fe12 	bl	8002a0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <prvSwitchTimerLists+0x44>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <prvSwitchTimerLists+0x44>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <prvSwitchTimerLists+0x48>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <prvSwitchTimerLists+0x44>)
 8002dfe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002e00:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <prvSwitchTimerLists+0x48>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
    }
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200001f4 	.word	0x200001f4
 8002e14:	200001f8 	.word	0x200001f8

08002e18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002e1c:	f000 f9ac 	bl	8003178 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002e20:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <prvCheckForValidListAndQueue+0x54>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d11d      	bne.n	8002e64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002e28:	4811      	ldr	r0, [pc, #68]	@ (8002e70 <prvCheckForValidListAndQueue+0x58>)
 8002e2a:	f7fe fa2f 	bl	800128c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002e2e:	4811      	ldr	r0, [pc, #68]	@ (8002e74 <prvCheckForValidListAndQueue+0x5c>)
 8002e30:	f7fe fa2c 	bl	800128c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002e34:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <prvCheckForValidListAndQueue+0x60>)
 8002e36:	4a0e      	ldr	r2, [pc, #56]	@ (8002e70 <prvCheckForValidListAndQueue+0x58>)
 8002e38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <prvCheckForValidListAndQueue+0x64>)
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <prvCheckForValidListAndQueue+0x5c>)
 8002e3e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002e40:	2200      	movs	r2, #0
 8002e42:	210c      	movs	r1, #12
 8002e44:	200a      	movs	r0, #10
 8002e46:	f7fe fb43 	bl	80014d0 <xQueueGenericCreate>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <prvCheckForValidListAndQueue+0x54>)
 8002e4e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <prvCheckForValidListAndQueue+0x54>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <prvCheckForValidListAndQueue+0x54>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <prvCheckForValidListAndQueue+0x68>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fd18 	bl	8001894 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e64:	f000 f9ba 	bl	80031dc <vPortExitCritical>
    }
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200001fc 	.word	0x200001fc
 8002e70:	200001cc 	.word	0x200001cc
 8002e74:	200001e0 	.word	0x200001e0
 8002e78:	200001f4 	.word	0x200001f4
 8002e7c:	200001f8 	.word	0x200001f8
 8002e80:	0800420c 	.word	0x0800420c

08002e84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b04      	subs	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b04      	subs	r3, #4
 8002ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0201 	bic.w	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee8 <pxPortInitialiseStack+0x64>)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b14      	subs	r3, #20
 8002ebe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b04      	subs	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f06f 0202 	mvn.w	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3b20      	subs	r3, #32
 8002ed8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	08002eed 	.word	0x08002eed

08002eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <prvTaskExitError+0x58>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d00b      	beq.n	8002f18 <prvTaskExitError+0x2c>
    __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	60fb      	str	r3, [r7, #12]
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <prvTaskExitError+0x28>
    __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60bb      	str	r3, [r7, #8]
}
 8002f2a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f2c:	bf00      	nop
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0fc      	beq.n	8002f2e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000010 	.word	0x20000010

08002f48 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <SVC_Handler+0x1c>)
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	6808      	ldr	r0, [r1, #0]
 8002f4e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f52:	f380 8809 	msr	PSP, r0
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f380 8811 	msr	BASEPRI, r0
 8002f62:	4770      	bx	lr
 8002f64:	200000c8 	.word	0x200000c8
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop

08002f6c <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f6c:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <prvPortStartFirstTask+0x24>)
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	6800      	ldr	r0, [r0, #0]
 8002f72:	f380 8808 	msr	MSP, r0
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f380 8814 	msr	CONTROL, r0
 8002f7e:	b662      	cpsie	i
 8002f80:	b661      	cpsie	f
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	df00      	svc	0
 8002f8c:	bf00      	nop
 8002f8e:	0000      	.short	0x0000
 8002f90:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	@ 0x30
 8002f9c:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f9e:	4b69      	ldr	r3, [pc, #420]	@ (8003144 <xPortStartScheduler+0x1ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a69      	ldr	r2, [pc, #420]	@ (8003148 <xPortStartScheduler+0x1b0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10b      	bne.n	8002fc0 <xPortStartScheduler+0x28>
    __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fc0:	4b60      	ldr	r3, [pc, #384]	@ (8003144 <xPortStartScheduler+0x1ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	@ (800314c <xPortStartScheduler+0x1b4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10b      	bne.n	8002fe2 <xPortStartScheduler+0x4a>
    __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	623b      	str	r3, [r7, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <xPortStartScheduler+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	332c      	adds	r3, #44	@ 0x2c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a59      	ldr	r2, [pc, #356]	@ (8003154 <xPortStartScheduler+0x1bc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00b      	beq.n	800300c <xPortStartScheduler+0x74>
    __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61fb      	str	r3, [r7, #28]
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800300c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300e:	3338      	adds	r3, #56	@ 0x38
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a51      	ldr	r2, [pc, #324]	@ (8003158 <xPortStartScheduler+0x1c0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <xPortStartScheduler+0x98>
    __asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61bb      	str	r3, [r7, #24]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003034:	4b49      	ldr	r3, [pc, #292]	@ (800315c <xPortStartScheduler+0x1c4>)
 8003036:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	22ff      	movs	r2, #255	@ 0xff
 8003044:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b41      	ldr	r3, [pc, #260]	@ (8003160 <xPortStartScheduler+0x1c8>)
 800305a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800305c:	4b40      	ldr	r3, [pc, #256]	@ (8003160 <xPortStartScheduler+0x1c8>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <xPortStartScheduler+0xe4>
    __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	617b      	str	r3, [r7, #20]
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d013      	beq.n	80030b2 <xPortStartScheduler+0x11a>
    __asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	613b      	str	r3, [r7, #16]
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b80      	cmp	r3, #128	@ 0x80
 80030bc:	d0f1      	beq.n	80030a2 <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d103      	bne.n	80030cc <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80030c4:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e004      	b.n	80030d6 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	4a24      	ldr	r2, [pc, #144]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030d4:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030d6:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	4a21      	ldr	r2, [pc, #132]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030de:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030e0:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <xPortStartScheduler+0x1cc>)
 80030ea:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <xPortStartScheduler+0x1d0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <xPortStartScheduler+0x1d0>)
 80030fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030fe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <xPortStartScheduler+0x1d0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a18      	ldr	r2, [pc, #96]	@ (8003168 <xPortStartScheduler+0x1d0>)
 8003106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800310a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <xPortStartScheduler+0x1d4>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003112:	f000 f8e1 	bl	80032d8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003116:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <xPortStartScheduler+0x1d8>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800311c:	f000 f900 	bl	8003320 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003120:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <xPortStartScheduler+0x1dc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a13      	ldr	r2, [pc, #76]	@ (8003174 <xPortStartScheduler+0x1dc>)
 8003126:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800312a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800312c:	f7ff ff1e 	bl	8002f6c <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003130:	f7ff f896 	bl	8002260 <vTaskSwitchContext>
    prvTaskExitError();
 8003134:	f7ff feda 	bl	8002eec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3730      	adds	r7, #48	@ 0x30
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	e000ed00 	.word	0xe000ed00
 8003148:	410fc271 	.word	0x410fc271
 800314c:	410fc270 	.word	0x410fc270
 8003150:	e000ed08 	.word	0xe000ed08
 8003154:	08002f49 	.word	0x08002f49
 8003158:	08003231 	.word	0x08003231
 800315c:	e000e400 	.word	0xe000e400
 8003160:	20000208 	.word	0x20000208
 8003164:	2000020c 	.word	0x2000020c
 8003168:	e000ed20 	.word	0xe000ed20
 800316c:	e000ed1c 	.word	0xe000ed1c
 8003170:	20000010 	.word	0x20000010
 8003174:	e000ef34 	.word	0xe000ef34

08003178 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
    __asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
}
 8003190:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <vPortEnterCritical+0x5c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <vPortEnterCritical+0x5c>)
 800319a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800319c:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <vPortEnterCritical+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d110      	bne.n	80031c6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031a4:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <vPortEnterCritical+0x60>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <vPortEnterCritical+0x4e>
    __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	603b      	str	r3, [r7, #0]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <vPortEnterCritical+0x4a>
    }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000010 	.word	0x20000010
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031e2:	4b12      	ldr	r3, [pc, #72]	@ (800322c <vPortExitCritical+0x50>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <vPortExitCritical+0x26>
    __asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	607b      	str	r3, [r7, #4]
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	e7fd      	b.n	80031fe <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <vPortExitCritical+0x50>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	4a08      	ldr	r2, [pc, #32]	@ (800322c <vPortExitCritical+0x50>)
 800320a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <vPortExitCritical+0x50>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <vPortExitCritical+0x44>
 8003214:	2300      	movs	r3, #0
 8003216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800321e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	20000010 	.word	0x20000010

08003230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003230:	f3ef 8009 	mrs	r0, PSP
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4b14      	ldr	r3, [pc, #80]	@ (800328c <PendSV_Handler+0x5c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f01e 0f10 	tst.w	lr, #16
 8003240:	bf08      	it	eq
 8003242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	6010      	str	r0, [r2, #0]
 800324c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003254:	f380 8811 	msr	BASEPRI, r0
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f7fe fffe 	bl	8002260 <vTaskSwitchContext>
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f380 8811 	msr	BASEPRI, r0
 800326c:	bc09      	pop	{r0, r3}
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	6808      	ldr	r0, [r1, #0]
 8003272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003276:	f01e 0f10 	tst.w	lr, #16
 800327a:	bf08      	it	eq
 800327c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003280:	f380 8809 	msr	PSP, r0
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4770      	bx	lr
 800328a:	0000      	.short	0x0000
 800328c:	200000c8 	.word	0x200000c8
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop

08003294 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
    __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	607b      	str	r3, [r7, #4]
}
 80032ac:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032ae:	f7fe febd 	bl	800202c <xTaskIncrementTick>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <SysTick_Handler+0x40>)
 80032ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	603b      	str	r3, [r7, #0]
    __asm volatile
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f383 8811 	msr	BASEPRI, r3
}
 80032ca:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	e000ed04 	.word	0xe000ed04

080032d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <vPortSetupTimerInterrupt+0x34>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <vPortSetupTimerInterrupt+0x38>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <vPortSetupTimerInterrupt+0x3c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <vPortSetupTimerInterrupt+0x40>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	4a09      	ldr	r2, [pc, #36]	@ (800331c <vPortSetupTimerInterrupt+0x44>)
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <vPortSetupTimerInterrupt+0x34>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010
 8003310:	e000e018 	.word	0xe000e018
 8003314:	20000000 	.word	0x20000000
 8003318:	10624dd3 	.word	0x10624dd3
 800331c:	e000e014 	.word	0xe000e014

08003320 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003320:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003330 <vPortEnableVFP+0x10>
 8003324:	6801      	ldr	r1, [r0, #0]
 8003326:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800332a:	6001      	str	r1, [r0, #0]
 800332c:	4770      	bx	lr
 800332e:	0000      	.short	0x0000
 8003330:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop

08003338 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08e      	sub	sp, #56	@ 0x38
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d022      	beq.n	8003394 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800334e:	2308      	movs	r3, #8
 8003350:	43db      	mvns	r3, r3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d81b      	bhi.n	8003390 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8003358:	2208      	movs	r2, #8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	2b00      	cmp	r3, #0
 8003368:	d014      	beq.n	8003394 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	f1c3 0308 	rsb	r3, r3, #8
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	43db      	mvns	r3, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d804      	bhi.n	800338a <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	4413      	add	r3, r2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	e004      	b.n	8003394 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	e001      	b.n	8003394 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003394:	f7fe fd24 	bl	8001de0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003398:	4b7c      	ldr	r3, [pc, #496]	@ (800358c <pvPortMalloc+0x254>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 80033a0:	f000 f97c 	bl	800369c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f2c0 80d7 	blt.w	800355a <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80d3 	beq.w	800355a <pvPortMalloc+0x222>
 80033b4:	4b76      	ldr	r3, [pc, #472]	@ (8003590 <pvPortMalloc+0x258>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	f200 80cd 	bhi.w	800355a <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80033c0:	4b74      	ldr	r3, [pc, #464]	@ (8003594 <pvPortMalloc+0x25c>)
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80033c4:	4b73      	ldr	r3, [pc, #460]	@ (8003594 <pvPortMalloc+0x25c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	4a72      	ldr	r2, [pc, #456]	@ (8003598 <pvPortMalloc+0x260>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d305      	bcc.n	80033de <pvPortMalloc+0xa6>
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	4a71      	ldr	r2, [pc, #452]	@ (800359c <pvPortMalloc+0x264>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d801      	bhi.n	80033de <pvPortMalloc+0xa6>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <pvPortMalloc+0xa8>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d129      	bne.n	8003438 <pvPortMalloc+0x100>
    __asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	61fb      	str	r3, [r7, #28]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80033fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fe:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003408:	4a63      	ldr	r2, [pc, #396]	@ (8003598 <pvPortMalloc+0x260>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d305      	bcc.n	800341a <pvPortMalloc+0xe2>
 800340e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003410:	4a62      	ldr	r2, [pc, #392]	@ (800359c <pvPortMalloc+0x264>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d801      	bhi.n	800341a <pvPortMalloc+0xe2>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <pvPortMalloc+0xe4>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <pvPortMalloc+0x100>
    __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	61bb      	str	r3, [r7, #24]
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d903      	bls.n	800344a <pvPortMalloc+0x112>
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1d8      	bne.n	80033fc <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800344a:	4b50      	ldr	r3, [pc, #320]	@ (800358c <pvPortMalloc+0x254>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003450:	429a      	cmp	r2, r3
 8003452:	f000 8082 	beq.w	800355a <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	4413      	add	r3, r2
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	4a4d      	ldr	r2, [pc, #308]	@ (8003598 <pvPortMalloc+0x260>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d305      	bcc.n	8003474 <pvPortMalloc+0x13c>
 8003468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800346a:	4a4c      	ldr	r2, [pc, #304]	@ (800359c <pvPortMalloc+0x264>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d801      	bhi.n	8003474 <pvPortMalloc+0x13c>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <pvPortMalloc+0x13e>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <pvPortMalloc+0x15a>
    __asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	617b      	str	r3, [r7, #20]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800349a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d90b      	bls.n	80034bc <pvPortMalloc+0x184>
    __asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	613b      	str	r3, [r7, #16]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	2308      	movs	r3, #8
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d924      	bls.n	8003516 <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <pvPortMalloc+0x1be>
    __asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60fb      	str	r3, [r7, #12]
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	e7fd      	b.n	80034f2 <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	1ad2      	subs	r2, r2, r3
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003516:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <pvPortMalloc+0x258>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	4a1b      	ldr	r2, [pc, #108]	@ (8003590 <pvPortMalloc+0x258>)
 8003522:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003524:	4b1a      	ldr	r3, [pc, #104]	@ (8003590 <pvPortMalloc+0x258>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <pvPortMalloc+0x268>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d203      	bcs.n	8003538 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003530:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <pvPortMalloc+0x258>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1a      	ldr	r2, [pc, #104]	@ (80035a0 <pvPortMalloc+0x268>)
 8003536:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800354a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003550:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <pvPortMalloc+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <pvPortMalloc+0x26c>)
 8003558:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 800355a:	f7fe fc4f 	bl	8001dfc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <pvPortMalloc+0x248>
    __asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60bb      	str	r3, [r7, #8]
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <pvPortMalloc+0x244>
    return pvReturn;
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003582:	4618      	mov	r0, r3
 8003584:	3738      	adds	r7, #56	@ 0x38
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20002a18 	.word	0x20002a18
 8003590:	20002a1c 	.word	0x20002a1c
 8003594:	20002a10 	.word	0x20002a10
 8003598:	20000210 	.word	0x20000210
 800359c:	20002a0f 	.word	0x20002a0f
 80035a0:	20002a20 	.word	0x20002a20
 80035a4:	20002a24 	.word	0x20002a24

080035a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d064      	beq.n	8003684 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035ba:	2308      	movs	r3, #8
 80035bc:	425b      	negs	r3, r3
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4a30      	ldr	r2, [pc, #192]	@ (800368c <vPortFree+0xe4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d305      	bcc.n	80035dc <vPortFree+0x34>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003690 <vPortFree+0xe8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d801      	bhi.n	80035dc <vPortFree+0x34>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <vPortFree+0x36>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <vPortFree+0x52>
    __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	617b      	str	r3, [r7, #20]
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	e7fd      	b.n	80035f6 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	db0b      	blt.n	800361a <vPortFree+0x72>
    __asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	613b      	str	r3, [r7, #16]
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <vPortFree+0x92>
    __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	60fb      	str	r3, [r7, #12]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	e7fd      	b.n	8003636 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	0fdb      	lsrs	r3, r3, #31
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01c      	beq.n	8003684 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800365e:	f7fe fbbf 	bl	8001de0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <vPortFree+0xec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4413      	add	r3, r2
 800366c:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <vPortFree+0xec>)
 800366e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003670:	69b8      	ldr	r0, [r7, #24]
 8003672:	f000 f86d 	bl	8003750 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <vPortFree+0xf0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <vPortFree+0xf0>)
 800367e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003680:	f7fe fbbc 	bl	8001dfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003684:	bf00      	nop
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000210 	.word	0x20000210
 8003690:	20002a0f 	.word	0x20002a0f
 8003694:	20002a1c 	.word	0x20002a1c
 8003698:	20002a28 	.word	0x20002a28

0800369c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80036a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <prvHeapInit+0xa0>)
 80036aa:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3307      	adds	r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0307 	bic.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	4a1c      	ldr	r2, [pc, #112]	@ (800373c <prvHeapInit+0xa0>)
 80036cc:	4413      	add	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <prvHeapInit+0xa4>)
 80036d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <prvHeapInit+0xa4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80036e4:	2208      	movs	r2, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <prvHeapInit+0xa8>)
 80036f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <prvHeapInit+0xa8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <prvHeapInit+0xa8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <prvHeapInit+0xa8>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <prvHeapInit+0xac>)
 8003726:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a07      	ldr	r2, [pc, #28]	@ (800374c <prvHeapInit+0xb0>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	20000210 	.word	0x20000210
 8003740:	20002a10 	.word	0x20002a10
 8003744:	20002a18 	.word	0x20002a18
 8003748:	20002a20 	.word	0x20002a20
 800374c:	20002a1c 	.word	0x20002a1c

08003750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <prvInsertBlockIntoFreeList+0xe4>)
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e002      	b.n	8003764 <prvInsertBlockIntoFreeList+0x14>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d8f7      	bhi.n	800375e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4a30      	ldr	r2, [pc, #192]	@ (8003834 <prvInsertBlockIntoFreeList+0xe4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <prvInsertBlockIntoFreeList+0xe8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d305      	bcc.n	800378a <prvInsertBlockIntoFreeList+0x3a>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <prvInsertBlockIntoFreeList+0xec>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d801      	bhi.n	800378a <prvInsertBlockIntoFreeList+0x3a>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <prvInsertBlockIntoFreeList+0x3c>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	60fb      	str	r3, [r7, #12]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d108      	bne.n	80037cc <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	441a      	add	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	441a      	add	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d118      	bne.n	8003812 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b16      	ldr	r3, [pc, #88]	@ (8003840 <prvInsertBlockIntoFreeList+0xf0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d00d      	beq.n	8003808 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	441a      	add	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e008      	b.n	800381a <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003808:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <prvInsertBlockIntoFreeList+0xf0>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e003      	b.n	800381a <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d002      	beq.n	8003828 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	20002a10 	.word	0x20002a10
 8003838:	20000210 	.word	0x20000210
 800383c:	20002a0f 	.word	0x20002a0f
 8003840:	20002a18 	.word	0x20002a18

08003844 <xTestTask>:
static void xTestTask(void* pvParameters);

/*
 * Function definitions
 */
static void xTestTask(void* pvParameters) {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

    // function variables here

    while(1) {
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <xTestTask+0x8>

08003850 <mainapp>:
}

/*
 * Main function
 */
int mainapp() {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af02      	add	r7, sp, #8

    /* create task to test setup */
    BaseType_t status;

    status = xTaskCreate(xTestTask, "xTestTask", 1024, NULL, 1, NULL);
 8003856:	2300      	movs	r3, #0
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	2301      	movs	r3, #1
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2300      	movs	r3, #0
 8003860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003864:	490a      	ldr	r1, [pc, #40]	@ (8003890 <mainapp+0x40>)
 8003866:	480b      	ldr	r0, [pc, #44]	@ (8003894 <mainapp+0x44>)
 8003868:	f7fe f8d4 	bl	8001a14 <xTaskCreate>
 800386c:	6078      	str	r0, [r7, #4]

    if(status == pdPASS) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d104      	bne.n	800387e <mainapp+0x2e>
        sprintf(msg_buffer, "TASK CREATED OK!\n");
 8003874:	4908      	ldr	r1, [pc, #32]	@ (8003898 <mainapp+0x48>)
 8003876:	4809      	ldr	r0, [pc, #36]	@ (800389c <mainapp+0x4c>)
 8003878:	f000 f814 	bl	80038a4 <siprintf>
 800387c:	e003      	b.n	8003886 <mainapp+0x36>
    } else {
        sprintf(msg_buffer, "TASK FAILED!\n");
 800387e:	4908      	ldr	r1, [pc, #32]	@ (80038a0 <mainapp+0x50>)
 8003880:	4806      	ldr	r0, [pc, #24]	@ (800389c <mainapp+0x4c>)
 8003882:	f000 f80f 	bl	80038a4 <siprintf>
    }

    /* start the scheduler */
    vTaskStartScheduler();
 8003886:	f7fe fa67 	bl	8001d58 <vTaskStartScheduler>

	while(1) {
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <mainapp+0x3a>
 800388e:	bf00      	nop
 8003890:	08004214 	.word	0x08004214
 8003894:	08003845 	.word	0x08003845
 8003898:	08004220 	.word	0x08004220
 800389c:	20002a2c 	.word	0x20002a2c
 80038a0:	08004234 	.word	0x08004234

080038a4 <siprintf>:
 80038a4:	b40e      	push	{r1, r2, r3}
 80038a6:	b500      	push	{lr}
 80038a8:	b09c      	sub	sp, #112	@ 0x70
 80038aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80038ac:	9002      	str	r0, [sp, #8]
 80038ae:	9006      	str	r0, [sp, #24]
 80038b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80038b4:	4809      	ldr	r0, [pc, #36]	@ (80038dc <siprintf+0x38>)
 80038b6:	9107      	str	r1, [sp, #28]
 80038b8:	9104      	str	r1, [sp, #16]
 80038ba:	4909      	ldr	r1, [pc, #36]	@ (80038e0 <siprintf+0x3c>)
 80038bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c0:	9105      	str	r1, [sp, #20]
 80038c2:	6800      	ldr	r0, [r0, #0]
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	a902      	add	r1, sp, #8
 80038c8:	f000 f9a2 	bl	8003c10 <_svfiprintf_r>
 80038cc:	9b02      	ldr	r3, [sp, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	b01c      	add	sp, #112	@ 0x70
 80038d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d8:	b003      	add	sp, #12
 80038da:	4770      	bx	lr
 80038dc:	20000014 	.word	0x20000014
 80038e0:	ffff0208 	.word	0xffff0208

080038e4 <memset>:
 80038e4:	4402      	add	r2, r0
 80038e6:	4603      	mov	r3, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d100      	bne.n	80038ee <memset+0xa>
 80038ec:	4770      	bx	lr
 80038ee:	f803 1b01 	strb.w	r1, [r3], #1
 80038f2:	e7f9      	b.n	80038e8 <memset+0x4>

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	@ (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000014 	.word	0x20000014

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4d0d      	ldr	r5, [pc, #52]	@ (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	@ (800393c <__libc_init_array+0x3c>)
 8003906:	1b64      	subs	r4, r4, r5
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2600      	movs	r6, #0
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4d0b      	ldr	r5, [pc, #44]	@ (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	@ (8003944 <__libc_init_array+0x44>)
 8003914:	f000 fc66 	bl	80041e4 <_init>
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2600      	movs	r6, #0
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08004290 	.word	0x08004290
 800393c:	08004290 	.word	0x08004290
 8003940:	08004290 	.word	0x08004290
 8003944:	08004294 	.word	0x08004294

08003948 <__retarget_lock_acquire_recursive>:
 8003948:	4770      	bx	lr

0800394a <__retarget_lock_release_recursive>:
 800394a:	4770      	bx	lr

0800394c <memcpy>:
 800394c:	440a      	add	r2, r1
 800394e:	4291      	cmp	r1, r2
 8003950:	f100 33ff 	add.w	r3, r0, #4294967295
 8003954:	d100      	bne.n	8003958 <memcpy+0xc>
 8003956:	4770      	bx	lr
 8003958:	b510      	push	{r4, lr}
 800395a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800395e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003962:	4291      	cmp	r1, r2
 8003964:	d1f9      	bne.n	800395a <memcpy+0xe>
 8003966:	bd10      	pop	{r4, pc}

08003968 <_free_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4605      	mov	r5, r0
 800396c:	2900      	cmp	r1, #0
 800396e:	d041      	beq.n	80039f4 <_free_r+0x8c>
 8003970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003974:	1f0c      	subs	r4, r1, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bfb8      	it	lt
 800397a:	18e4      	addlt	r4, r4, r3
 800397c:	f000 f8e0 	bl	8003b40 <__malloc_lock>
 8003980:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <_free_r+0x90>)
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	b933      	cbnz	r3, 8003994 <_free_r+0x2c>
 8003986:	6063      	str	r3, [r4, #4]
 8003988:	6014      	str	r4, [r2, #0]
 800398a:	4628      	mov	r0, r5
 800398c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003990:	f000 b8dc 	b.w	8003b4c <__malloc_unlock>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d908      	bls.n	80039aa <_free_r+0x42>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	1821      	adds	r1, r4, r0
 800399c:	428b      	cmp	r3, r1
 800399e:	bf01      	itttt	eq
 80039a0:	6819      	ldreq	r1, [r3, #0]
 80039a2:	685b      	ldreq	r3, [r3, #4]
 80039a4:	1809      	addeq	r1, r1, r0
 80039a6:	6021      	streq	r1, [r4, #0]
 80039a8:	e7ed      	b.n	8003986 <_free_r+0x1e>
 80039aa:	461a      	mov	r2, r3
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b10b      	cbz	r3, 80039b4 <_free_r+0x4c>
 80039b0:	42a3      	cmp	r3, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x42>
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	1850      	adds	r0, r2, r1
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x6c>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	4401      	add	r1, r0
 80039c0:	1850      	adds	r0, r2, r1
 80039c2:	4283      	cmp	r3, r0
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	d1e0      	bne.n	800398a <_free_r+0x22>
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	6053      	str	r3, [r2, #4]
 80039ce:	4408      	add	r0, r1
 80039d0:	6010      	str	r0, [r2, #0]
 80039d2:	e7da      	b.n	800398a <_free_r+0x22>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x74>
 80039d6:	230c      	movs	r3, #12
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	e7d6      	b.n	800398a <_free_r+0x22>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	6063      	str	r3, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	6054      	str	r4, [r2, #4]
 80039f2:	e7ca      	b.n	800398a <_free_r+0x22>
 80039f4:	bd38      	pop	{r3, r4, r5, pc}
 80039f6:	bf00      	nop
 80039f8:	20002ba4 	.word	0x20002ba4

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0f      	ldr	r6, [pc, #60]	@ (8003a3c <sbrk_aligned+0x40>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 fba6 	bl	8004158 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fba1 	bl	8004158 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d103      	bne.n	8003a22 <sbrk_aligned+0x26>
 8003a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a1e:	4620      	mov	r0, r4
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	1cc4      	adds	r4, r0, #3
 8003a24:	f024 0403 	bic.w	r4, r4, #3
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d0f8      	beq.n	8003a1e <sbrk_aligned+0x22>
 8003a2c:	1a21      	subs	r1, r4, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fb92 	bl	8004158 <_sbrk_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1f2      	bne.n	8003a1e <sbrk_aligned+0x22>
 8003a38:	e7ef      	b.n	8003a1a <sbrk_aligned+0x1e>
 8003a3a:	bf00      	nop
 8003a3c:	20002ba0 	.word	0x20002ba0

08003a40 <_malloc_r>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	1ccd      	adds	r5, r1, #3
 8003a46:	f025 0503 	bic.w	r5, r5, #3
 8003a4a:	3508      	adds	r5, #8
 8003a4c:	2d0c      	cmp	r5, #12
 8003a4e:	bf38      	it	cc
 8003a50:	250c      	movcc	r5, #12
 8003a52:	2d00      	cmp	r5, #0
 8003a54:	4606      	mov	r6, r0
 8003a56:	db01      	blt.n	8003a5c <_malloc_r+0x1c>
 8003a58:	42a9      	cmp	r1, r5
 8003a5a:	d904      	bls.n	8003a66 <_malloc_r+0x26>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	2000      	movs	r0, #0
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b3c <_malloc_r+0xfc>
 8003a6a:	f000 f869 	bl	8003b40 <__malloc_lock>
 8003a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a72:	461c      	mov	r4, r3
 8003a74:	bb44      	cbnz	r4, 8003ac8 <_malloc_r+0x88>
 8003a76:	4629      	mov	r1, r5
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff ffbf 	bl	80039fc <sbrk_aligned>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	4604      	mov	r4, r0
 8003a82:	d158      	bne.n	8003b36 <_malloc_r+0xf6>
 8003a84:	f8d8 4000 	ldr.w	r4, [r8]
 8003a88:	4627      	mov	r7, r4
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d143      	bne.n	8003b16 <_malloc_r+0xd6>
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d04b      	beq.n	8003b2a <_malloc_r+0xea>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	eb04 0903 	add.w	r9, r4, r3
 8003a9c:	f000 fb5c 	bl	8004158 <_sbrk_r>
 8003aa0:	4581      	cmp	r9, r0
 8003aa2:	d142      	bne.n	8003b2a <_malloc_r+0xea>
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	1a6d      	subs	r5, r5, r1
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ffa6 	bl	80039fc <sbrk_aligned>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d03a      	beq.n	8003b2a <_malloc_r+0xea>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	442b      	add	r3, r5
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	f8d8 3000 	ldr.w	r3, [r8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	bb62      	cbnz	r2, 8003b1c <_malloc_r+0xdc>
 8003ac2:	f8c8 7000 	str.w	r7, [r8]
 8003ac6:	e00f      	b.n	8003ae8 <_malloc_r+0xa8>
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	1b52      	subs	r2, r2, r5
 8003acc:	d420      	bmi.n	8003b10 <_malloc_r+0xd0>
 8003ace:	2a0b      	cmp	r2, #11
 8003ad0:	d917      	bls.n	8003b02 <_malloc_r+0xc2>
 8003ad2:	1961      	adds	r1, r4, r5
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	6025      	str	r5, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	6059      	strne	r1, [r3, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	bf08      	it	eq
 8003ae0:	f8c8 1000 	streq.w	r1, [r8]
 8003ae4:	5162      	str	r2, [r4, r5]
 8003ae6:	604b      	str	r3, [r1, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f82f 	bl	8003b4c <__malloc_unlock>
 8003aee:	f104 000b 	add.w	r0, r4, #11
 8003af2:	1d23      	adds	r3, r4, #4
 8003af4:	f020 0007 	bic.w	r0, r0, #7
 8003af8:	1ac2      	subs	r2, r0, r3
 8003afa:	bf1c      	itt	ne
 8003afc:	1a1b      	subne	r3, r3, r0
 8003afe:	50a3      	strne	r3, [r4, r2]
 8003b00:	e7af      	b.n	8003a62 <_malloc_r+0x22>
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	bf0c      	ite	eq
 8003b08:	f8c8 2000 	streq.w	r2, [r8]
 8003b0c:	605a      	strne	r2, [r3, #4]
 8003b0e:	e7eb      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b10:	4623      	mov	r3, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7ae      	b.n	8003a74 <_malloc_r+0x34>
 8003b16:	463c      	mov	r4, r7
 8003b18:	687f      	ldr	r7, [r7, #4]
 8003b1a:	e7b6      	b.n	8003a8a <_malloc_r+0x4a>
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	42a3      	cmp	r3, r4
 8003b22:	d1fb      	bne.n	8003b1c <_malloc_r+0xdc>
 8003b24:	2300      	movs	r3, #0
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e7de      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f80c 	bl	8003b4c <__malloc_unlock>
 8003b34:	e794      	b.n	8003a60 <_malloc_r+0x20>
 8003b36:	6005      	str	r5, [r0, #0]
 8003b38:	e7d6      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b3a:	bf00      	nop
 8003b3c:	20002ba4 	.word	0x20002ba4

08003b40 <__malloc_lock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_lock+0x8>)
 8003b42:	f7ff bf01 	b.w	8003948 <__retarget_lock_acquire_recursive>
 8003b46:	bf00      	nop
 8003b48:	20002b9c 	.word	0x20002b9c

08003b4c <__malloc_unlock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__malloc_unlock+0x8>)
 8003b4e:	f7ff befc 	b.w	800394a <__retarget_lock_release_recursive>
 8003b52:	bf00      	nop
 8003b54:	20002b9c 	.word	0x20002b9c

08003b58 <__ssputs_r>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	688e      	ldr	r6, [r1, #8]
 8003b5e:	461f      	mov	r7, r3
 8003b60:	42be      	cmp	r6, r7
 8003b62:	680b      	ldr	r3, [r1, #0]
 8003b64:	4682      	mov	sl, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4690      	mov	r8, r2
 8003b6a:	d82d      	bhi.n	8003bc8 <__ssputs_r+0x70>
 8003b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b74:	d026      	beq.n	8003bc4 <__ssputs_r+0x6c>
 8003b76:	6965      	ldr	r5, [r4, #20]
 8003b78:	6909      	ldr	r1, [r1, #16]
 8003b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b7e:	eba3 0901 	sub.w	r9, r3, r1
 8003b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b86:	1c7b      	adds	r3, r7, #1
 8003b88:	444b      	add	r3, r9
 8003b8a:	106d      	asrs	r5, r5, #1
 8003b8c:	429d      	cmp	r5, r3
 8003b8e:	bf38      	it	cc
 8003b90:	461d      	movcc	r5, r3
 8003b92:	0553      	lsls	r3, r2, #21
 8003b94:	d527      	bpl.n	8003be6 <__ssputs_r+0x8e>
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7ff ff52 	bl	8003a40 <_malloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	b360      	cbz	r0, 8003bfa <__ssputs_r+0xa2>
 8003ba0:	6921      	ldr	r1, [r4, #16]
 8003ba2:	464a      	mov	r2, r9
 8003ba4:	f7ff fed2 	bl	800394c <memcpy>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	6126      	str	r6, [r4, #16]
 8003bb6:	6165      	str	r5, [r4, #20]
 8003bb8:	444e      	add	r6, r9
 8003bba:	eba5 0509 	sub.w	r5, r5, r9
 8003bbe:	6026      	str	r6, [r4, #0]
 8003bc0:	60a5      	str	r5, [r4, #8]
 8003bc2:	463e      	mov	r6, r7
 8003bc4:	42be      	cmp	r6, r7
 8003bc6:	d900      	bls.n	8003bca <__ssputs_r+0x72>
 8003bc8:	463e      	mov	r6, r7
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4641      	mov	r1, r8
 8003bd0:	f000 faa8 	bl	8004124 <memmove>
 8003bd4:	68a3      	ldr	r3, [r4, #8]
 8003bd6:	1b9b      	subs	r3, r3, r6
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	4433      	add	r3, r6
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	2000      	movs	r0, #0
 8003be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be6:	462a      	mov	r2, r5
 8003be8:	f000 fac6 	bl	8004178 <_realloc_r>
 8003bec:	4606      	mov	r6, r0
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1e0      	bne.n	8003bb4 <__ssputs_r+0x5c>
 8003bf2:	6921      	ldr	r1, [r4, #16]
 8003bf4:	4650      	mov	r0, sl
 8003bf6:	f7ff feb7 	bl	8003968 <_free_r>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	f8ca 3000 	str.w	r3, [sl]
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e7e9      	b.n	8003be2 <__ssputs_r+0x8a>
	...

08003c10 <_svfiprintf_r>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	4698      	mov	r8, r3
 8003c16:	898b      	ldrh	r3, [r1, #12]
 8003c18:	061b      	lsls	r3, r3, #24
 8003c1a:	b09d      	sub	sp, #116	@ 0x74
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	d510      	bpl.n	8003c46 <_svfiprintf_r+0x36>
 8003c24:	690b      	ldr	r3, [r1, #16]
 8003c26:	b973      	cbnz	r3, 8003c46 <_svfiprintf_r+0x36>
 8003c28:	2140      	movs	r1, #64	@ 0x40
 8003c2a:	f7ff ff09 	bl	8003a40 <_malloc_r>
 8003c2e:	6028      	str	r0, [r5, #0]
 8003c30:	6128      	str	r0, [r5, #16]
 8003c32:	b930      	cbnz	r0, 8003c42 <_svfiprintf_r+0x32>
 8003c34:	230c      	movs	r3, #12
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	b01d      	add	sp, #116	@ 0x74
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	2340      	movs	r3, #64	@ 0x40
 8003c44:	616b      	str	r3, [r5, #20]
 8003c46:	2300      	movs	r3, #0
 8003c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c54:	2330      	movs	r3, #48	@ 0x30
 8003c56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003df4 <_svfiprintf_r+0x1e4>
 8003c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c5e:	f04f 0901 	mov.w	r9, #1
 8003c62:	4623      	mov	r3, r4
 8003c64:	469a      	mov	sl, r3
 8003c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c6a:	b10a      	cbz	r2, 8003c70 <_svfiprintf_r+0x60>
 8003c6c:	2a25      	cmp	r2, #37	@ 0x25
 8003c6e:	d1f9      	bne.n	8003c64 <_svfiprintf_r+0x54>
 8003c70:	ebba 0b04 	subs.w	fp, sl, r4
 8003c74:	d00b      	beq.n	8003c8e <_svfiprintf_r+0x7e>
 8003c76:	465b      	mov	r3, fp
 8003c78:	4622      	mov	r2, r4
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff ff6b 	bl	8003b58 <__ssputs_r>
 8003c82:	3001      	adds	r0, #1
 8003c84:	f000 80a7 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c8a:	445a      	add	r2, fp
 8003c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 809f 	beq.w	8003dd6 <_svfiprintf_r+0x1c6>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ca2:	f10a 0a01 	add.w	sl, sl, #1
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	9307      	str	r3, [sp, #28]
 8003caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cb0:	4654      	mov	r4, sl
 8003cb2:	2205      	movs	r2, #5
 8003cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cb8:	484e      	ldr	r0, [pc, #312]	@ (8003df4 <_svfiprintf_r+0x1e4>)
 8003cba:	f7fc fa91 	bl	80001e0 <memchr>
 8003cbe:	9a04      	ldr	r2, [sp, #16]
 8003cc0:	b9d8      	cbnz	r0, 8003cfa <_svfiprintf_r+0xea>
 8003cc2:	06d0      	lsls	r0, r2, #27
 8003cc4:	bf44      	itt	mi
 8003cc6:	2320      	movmi	r3, #32
 8003cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ccc:	0711      	lsls	r1, r2, #28
 8003cce:	bf44      	itt	mi
 8003cd0:	232b      	movmi	r3, #43	@ 0x2b
 8003cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cdc:	d015      	beq.n	8003d0a <_svfiprintf_r+0xfa>
 8003cde:	9a07      	ldr	r2, [sp, #28]
 8003ce0:	4654      	mov	r4, sl
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f04f 0c0a 	mov.w	ip, #10
 8003ce8:	4621      	mov	r1, r4
 8003cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cee:	3b30      	subs	r3, #48	@ 0x30
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d94b      	bls.n	8003d8c <_svfiprintf_r+0x17c>
 8003cf4:	b1b0      	cbz	r0, 8003d24 <_svfiprintf_r+0x114>
 8003cf6:	9207      	str	r2, [sp, #28]
 8003cf8:	e014      	b.n	8003d24 <_svfiprintf_r+0x114>
 8003cfa:	eba0 0308 	sub.w	r3, r0, r8
 8003cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8003d02:	4313      	orrs	r3, r2
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	46a2      	mov	sl, r4
 8003d08:	e7d2      	b.n	8003cb0 <_svfiprintf_r+0xa0>
 8003d0a:	9b03      	ldr	r3, [sp, #12]
 8003d0c:	1d19      	adds	r1, r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfbb      	ittet	lt
 8003d16:	425b      	neglt	r3, r3
 8003d18:	f042 0202 	orrlt.w	r2, r2, #2
 8003d1c:	9307      	strge	r3, [sp, #28]
 8003d1e:	9307      	strlt	r3, [sp, #28]
 8003d20:	bfb8      	it	lt
 8003d22:	9204      	strlt	r2, [sp, #16]
 8003d24:	7823      	ldrb	r3, [r4, #0]
 8003d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d28:	d10a      	bne.n	8003d40 <_svfiprintf_r+0x130>
 8003d2a:	7863      	ldrb	r3, [r4, #1]
 8003d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d2e:	d132      	bne.n	8003d96 <_svfiprintf_r+0x186>
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1d1a      	adds	r2, r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	9203      	str	r2, [sp, #12]
 8003d38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d3c:	3402      	adds	r4, #2
 8003d3e:	9305      	str	r3, [sp, #20]
 8003d40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e04 <_svfiprintf_r+0x1f4>
 8003d44:	7821      	ldrb	r1, [r4, #0]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f7fc fa49 	bl	80001e0 <memchr>
 8003d4e:	b138      	cbz	r0, 8003d60 <_svfiprintf_r+0x150>
 8003d50:	9b04      	ldr	r3, [sp, #16]
 8003d52:	eba0 000a 	sub.w	r0, r0, sl
 8003d56:	2240      	movs	r2, #64	@ 0x40
 8003d58:	4082      	lsls	r2, r0
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d64:	4824      	ldr	r0, [pc, #144]	@ (8003df8 <_svfiprintf_r+0x1e8>)
 8003d66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d6a:	2206      	movs	r2, #6
 8003d6c:	f7fc fa38 	bl	80001e0 <memchr>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d036      	beq.n	8003de2 <_svfiprintf_r+0x1d2>
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <_svfiprintf_r+0x1ec>)
 8003d76:	bb1b      	cbnz	r3, 8003dc0 <_svfiprintf_r+0x1b0>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	3307      	adds	r3, #7
 8003d7c:	f023 0307 	bic.w	r3, r3, #7
 8003d80:	3308      	adds	r3, #8
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d86:	4433      	add	r3, r6
 8003d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d8a:	e76a      	b.n	8003c62 <_svfiprintf_r+0x52>
 8003d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d90:	460c      	mov	r4, r1
 8003d92:	2001      	movs	r0, #1
 8003d94:	e7a8      	b.n	8003ce8 <_svfiprintf_r+0xd8>
 8003d96:	2300      	movs	r3, #0
 8003d98:	3401      	adds	r4, #1
 8003d9a:	9305      	str	r3, [sp, #20]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	f04f 0c0a 	mov.w	ip, #10
 8003da2:	4620      	mov	r0, r4
 8003da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003da8:	3a30      	subs	r2, #48	@ 0x30
 8003daa:	2a09      	cmp	r2, #9
 8003dac:	d903      	bls.n	8003db6 <_svfiprintf_r+0x1a6>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0c6      	beq.n	8003d40 <_svfiprintf_r+0x130>
 8003db2:	9105      	str	r1, [sp, #20]
 8003db4:	e7c4      	b.n	8003d40 <_svfiprintf_r+0x130>
 8003db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dba:	4604      	mov	r4, r0
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e7f0      	b.n	8003da2 <_svfiprintf_r+0x192>
 8003dc0:	ab03      	add	r3, sp, #12
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	462a      	mov	r2, r5
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dc8:	a904      	add	r1, sp, #16
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	1c42      	adds	r2, r0, #1
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	d1d6      	bne.n	8003d84 <_svfiprintf_r+0x174>
 8003dd6:	89ab      	ldrh	r3, [r5, #12]
 8003dd8:	065b      	lsls	r3, r3, #25
 8003dda:	f53f af2d 	bmi.w	8003c38 <_svfiprintf_r+0x28>
 8003dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003de0:	e72c      	b.n	8003c3c <_svfiprintf_r+0x2c>
 8003de2:	ab03      	add	r3, sp, #12
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <_svfiprintf_r+0x1f0>)
 8003dea:	a904      	add	r1, sp, #16
 8003dec:	4638      	mov	r0, r7
 8003dee:	f000 f879 	bl	8003ee4 <_printf_i>
 8003df2:	e7ed      	b.n	8003dd0 <_svfiprintf_r+0x1c0>
 8003df4:	08004254 	.word	0x08004254
 8003df8:	0800425e 	.word	0x0800425e
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003b59 	.word	0x08003b59
 8003e04:	0800425a 	.word	0x0800425a

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	4698      	mov	r8, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e24:	4607      	mov	r7, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	b10a      	cbz	r2, 8003e2e <_printf_common+0x26>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	6833      	ldrmi	r3, [r6, #0]
 8003e36:	3302      	addmi	r3, #2
 8003e38:	6033      	strmi	r3, [r6, #0]
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	f015 0506 	ands.w	r5, r5, #6
 8003e40:	d106      	bne.n	8003e50 <_printf_common+0x48>
 8003e42:	f104 0a19 	add.w	sl, r4, #25
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	6832      	ldr	r2, [r6, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc26      	bgt.n	8003e9e <_printf_common+0x96>
 8003e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	3b00      	subs	r3, #0
 8003e58:	bf18      	it	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	0692      	lsls	r2, r2, #26
 8003e5e:	d42b      	bmi.n	8003eb8 <_printf_common+0xb0>
 8003e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e64:	4641      	mov	r1, r8
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c8      	blx	r9
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d01e      	beq.n	8003eac <_printf_common+0xa4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	f003 0306 	and.w	r3, r3, #6
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf02      	ittt	eq
 8003e7a:	68e5      	ldreq	r5, [r4, #12]
 8003e7c:	6833      	ldreq	r3, [r6, #0]
 8003e7e:	1aed      	subeq	r5, r5, r3
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	bf0c      	ite	eq
 8003e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e88:	2500      	movne	r5, #0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfc4      	itt	gt
 8003e8e:	1a9b      	subgt	r3, r3, r2
 8003e90:	18ed      	addgt	r5, r5, r3
 8003e92:	2600      	movs	r6, #0
 8003e94:	341a      	adds	r4, #26
 8003e96:	42b5      	cmp	r5, r6
 8003e98:	d11a      	bne.n	8003ed0 <_printf_common+0xc8>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e008      	b.n	8003eb0 <_printf_common+0xa8>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c8      	blx	r9
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_printf_common+0xac>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7c6      	b.n	8003e46 <_printf_common+0x3e>
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	2030      	movs	r0, #48	@ 0x30
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ec2:	4422      	add	r2, r4
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ecc:	3302      	adds	r3, #2
 8003ece:	e7c7      	b.n	8003e60 <_printf_common+0x58>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	47c8      	blx	r9
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0e6      	beq.n	8003eac <_printf_common+0xa4>
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7d9      	b.n	8003e96 <_printf_common+0x8e>
	...

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eec:	2f78      	cmp	r7, #120	@ 0x78
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	@ 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d2 	beq.w	80040aa <_printf_i+0x1c6>
 8003f06:	2f58      	cmp	r7, #88	@ 0x58
 8003f08:	f000 80b9 	beq.w	800407e <_printf_i+0x19a>
 8003f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	08004091 	.word	0x08004091
 8003f54:	08003fbb 	.word	0x08003fbb
 8003f58:	0800404b 	.word	0x0800404b
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040b3 	.word	0x080040b3
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004053 	.word	0x08004053
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6032      	str	r2, [r6, #0]
 8003f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09d      	b.n	80040cc <_printf_i+0x1e8>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	0606      	lsls	r6, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xbc>
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	e003      	b.n	8003fa8 <_printf_i+0xc4>
 8003fa0:	0645      	lsls	r5, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xb8>
 8003fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	da03      	bge.n	8003fb4 <_printf_i+0xd0>
 8003fac:	232d      	movs	r3, #45	@ 0x2d
 8003fae:	426d      	negs	r5, r5
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb4:	4859      	ldr	r0, [pc, #356]	@ (800411c <_printf_i+0x238>)
 8003fb6:	230a      	movs	r3, #10
 8003fb8:	e011      	b.n	8003fde <_printf_i+0xfa>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	0608      	lsls	r0, r1, #24
 8003fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc4:	d402      	bmi.n	8003fcc <_printf_i+0xe8>
 8003fc6:	0649      	lsls	r1, r1, #25
 8003fc8:	bf48      	it	mi
 8003fca:	b2ad      	uxthmi	r5, r5
 8003fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fce:	4853      	ldr	r0, [pc, #332]	@ (800411c <_printf_i+0x238>)
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	bf14      	ite	ne
 8003fd4:	230a      	movne	r3, #10
 8003fd6:	2308      	moveq	r3, #8
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fde:	6866      	ldr	r6, [r4, #4]
 8003fe0:	60a6      	str	r6, [r4, #8]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	bfa2      	ittt	ge
 8003fe6:	6821      	ldrge	r1, [r4, #0]
 8003fe8:	f021 0104 	bicge.w	r1, r1, #4
 8003fec:	6021      	strge	r1, [r4, #0]
 8003fee:	b90d      	cbnz	r5, 8003ff4 <_printf_i+0x110>
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	d04b      	beq.n	800408c <_printf_i+0x1a8>
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffe:	5dc7      	ldrb	r7, [r0, r7]
 8004000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004004:	462f      	mov	r7, r5
 8004006:	42bb      	cmp	r3, r7
 8004008:	460d      	mov	r5, r1
 800400a:	d9f4      	bls.n	8003ff6 <_printf_i+0x112>
 800400c:	2b08      	cmp	r3, #8
 800400e:	d10b      	bne.n	8004028 <_printf_i+0x144>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	07df      	lsls	r7, r3, #31
 8004014:	d508      	bpl.n	8004028 <_printf_i+0x144>
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	6861      	ldr	r1, [r4, #4]
 800401a:	4299      	cmp	r1, r3
 800401c:	bfde      	ittt	le
 800401e:	2330      	movle	r3, #48	@ 0x30
 8004020:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004024:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004028:	1b92      	subs	r2, r2, r6
 800402a:	6122      	str	r2, [r4, #16]
 800402c:	f8cd a000 	str.w	sl, [sp]
 8004030:	464b      	mov	r3, r9
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4640      	mov	r0, r8
 8004038:	f7ff fee6 	bl	8003e08 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14a      	bne.n	80040d6 <_printf_i+0x1f2>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b004      	add	sp, #16
 8004046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	f043 0320 	orr.w	r3, r3, #32
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	4833      	ldr	r0, [pc, #204]	@ (8004120 <_printf_i+0x23c>)
 8004054:	2778      	movs	r7, #120	@ 0x78
 8004056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6831      	ldr	r1, [r6, #0]
 800405e:	061f      	lsls	r7, r3, #24
 8004060:	f851 5b04 	ldr.w	r5, [r1], #4
 8004064:	d402      	bmi.n	800406c <_printf_i+0x188>
 8004066:	065f      	lsls	r7, r3, #25
 8004068:	bf48      	it	mi
 800406a:	b2ad      	uxthmi	r5, r5
 800406c:	6031      	str	r1, [r6, #0]
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	bf44      	itt	mi
 8004072:	f043 0320 	orrmi.w	r3, r3, #32
 8004076:	6023      	strmi	r3, [r4, #0]
 8004078:	b11d      	cbz	r5, 8004082 <_printf_i+0x19e>
 800407a:	2310      	movs	r3, #16
 800407c:	e7ac      	b.n	8003fd8 <_printf_i+0xf4>
 800407e:	4827      	ldr	r0, [pc, #156]	@ (800411c <_printf_i+0x238>)
 8004080:	e7e9      	b.n	8004056 <_printf_i+0x172>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	f023 0320 	bic.w	r3, r3, #32
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	e7f6      	b.n	800407a <_printf_i+0x196>
 800408c:	4616      	mov	r6, r2
 800408e:	e7bd      	b.n	800400c <_printf_i+0x128>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	6030      	str	r0, [r6, #0]
 800409a:	062e      	lsls	r6, r5, #24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	d501      	bpl.n	80040a4 <_printf_i+0x1c0>
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	e002      	b.n	80040aa <_printf_i+0x1c6>
 80040a4:	0668      	lsls	r0, r5, #25
 80040a6:	d5fb      	bpl.n	80040a0 <_printf_i+0x1bc>
 80040a8:	8019      	strh	r1, [r3, #0]
 80040aa:	2300      	movs	r3, #0
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	4616      	mov	r6, r2
 80040b0:	e7bc      	b.n	800402c <_printf_i+0x148>
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	2100      	movs	r1, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	f7fc f88e 	bl	80001e0 <memchr>
 80040c4:	b108      	cbz	r0, 80040ca <_printf_i+0x1e6>
 80040c6:	1b80      	subs	r0, r0, r6
 80040c8:	6060      	str	r0, [r4, #4]
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	6123      	str	r3, [r4, #16]
 80040ce:	2300      	movs	r3, #0
 80040d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d4:	e7aa      	b.n	800402c <_printf_i+0x148>
 80040d6:	6923      	ldr	r3, [r4, #16]
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	47d0      	blx	sl
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0ad      	beq.n	8004040 <_printf_i+0x15c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	079b      	lsls	r3, r3, #30
 80040e8:	d413      	bmi.n	8004112 <_printf_i+0x22e>
 80040ea:	68e0      	ldr	r0, [r4, #12]
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	4298      	cmp	r0, r3
 80040f0:	bfb8      	it	lt
 80040f2:	4618      	movlt	r0, r3
 80040f4:	e7a6      	b.n	8004044 <_printf_i+0x160>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4632      	mov	r2, r6
 80040fa:	4649      	mov	r1, r9
 80040fc:	4640      	mov	r0, r8
 80040fe:	47d0      	blx	sl
 8004100:	3001      	adds	r0, #1
 8004102:	d09d      	beq.n	8004040 <_printf_i+0x15c>
 8004104:	3501      	adds	r5, #1
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	9903      	ldr	r1, [sp, #12]
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	42ab      	cmp	r3, r5
 800410e:	dcf2      	bgt.n	80040f6 <_printf_i+0x212>
 8004110:	e7eb      	b.n	80040ea <_printf_i+0x206>
 8004112:	2500      	movs	r5, #0
 8004114:	f104 0619 	add.w	r6, r4, #25
 8004118:	e7f5      	b.n	8004106 <_printf_i+0x222>
 800411a:	bf00      	nop
 800411c:	08004265 	.word	0x08004265
 8004120:	08004276 	.word	0x08004276

08004124 <memmove>:
 8004124:	4288      	cmp	r0, r1
 8004126:	b510      	push	{r4, lr}
 8004128:	eb01 0402 	add.w	r4, r1, r2
 800412c:	d902      	bls.n	8004134 <memmove+0x10>
 800412e:	4284      	cmp	r4, r0
 8004130:	4623      	mov	r3, r4
 8004132:	d807      	bhi.n	8004144 <memmove+0x20>
 8004134:	1e43      	subs	r3, r0, #1
 8004136:	42a1      	cmp	r1, r4
 8004138:	d008      	beq.n	800414c <memmove+0x28>
 800413a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800413e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004142:	e7f8      	b.n	8004136 <memmove+0x12>
 8004144:	4402      	add	r2, r0
 8004146:	4601      	mov	r1, r0
 8004148:	428a      	cmp	r2, r1
 800414a:	d100      	bne.n	800414e <memmove+0x2a>
 800414c:	bd10      	pop	{r4, pc}
 800414e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004156:	e7f7      	b.n	8004148 <memmove+0x24>

08004158 <_sbrk_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	4d06      	ldr	r5, [pc, #24]	@ (8004174 <_sbrk_r+0x1c>)
 800415c:	2300      	movs	r3, #0
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	f7fc fab8 	bl	80006d8 <_sbrk>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	d102      	bne.n	8004172 <_sbrk_r+0x1a>
 800416c:	682b      	ldr	r3, [r5, #0]
 800416e:	b103      	cbz	r3, 8004172 <_sbrk_r+0x1a>
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	bd38      	pop	{r3, r4, r5, pc}
 8004174:	20002b98 	.word	0x20002b98

08004178 <_realloc_r>:
 8004178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	4680      	mov	r8, r0
 800417e:	4615      	mov	r5, r2
 8004180:	460c      	mov	r4, r1
 8004182:	b921      	cbnz	r1, 800418e <_realloc_r+0x16>
 8004184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004188:	4611      	mov	r1, r2
 800418a:	f7ff bc59 	b.w	8003a40 <_malloc_r>
 800418e:	b92a      	cbnz	r2, 800419c <_realloc_r+0x24>
 8004190:	f7ff fbea 	bl	8003968 <_free_r>
 8004194:	2400      	movs	r4, #0
 8004196:	4620      	mov	r0, r4
 8004198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800419c:	f000 f81a 	bl	80041d4 <_malloc_usable_size_r>
 80041a0:	4285      	cmp	r5, r0
 80041a2:	4606      	mov	r6, r0
 80041a4:	d802      	bhi.n	80041ac <_realloc_r+0x34>
 80041a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041aa:	d8f4      	bhi.n	8004196 <_realloc_r+0x1e>
 80041ac:	4629      	mov	r1, r5
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7ff fc46 	bl	8003a40 <_malloc_r>
 80041b4:	4607      	mov	r7, r0
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0ec      	beq.n	8004194 <_realloc_r+0x1c>
 80041ba:	42b5      	cmp	r5, r6
 80041bc:	462a      	mov	r2, r5
 80041be:	4621      	mov	r1, r4
 80041c0:	bf28      	it	cs
 80041c2:	4632      	movcs	r2, r6
 80041c4:	f7ff fbc2 	bl	800394c <memcpy>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fbcc 	bl	8003968 <_free_r>
 80041d0:	463c      	mov	r4, r7
 80041d2:	e7e0      	b.n	8004196 <_realloc_r+0x1e>

080041d4 <_malloc_usable_size_r>:
 80041d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d8:	1f18      	subs	r0, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bfbc      	itt	lt
 80041de:	580b      	ldrlt	r3, [r1, r0]
 80041e0:	18c0      	addlt	r0, r0, r3
 80041e2:	4770      	bx	lr

080041e4 <_init>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr

080041f0 <_fini>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr
