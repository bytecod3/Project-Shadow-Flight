
stm32f401ccu6-UART-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003588  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003728  08003728  00004728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800378c  0800378c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003794  08003794  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00004794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800379c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  080037f8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080037f8  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081b4  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001737  00000000  00000000  0000d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054f  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156ca  00000000  00000000  0000f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083e7  00000000  00000000  00024c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085222  00000000  00000000  0002d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2292  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  000b22d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000b4368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003710 	.word	0x08003710

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003710 	.word	0x08003710

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fafe 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f812 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 80005cc:	f000 f8a2 	bl	8000714 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005d0:	f000 f876 	bl	80006c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1, rx_data, 12);
 80005d4:	220c      	movs	r2, #12
 80005d6:	4903      	ldr	r1, [pc, #12]	@ (80005e4 <main+0x28>)
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <main+0x2c>)
 80005da:	f001 feb6 	bl	800234a <HAL_UART_Receive_DMA>
    /* USER CODE BEGIN 3 */

//	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
//	  HAL_Delay(700);

	  DMA_buffer_parser();
 80005de:	f000 f91b 	bl	8000818 <DMA_buffer_parser>
 80005e2:	e7fc      	b.n	80005de <main+0x22>
 80005e4:	20000120 	.word	0x20000120
 80005e8:	20000078 	.word	0x20000078

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fc0a 	bl	8002e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000638:	4a20      	ldr	r2, [pc, #128]	@ (80006bc <SystemClock_Config+0xd0>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000664:	2390      	movs	r3, #144	@ 0x90
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f935 	bl	80018e4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000680:	f000 f94a 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fb97 	bl	8001dd4 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 f934 	bl	8000918 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	@ (8000710 <MX_USART1_UART_Init+0x50>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x4c>)
 80006f8:	f001 fd4c 	bl	8002194 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000702:	f000 f909 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000078 	.word	0x20000078
 8000710:	40011000 	.word	0x40011000

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2044      	movs	r0, #68	@ 0x44
 800073c:	f000 fb8d 	bl	8000e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000740:	2044      	movs	r0, #68	@ 0x44
 8000742:	f000 fba6 	bl	8000e92 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0x9c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <MX_GPIO_Init+0xa0>)
 80007c6:	f001 f873 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80007ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_GPIO_Init+0xa0>)
 80007e4:	f000 fee0 	bl	80015a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800

080007f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	dma_recv_complete = 1;
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <HAL_UART_RxCpltCallback+0x1c>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
	// HAL_UART_Transmit(&huart1, (uint8_t*)"DMA_BUFF: ", strlen("DMA_BUFF: "), 10);
	// HAL_UART_Transmit(&huart1, rx_data, 12, 100);

}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	2000012c 	.word	0x2000012c

08000818 <DMA_buffer_parser>:

// parser received message
void DMA_buffer_parser() {
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	@ 0x40
 800081c:	af00      	add	r7, sp, #0
	if(dma_recv_complete == 1) {
 800081e:	4b3a      	ldr	r3, [pc, #232]	@ (8000908 <DMA_buffer_parser+0xf0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b01      	cmp	r3, #1
 8000826:	d16b      	bne.n	8000900 <DMA_buffer_parser+0xe8>
		dma_recv_complete = 0;
 8000828:	4b37      	ldr	r3, [pc, #220]	@ (8000908 <DMA_buffer_parser+0xf0>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

		 // parse by delimiter
		 // make length a fixed variable
		 char s = '$';
 800082e:	2324      	movs	r3, #36	@ 0x24
 8000830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		 char st = '\r';
 8000834:	230d      	movs	r3, #13
 8000836:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		 uint8_t s_index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		 uint8_t stp_index = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		 char b[25];

		 // look for start character
		 for(int i =0; i < 12; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800084a:	e00f      	b.n	800086c <DMA_buffer_parser+0x54>
			 if(rx_data[i]  != s) {
 800084c:	4a2f      	ldr	r2, [pc, #188]	@ (800090c <DMA_buffer_parser+0xf4>)
 800084e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000858:	429a      	cmp	r2, r3
 800085a:	d103      	bne.n	8000864 <DMA_buffer_parser+0x4c>
				 continue;
			 } else {
				 s_index = i;
 800085c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800085e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000862:	e000      	b.n	8000866 <DMA_buffer_parser+0x4e>
				 continue;
 8000864:	bf00      	nop
		 for(int i =0; i < 12; i++) {
 8000866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000868:	3301      	adds	r3, #1
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800086c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800086e:	2b0b      	cmp	r3, #11
 8000870:	ddec      	ble.n	800084c <DMA_buffer_parser+0x34>
			 }
		 }

		 // look for stop character
		 for(int i =0; i < 12; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
 8000876:	e00f      	b.n	8000898 <DMA_buffer_parser+0x80>
			 if(rx_data[i]  != st) {
 8000878:	4a24      	ldr	r2, [pc, #144]	@ (800090c <DMA_buffer_parser+0xf4>)
 800087a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000884:	429a      	cmp	r2, r3
 8000886:	d103      	bne.n	8000890 <DMA_buffer_parser+0x78>
				 continue;
			 } else {
				 stp_index = i;
 8000888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800088a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800088e:	e000      	b.n	8000892 <DMA_buffer_parser+0x7a>
				 continue;
 8000890:	bf00      	nop
		 for(int i =0; i < 12; i++) {
 8000892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000894:	3301      	adds	r3, #1
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
 8000898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089a:	2b0b      	cmp	r3, #11
 800089c:	ddec      	ble.n	8000878 <DMA_buffer_parser+0x60>
		 }

		 // extract type of message e.g GPGGA
		 char sen_type[6]; // the first 5 characters represne the sentence type
		 char val[5];
		 for(int i = s_index + 1; i < 6; i++) {
 800089e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008a2:	3301      	adds	r3, #1
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80008a6:	e00c      	b.n	80008c2 <DMA_buffer_parser+0xaa>
			 sen_type[i] = rx_data[i];
 80008a8:	4a18      	ldr	r2, [pc, #96]	@ (800090c <DMA_buffer_parser+0xf4>)
 80008aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ac:	4413      	add	r3, r2
 80008ae:	7819      	ldrb	r1, [r3, #0]
 80008b0:	f107 020c 	add.w	r2, r7, #12
 80008b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b6:	4413      	add	r3, r2
 80008b8:	460a      	mov	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
		 for(int i = s_index + 1; i < 6; i++) {
 80008bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008be:	3301      	adds	r3, #1
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80008c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	ddef      	ble.n	80008a8 <DMA_buffer_parser+0x90>
		 }
		 sen_type[6] = '\0'; // nul terminate
 80008c8:	2300      	movs	r3, #0
 80008ca:	74bb      	strb	r3, [r7, #18]


		 sprintf(b, "sentype: %s \r\n", sen_type);
 80008cc:	f107 020c 	add.w	r2, r7, #12
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	490e      	ldr	r1, [pc, #56]	@ (8000910 <DMA_buffer_parser+0xf8>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fa7a 	bl	8002dd0 <siprintf>
		 //HAL_UART_Transmit(&huart1, (uint8_t*) b, strlen(b), 100);

		 HAL_UART_Transmit(&huart1, (uint8_t*) sen_type, strlen(b), 100);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc7d 	bl	80001e0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f107 010c 	add.w	r1, r7, #12
 80008ee:	2364      	movs	r3, #100	@ 0x64
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <DMA_buffer_parser+0xfc>)
 80008f2:	f001 fc9f 	bl	8002234 <HAL_UART_Transmit>

		 // restart DMA to continuously receive DMA data
		 HAL_UART_Receive_DMA(&huart1, rx_data, 12);
 80008f6:	220c      	movs	r2, #12
 80008f8:	4904      	ldr	r1, [pc, #16]	@ (800090c <DMA_buffer_parser+0xf4>)
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <DMA_buffer_parser+0xfc>)
 80008fc:	f001 fd25 	bl	800234a <HAL_UART_Receive_DMA>

	}
}
 8000900:	bf00      	nop
 8000902:	3740      	adds	r7, #64	@ 0x40
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000012c 	.word	0x2000012c
 800090c:	20000120 	.word	0x20000120
 8000910:	08003728 	.word	0x08003728
 8000914:	20000078 	.word	0x20000078

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	@ (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a30      	ldr	r2, [pc, #192]	@ (8000a54 <HAL_UART_MspInit+0xe0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d15a      	bne.n	8000a4c <HAL_UART_MspInit+0xd8>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a27      	ldr	r2, [pc, #156]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e0:	2307      	movs	r3, #7
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <HAL_UART_MspInit+0xe8>)
 80009ec:	f000 fddc 	bl	80015a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a64 <HAL_UART_MspInit+0xf0>)
 80009f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 80009f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a32:	f000 fa49 	bl	8000ec8 <HAL_DMA_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a3c:	f7ff ff6c 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a07      	ldr	r2, [pc, #28]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a46:	4a06      	ldr	r2, [pc, #24]	@ (8000a60 <HAL_UART_MspInit+0xec>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40011000 	.word	0x40011000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	200000c0 	.word	0x200000c0
 8000a64:	40026488 	.word	0x40026488

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abe:	f000 f8d1 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <DMA2_Stream5_IRQHandler+0x10>)
 8000ace:	f000 fb01 	bl	80010d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200000c0 	.word	0x200000c0

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f002 f98a 	bl	8002e24 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20010000 	.word	0x20010000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000130 	.word	0x20000130
 8000b44:	20000280 	.word	0x20000280

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	@ (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f002 f949 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fd0d 	bl	80005bc <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bb0:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8000bb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bb8:	20000280 	.word	0x20000280

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f92b 	bl	8000e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe96 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f943 	bl	8000eae <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 f90b 	bl	8000e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000134 	.word	0x20000134

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000134 	.word	0x20000134

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4907      	ldr	r1, [pc, #28]	@ (8000d40 <__NVIC_EnableIRQ+0x38>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	@ (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	@ (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	@ 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e10:	d301      	bcc.n	8000e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00f      	b.n	8000e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <SysTick_Config+0x40>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1e:	210f      	movs	r1, #15
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e24:	f7ff ff8e 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <SysTick_Config+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <SysTick_Config+0x40>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ff29 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e6c:	f7ff ff3e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff ff8e 	bl	8000d98 <NVIC_EncodePriority>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff5d 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff31 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffa2 	bl	8000e00 <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff feda 	bl	8000c8c <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e099      	b.n	8001018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f04:	e00f      	b.n	8000f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f06:	f7ff fec1 	bl	8000c8c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d908      	bls.n	8000f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2220      	movs	r2, #32
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e078      	b.n	8001018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e8      	bne.n	8000f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	4b38      	ldr	r3, [pc, #224]	@ (8001020 <HAL_DMA_Init+0x158>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d107      	bne.n	8000f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f023 0307 	bic.w	r3, r3, #7
 8000fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d117      	bne.n	8000fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00e      	beq.n	8000fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fa6f 	bl	80014b0 <DMA_CheckFifoParam>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2240      	movs	r2, #64	@ 0x40
 8000fdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e016      	b.n	8001018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fa26 	bl	8001444 <DMA_CalcBaseAndBitshift>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001000:	223f      	movs	r2, #63	@ 0x3f
 8001002:	409a      	lsls	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	f010803f 	.word	0xf010803f

08001024 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_DMA_Start_IT+0x26>
 8001046:	2302      	movs	r3, #2
 8001048:	e040      	b.n	80010cc <HAL_DMA_Start_IT+0xa8>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d12f      	bne.n	80010be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2202      	movs	r2, #2
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f9b8 	bl	80013e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800107c:	223f      	movs	r2, #63	@ 0x3f
 800107e:	409a      	lsls	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0216 	orr.w	r2, r2, #22
 8001092:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0208 	orr.w	r2, r2, #8
 80010aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e005      	b.n	80010ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010c6:	2302      	movs	r3, #2
 80010c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010e0:	4b8e      	ldr	r3, [pc, #568]	@ (800131c <HAL_DMA_IRQHandler+0x248>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a8e      	ldr	r2, [pc, #568]	@ (8001320 <HAL_DMA_IRQHandler+0x24c>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0a9b      	lsrs	r3, r3, #10
 80010ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010fe:	2208      	movs	r2, #8
 8001100:	409a      	lsls	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01a      	beq.n	8001140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0204 	bic.w	r2, r2, #4
 8001126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800112c:	2208      	movs	r2, #8
 800112e:	409a      	lsls	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001144:	2201      	movs	r2, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d012      	beq.n	8001176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116e:	f043 0202 	orr.w	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117a:	2204      	movs	r2, #4
 800117c:	409a      	lsls	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d012      	beq.n	80011ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001198:	2204      	movs	r2, #4
 800119a:	409a      	lsls	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a4:	f043 0204 	orr.w	r2, r3, #4
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	2210      	movs	r2, #16
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d043      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03c      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ce:	2210      	movs	r2, #16
 80011d0:	409a      	lsls	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d018      	beq.n	8001216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d024      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
 8001202:	e01f      	b.n	8001244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01b      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
 8001214:	e016      	b.n	8001244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0208 	bic.w	r2, r2, #8
 8001232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001248:	2220      	movs	r2, #32
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 808f 	beq.w	8001374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 8087 	beq.w	8001374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	2220      	movs	r2, #32
 800126c:	409a      	lsls	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b05      	cmp	r3, #5
 800127c:	d136      	bne.n	80012ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0216 	bic.w	r2, r2, #22
 800128c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800129c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <HAL_DMA_IRQHandler+0x1da>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0208 	bic.w	r2, r2, #8
 80012bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c2:	223f      	movs	r2, #63	@ 0x3f
 80012c4:	409a      	lsls	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d07e      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
        }
        return;
 80012ea:	e079      	b.n	80013e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01d      	beq.n	8001336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10d      	bne.n	8001324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	2b00      	cmp	r3, #0
 800130e:	d031      	beq.n	8001374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
 8001318:	e02c      	b.n	8001374 <HAL_DMA_IRQHandler+0x2a0>
 800131a:	bf00      	nop
 800131c:	20000000 	.word	0x20000000
 8001320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001328:	2b00      	cmp	r3, #0
 800132a:	d023      	beq.n	8001374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
 8001334:	e01e      	b.n	8001374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10f      	bne.n	8001364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0210 	bic.w	r2, r2, #16
 8001352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001378:	2b00      	cmp	r3, #0
 800137a:	d032      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d022      	beq.n	80013ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2205      	movs	r2, #5
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d307      	bcc.n	80013bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f2      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x2cc>
 80013ba:	e000      	b.n	80013be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
 80013de:	e000      	b.n	80013e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80013e0:	bf00      	nop
    }
  }
}
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b40      	cmp	r3, #64	@ 0x40
 8001414:	d108      	bne.n	8001428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001426:	e007      	b.n	8001438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	60da      	str	r2, [r3, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	3b10      	subs	r3, #16
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <DMA_CalcBaseAndBitshift+0x68>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d909      	bls.n	8001486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	1d1a      	adds	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	659a      	str	r2, [r3, #88]	@ 0x58
 8001484:	e007      	b.n	8001496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800148e:	f023 0303 	bic.w	r3, r3, #3
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	aaaaaaab 	.word	0xaaaaaaab
 80014ac:	08003750 	.word	0x08003750

080014b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d11f      	bne.n	800150a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d856      	bhi.n	800157e <DMA_CheckFifoParam+0xce>
 80014d0:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <DMA_CheckFifoParam+0x28>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014fb 	.word	0x080014fb
 80014e0:	080014e9 	.word	0x080014e9
 80014e4:	0800157f 	.word	0x0800157f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d046      	beq.n	8001582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f8:	e043      	b.n	8001582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001502:	d140      	bne.n	8001586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001508:	e03d      	b.n	8001586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001512:	d121      	bne.n	8001558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d837      	bhi.n	800158a <DMA_CheckFifoParam+0xda>
 800151a:	a201      	add	r2, pc, #4	@ (adr r2, 8001520 <DMA_CheckFifoParam+0x70>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001531 	.word	0x08001531
 8001524:	08001537 	.word	0x08001537
 8001528:	08001531 	.word	0x08001531
 800152c:	08001549 	.word	0x08001549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
      break;
 8001534:	e030      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d025      	beq.n	800158e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001546:	e022      	b.n	800158e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001550:	d11f      	bne.n	8001592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001556:	e01c      	b.n	8001592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d903      	bls.n	8001566 <DMA_CheckFifoParam+0xb6>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d003      	beq.n	800156c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001564:	e018      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
      break;
 800156a:	e015      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
      break;
 800157c:	e00b      	b.n	8001596 <DMA_CheckFifoParam+0xe6>
      break;
 800157e:	bf00      	nop
 8001580:	e00a      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001582:	bf00      	nop
 8001584:	e008      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001586:	bf00      	nop
 8001588:	e006      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 800158a:	bf00      	nop
 800158c:	e004      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 800158e:	bf00      	nop
 8001590:	e002      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;   
 8001592:	bf00      	nop
 8001594:	e000      	b.n	8001598 <DMA_CheckFifoParam+0xe8>
      break;
 8001596:	bf00      	nop
    }
  } 
  
  return status; 
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e159      	b.n	8001878 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 8148 	bne.w	8001872 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a2 	beq.w	8001872 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <HAL_GPIO_Init+0x2e8>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	4a56      	ldr	r2, [pc, #344]	@ (8001890 <HAL_GPIO_Init+0x2e8>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173c:	6453      	str	r3, [r2, #68]	@ 0x44
 800173e:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <HAL_GPIO_Init+0x2e8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a52      	ldr	r2, [pc, #328]	@ (8001894 <HAL_GPIO_Init+0x2ec>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a49      	ldr	r2, [pc, #292]	@ (8001898 <HAL_GPIO_Init+0x2f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x202>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a48      	ldr	r2, [pc, #288]	@ (800189c <HAL_GPIO_Init+0x2f4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x1fe>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a47      	ldr	r2, [pc, #284]	@ (80018a0 <HAL_GPIO_Init+0x2f8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x1fa>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a46      	ldr	r2, [pc, #280]	@ (80018a4 <HAL_GPIO_Init+0x2fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x1f6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a45      	ldr	r2, [pc, #276]	@ (80018a8 <HAL_GPIO_Init+0x300>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x1f2>
 8001796:	2304      	movs	r3, #4
 8001798:	e008      	b.n	80017ac <HAL_GPIO_Init+0x204>
 800179a:	2307      	movs	r3, #7
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x204>
 800179e:	2303      	movs	r3, #3
 80017a0:	e004      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x204>
 80017aa:	2300      	movs	r3, #0
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	f002 0203 	and.w	r2, r2, #3
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017bc:	4935      	ldr	r1, [pc, #212]	@ (8001894 <HAL_GPIO_Init+0x2ec>)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <HAL_GPIO_Init+0x304>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ee:	4a2f      	ldr	r2, [pc, #188]	@ (80018ac <HAL_GPIO_Init+0x304>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f4:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <HAL_GPIO_Init+0x304>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001818:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <HAL_GPIO_Init+0x304>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_GPIO_Init+0x304>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_GPIO_Init+0x304>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <HAL_GPIO_Init+0x304>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186c:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <HAL_GPIO_Init+0x304>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	f67f aea2 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3724      	adds	r7, #36	@ 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40013800 	.word	0x40013800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020c00 	.word	0x40020c00
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e267      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d075      	beq.n	80019ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001902:	4b88      	ldr	r3, [pc, #544]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b85      	ldr	r3, [pc, #532]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001916:	2b08      	cmp	r3, #8
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b82      	ldr	r3, [pc, #520]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b7e      	ldr	r3, [pc, #504]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x108>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e242      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x74>
 800194a:	4b76      	ldr	r3, [pc, #472]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x98>
 8001962:	4b70      	ldr	r3, [pc, #448]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6f      	ldr	r2, [pc, #444]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6c      	ldr	r2, [pc, #432]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xb0>
 800197c:	4b69      	ldr	r3, [pc, #420]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a68      	ldr	r2, [pc, #416]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a65      	ldr	r2, [pc, #404]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f976 	bl	8000c8c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f972 	bl	8000c8c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e207      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xc0>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f962 	bl	8000c8c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f95e 	bl	8000c8c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1f3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b51      	ldr	r3, [pc, #324]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0xe8>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b44      	ldr	r3, [pc, #272]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3b      	ldr	r3, [pc, #236]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4937      	ldr	r1, [pc, #220]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f917 	bl	8000c8c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f913 	bl	8000c8c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1a8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4925      	ldr	r1, [pc, #148]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_RCC_OscConfig+0x244>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8f6 	bl	8000c8c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f8f2 	bl	8000c8c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e187      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d016      	beq.n	8001b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f8d6 	bl	8000c8c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f8d2 	bl	8000c8c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e167      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_OscConfig+0x240>)
 8001af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x200>
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_RCC_OscConfig+0x248>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f8bf 	bl	8000c8c <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f8bb 	bl	8000c8c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e150      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b88      	ldr	r3, [pc, #544]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8097 	beq.w	8001c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b81      	ldr	r3, [pc, #516]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a7c      	ldr	r2, [pc, #496]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b77      	ldr	r3, [pc, #476]	@ (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b74      	ldr	r3, [pc, #464]	@ (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a73      	ldr	r2, [pc, #460]	@ (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f87b 	bl	8000c8c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff f877 	bl	8000c8c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e10c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b6a      	ldr	r3, [pc, #424]	@ (8001d58 <HAL_RCC_OscConfig+0x474>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x2ea>
 8001bc0:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc4:	4a63      	ldr	r2, [pc, #396]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x30c>
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	4a5e      	ldr	r2, [pc, #376]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x324>
 8001bf0:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	4a57      	ldr	r2, [pc, #348]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfc:	4b55      	ldr	r3, [pc, #340]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c00:	4a54      	ldr	r2, [pc, #336]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f83c 	bl	8000c8c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f838 	bl	8000c8c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0cb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b49      	ldr	r3, [pc, #292]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCC_OscConfig+0x334>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f826 	bl	8000c8c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f822 	bl	8000c8c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0b5      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	4a38      	ldr	r2, [pc, #224]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a1 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d05c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d141      	bne.n	8001d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fff6 	bl	8000c8c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe fff2 	bl	8000c8c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e087      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	491b      	ldr	r1, [pc, #108]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe ffcb 	bl	8000c8c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe ffc7 	bl	8000c8c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e05c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x416>
 8001d18:	e054      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe ffb4 	bl	8000c8c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe ffb0 	bl	8000c8c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x444>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e038      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_RCC_OscConfig+0x4ec>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d028      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d121      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11a      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	3b01      	subs	r3, #1
 8001daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cc      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b68      	ldr	r3, [pc, #416]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90c      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b65      	ldr	r3, [pc, #404]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d044      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e067      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b37      	ldr	r3, [pc, #220]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4934      	ldr	r1, [pc, #208]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fee2 	bl	8000c8c <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fede 	bl	8000c8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d20c      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fe42 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08003738 	.word	0x08003738
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b090      	sub	sp, #64	@ 0x40
 8001fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb8:	4b59      	ldr	r3, [pc, #356]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	f200 80a1 	bhi.w	800210c <HAL_RCC_GetSysClockFreq+0x16c>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x3a>
 8001fd2:	e09b      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fd8:	e09b      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fde:	e098      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d028      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	627a      	str	r2, [r7, #36]	@ 0x24
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002008:	2100      	movs	r1, #0
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800200c:	fb03 f201 	mul.w	r2, r3, r1
 8002010:	2300      	movs	r3, #0
 8002012:	fb00 f303 	mul.w	r3, r0, r3
 8002016:	4413      	add	r3, r2
 8002018:	4a43      	ldr	r2, [pc, #268]	@ (8002128 <HAL_RCC_GetSysClockFreq+0x188>)
 800201a:	fba0 1202 	umull	r1, r2, r0, r2
 800201e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002020:	460a      	mov	r2, r1
 8002022:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002026:	4413      	add	r3, r2
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800202a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202c:	2200      	movs	r2, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	61fa      	str	r2, [r7, #28]
 8002032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002036:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800203a:	f7fe f929 	bl	8000290 <__aeabi_uldivmod>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4613      	mov	r3, r2
 8002044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002046:	e053      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	2200      	movs	r2, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	617a      	str	r2, [r7, #20]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800205a:	f04f 0b00 	mov.w	fp, #0
 800205e:	4652      	mov	r2, sl
 8002060:	465b      	mov	r3, fp
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	ebb2 080a 	subs.w	r8, r2, sl
 800207a:	eb63 090b 	sbc.w	r9, r3, fp
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800208a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002092:	ebb2 0408 	subs.w	r4, r2, r8
 8002096:	eb63 0509 	sbc.w	r5, r3, r9
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	00eb      	lsls	r3, r5, #3
 80020a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a8:	00e2      	lsls	r2, r4, #3
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	eb14 030a 	adds.w	r3, r4, sl
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	eb45 030b 	adc.w	r3, r5, fp
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c6:	4629      	mov	r1, r5
 80020c8:	028b      	lsls	r3, r1, #10
 80020ca:	4621      	mov	r1, r4
 80020cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d0:	4621      	mov	r1, r4
 80020d2:	028a      	lsls	r2, r1, #10
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020da:	2200      	movs	r2, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e4:	f7fe f8d4 	bl	8000290 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x184>)
 800210e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002114:	4618      	mov	r0, r3
 8002116:	3740      	adds	r7, #64	@ 0x40
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	00f42400 	.word	0x00f42400
 8002128:	017d7840 	.word	0x017d7840

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002148:	f7ff fff0 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0a9b      	lsrs	r3, r3, #10
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4903      	ldr	r1, [pc, #12]	@ (8002168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800215a:	5ccb      	ldrb	r3, [r1, r3]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	08003748 	.word	0x08003748

0800216c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002170:	f7ff ffdc 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0b5b      	lsrs	r3, r3, #13
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	08003748 	.word	0x08003748

08002194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e042      	b.n	800222c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fbda 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	@ 0x24
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fb85 	bl	80028e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800220c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	d175      	bne.n	8002340 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_UART_Transmit+0x2c>
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e06e      	b.n	8002342 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2221      	movs	r2, #33	@ 0x21
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002272:	f7fe fd0b 	bl	8000c8c <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800228c:	d108      	bne.n	80022a0 <HAL_UART_Transmit+0x6c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	e003      	b.n	80022a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022a8:	e02e      	b.n	8002308 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2180      	movs	r1, #128	@ 0x80
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f98b 	bl	80025d0 <UART_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e03a      	b.n	8002342 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	3302      	adds	r3, #2
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e007      	b.n	80022fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1cb      	bne.n	80022aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2200      	movs	r2, #0
 800231a:	2140      	movs	r1, #64	@ 0x40
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 f957 	bl	80025d0 <UART_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b20      	cmp	r3, #32
 8002362:	d112      	bne.n	800238a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Receive_DMA+0x26>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e00b      	b.n	800238c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	461a      	mov	r2, r3
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f97f 	bl	8002684 <UART_Start_Receive_DMA>
 8002386:	4603      	mov	r3, r0
 8002388:	e000      	b.n	800238c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09c      	sub	sp, #112	@ 0x70
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d172      	bne.n	80024d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80023f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f2:	2200      	movs	r2, #0
 80023f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002400:	e853 3f00 	ldrex	r3, [r3]
 8002404:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800240c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800240e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002416:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002418:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800241c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e5      	bne.n	80023f6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3314      	adds	r3, #20
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002434:	e853 3f00 	ldrex	r3, [r3]
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	667b      	str	r3, [r7, #100]	@ 0x64
 8002442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800244a:	647a      	str	r2, [r7, #68]	@ 0x44
 800244c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002450:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002452:	e841 2300 	strex	r3, r2, [r1]
 8002456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1e5      	bne.n	800242a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800245e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3314      	adds	r3, #20
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	e853 3f00 	ldrex	r3, [r3]
 800246c:	623b      	str	r3, [r7, #32]
   return(result);
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002474:	663b      	str	r3, [r7, #96]	@ 0x60
 8002476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3314      	adds	r3, #20
 800247c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800247e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002486:	e841 2300 	strex	r3, r2, [r1]
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1e5      	bne.n	800245e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002494:	2220      	movs	r2, #32
 8002496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800249a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d119      	bne.n	80024d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f023 0310 	bic.w	r3, r3, #16
 80024b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80024c2:	61fa      	str	r2, [r7, #28]
 80024c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	617b      	str	r3, [r7, #20]
   return(result);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e5      	bne.n	80024a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d8:	2200      	movs	r2, #0
 80024da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80024ec:	f7ff ff66 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024f0:	e002      	b.n	80024f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80024f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80024f4:	f7fe f980 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 80024f8:	bf00      	nop
 80024fa:	3770      	adds	r7, #112	@ 0x70
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	4619      	mov	r1, r3
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff ff48 	bl	80023bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800252c:	e002      	b.n	8002534 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff ff30 	bl	8002394 <HAL_UART_RxHalfCpltCallback>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b21      	cmp	r3, #33	@ 0x21
 800256e:	d108      	bne.n	8002582 <UART_DMAError+0x46>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2200      	movs	r2, #0
 800257a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800257c:	68b8      	ldr	r0, [r7, #8]
 800257e:	f000 f927 	bl	80027d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258c:	2b40      	cmp	r3, #64	@ 0x40
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b22      	cmp	r3, #34	@ 0x22
 80025a2:	d108      	bne.n	80025b6 <UART_DMAError+0x7a>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	f000 f935 	bl	8002820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f7ff fef0 	bl	80023a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e0:	e03b      	b.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e8:	d037      	beq.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7fe fb4f 	bl	8000c8c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <UART_WaitOnFlagUntilTimeout+0x30>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e03a      	b.n	800267a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b80      	cmp	r3, #128	@ 0x80
 8002616:	d020      	beq.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b40      	cmp	r3, #64	@ 0x40
 800261c:	d01d      	beq.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b08      	cmp	r3, #8
 800262a:	d116      	bne.n	800265a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f8ec 	bl	8002820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2208      	movs	r2, #8
 800264c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00f      	b.n	800267a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4013      	ands	r3, r2
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	429a      	cmp	r2, r3
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	429a      	cmp	r2, r3
 8002676:	d0b4      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b098      	sub	sp, #96	@ 0x60
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	@ 0x22
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b0:	4a44      	ldr	r2, [pc, #272]	@ (80027c4 <UART_Start_Receive_DMA+0x140>)
 80026b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b8:	4a43      	ldr	r2, [pc, #268]	@ (80027c8 <UART_Start_Receive_DMA+0x144>)
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	4a42      	ldr	r2, [pc, #264]	@ (80027cc <UART_Start_Receive_DMA+0x148>)
 80026c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	2200      	movs	r2, #0
 80026ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3304      	adds	r3, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	f7fe fc9e 	bl	8001024 <HAL_DMA_Start_IT>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2210      	movs	r2, #16
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e05d      	b.n	80027bc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	330c      	adds	r3, #12
 8002724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002728:	e853 3f00 	ldrex	r3, [r3]
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800272e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	330c      	adds	r3, #12
 800273c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800273e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002740:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800274c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e5      	bne.n	800271e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275c:	e853 3f00 	ldrex	r3, [r3]
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	657b      	str	r3, [r7, #84]	@ 0x54
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002772:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002776:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800277a:	e841 2300 	strex	r3, r2, [r1]
 800277e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e5      	bne.n	8002752 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	617b      	str	r3, [r7, #20]
   return(result);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800279c:	653b      	str	r3, [r7, #80]	@ 0x50
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3314      	adds	r3, #20
 80027a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80027a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e5      	bne.n	8002786 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3760      	adds	r7, #96	@ 0x60
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080023d5 	.word	0x080023d5
 80027c8:	08002501 	.word	0x08002501
 80027cc:	0800253d 	.word	0x0800253d

080027d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	@ 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80027ee:	61fb      	str	r3, [r7, #28]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	61ba      	str	r2, [r7, #24]
 80027fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	613b      	str	r3, [r7, #16]
   return(result);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002814:	bf00      	nop
 8002816:	3724      	adds	r7, #36	@ 0x24
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002820:	b480      	push	{r7}
 8002822:	b095      	sub	sp, #84	@ 0x54
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002848:	643a      	str	r2, [r7, #64]	@ 0x40
 800284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800284e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	61fb      	str	r3, [r7, #28]
   return(result);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800287c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002884:	e841 2300 	strex	r3, r2, [r1]
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1e5      	bne.n	800285c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	2b01      	cmp	r3, #1
 8002896:	d119      	bne.n	80028cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	e853 3f00 	ldrex	r3, [r3]
 80028a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b8:	61ba      	str	r2, [r7, #24]
 80028ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	6979      	ldr	r1, [r7, #20]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	e841 2300 	strex	r3, r2, [r1]
 80028c4:	613b      	str	r3, [r7, #16]
   return(result);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e5      	bne.n	8002898 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028da:	bf00      	nop
 80028dc:	3754      	adds	r7, #84	@ 0x54
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ec:	b0c0      	sub	sp, #256	@ 0x100
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	68d9      	ldr	r1, [r3, #12]
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	ea40 0301 	orr.w	r3, r0, r1
 8002910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	431a      	orrs	r2, r3
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002940:	f021 010c 	bic.w	r1, r1, #12
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800294e:	430b      	orrs	r3, r1
 8002950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002962:	6999      	ldr	r1, [r3, #24]
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	ea40 0301 	orr.w	r3, r0, r1
 800296e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb4 <UART_SetConfig+0x2cc>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d005      	beq.n	8002988 <UART_SetConfig+0xa0>
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb8 <UART_SetConfig+0x2d0>)
 8002984:	429a      	cmp	r2, r3
 8002986:	d104      	bne.n	8002992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002988:	f7ff fbf0 	bl	800216c <HAL_RCC_GetPCLK2Freq>
 800298c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002990:	e003      	b.n	800299a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002992:	f7ff fbd7 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8002996:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a4:	f040 810c 	bne.w	8002bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029c2:	415b      	adcs	r3, r3
 80029c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029ca:	4621      	mov	r1, r4
 80029cc:	eb12 0801 	adds.w	r8, r2, r1
 80029d0:	4629      	mov	r1, r5
 80029d2:	eb43 0901 	adc.w	r9, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ea:	4690      	mov	r8, r2
 80029ec:	4699      	mov	r9, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	eb18 0303 	adds.w	r3, r8, r3
 80029f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029f8:	462b      	mov	r3, r5
 80029fa:	eb49 0303 	adc.w	r3, r9, r3
 80029fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a16:	460b      	mov	r3, r1
 8002a18:	18db      	adds	r3, r3, r3
 8002a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	eb42 0303 	adc.w	r3, r2, r3
 8002a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a2c:	f7fd fc30 	bl	8000290 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <UART_SetConfig+0x2d4>)
 8002a36:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	011c      	lsls	r4, r3, #4
 8002a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a60:	4641      	mov	r1, r8
 8002a62:	eb12 0a01 	adds.w	sl, r2, r1
 8002a66:	4649      	mov	r1, r9
 8002a68:	eb43 0b01 	adc.w	fp, r3, r1
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a80:	4692      	mov	sl, r2
 8002a82:	469b      	mov	fp, r3
 8002a84:	4643      	mov	r3, r8
 8002a86:	eb1a 0303 	adds.w	r3, sl, r3
 8002a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb4b 0303 	adc.w	r3, fp, r3
 8002a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aac:	460b      	mov	r3, r1
 8002aae:	18db      	adds	r3, r3, r3
 8002ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ac2:	f7fd fbe5 	bl	8000290 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bbc <UART_SetConfig+0x2d4>)
 8002ace:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	2264      	movs	r2, #100	@ 0x64
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	1acb      	subs	r3, r1, r3
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <UART_SetConfig+0x2d4>)
 8002ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002af0:	441c      	add	r4, r3
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002afc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	1891      	adds	r1, r2, r2
 8002b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b0c:	415b      	adcs	r3, r3
 8002b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b14:	4641      	mov	r1, r8
 8002b16:	1851      	adds	r1, r2, r1
 8002b18:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	414b      	adcs	r3, r1
 8002b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	00cb      	lsls	r3, r1, #3
 8002b30:	4651      	mov	r1, sl
 8002b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b36:	4651      	mov	r1, sl
 8002b38:	00ca      	lsls	r2, r1, #3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4642      	mov	r2, r8
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b48:	464b      	mov	r3, r9
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b68:	460b      	mov	r3, r1
 8002b6a:	18db      	adds	r3, r3, r3
 8002b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b6e:	4613      	mov	r3, r2
 8002b70:	eb42 0303 	adc.w	r3, r2, r3
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b7e:	f7fd fb87 	bl	8000290 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <UART_SetConfig+0x2d4>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	@ 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3332      	adds	r3, #50	@ 0x32
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <UART_SetConfig+0x2d4>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 0207 	and.w	r2, r3, #7
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4422      	add	r2, r4
 8002bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bb0:	e106      	b.n	8002dc0 <UART_SetConfig+0x4d8>
 8002bb2:	bf00      	nop
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	1891      	adds	r1, r2, r2
 8002bd8:	6239      	str	r1, [r7, #32]
 8002bda:	415b      	adcs	r3, r3
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002be2:	4641      	mov	r1, r8
 8002be4:	1854      	adds	r4, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb43 0501 	adc.w	r5, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfa:	00e2      	lsls	r2, r4, #3
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4643      	mov	r3, r8
 8002c02:	18e3      	adds	r3, r4, r3
 8002c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c08:	464b      	mov	r3, r9
 8002c0a:	eb45 0303 	adc.w	r3, r5, r3
 8002c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c2e:	4629      	mov	r1, r5
 8002c30:	008b      	lsls	r3, r1, #2
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c38:	4621      	mov	r1, r4
 8002c3a:	008a      	lsls	r2, r1, #2
 8002c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c40:	f7fd fb26 	bl	8000290 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4b60      	ldr	r3, [pc, #384]	@ (8002dcc <UART_SetConfig+0x4e4>)
 8002c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	011c      	lsls	r4, r3, #4
 8002c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c64:	4642      	mov	r2, r8
 8002c66:	464b      	mov	r3, r9
 8002c68:	1891      	adds	r1, r2, r2
 8002c6a:	61b9      	str	r1, [r7, #24]
 8002c6c:	415b      	adcs	r3, r3
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	4641      	mov	r1, r8
 8002c76:	1851      	adds	r1, r2, r1
 8002c78:	6139      	str	r1, [r7, #16]
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	414b      	adcs	r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	00cb      	lsls	r3, r1, #3
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c96:	4651      	mov	r1, sl
 8002c98:	00ca      	lsls	r2, r1, #3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ca8:	464b      	mov	r3, r9
 8002caa:	460a      	mov	r2, r1
 8002cac:	eb42 0303 	adc.w	r3, r2, r3
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ccc:	4649      	mov	r1, r9
 8002cce:	008b      	lsls	r3, r1, #2
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	008a      	lsls	r2, r1, #2
 8002cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cde:	f7fd fad7 	bl	8000290 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4b38      	ldr	r3, [pc, #224]	@ (8002dcc <UART_SetConfig+0x4e4>)
 8002cea:	fba3 2301 	umull	r2, r3, r3, r1
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2264      	movs	r2, #100	@ 0x64
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	1acb      	subs	r3, r1, r3
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	3332      	adds	r3, #50	@ 0x32
 8002cfc:	4a33      	ldr	r2, [pc, #204]	@ (8002dcc <UART_SetConfig+0x4e4>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d08:	441c      	add	r4, r3
 8002d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d0e:	2200      	movs	r2, #0
 8002d10:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d12:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	1891      	adds	r1, r2, r2
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	415b      	adcs	r3, r3
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d28:	4641      	mov	r1, r8
 8002d2a:	1851      	adds	r1, r2, r1
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	4649      	mov	r1, r9
 8002d30:	414b      	adcs	r3, r1
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d40:	4659      	mov	r1, fp
 8002d42:	00cb      	lsls	r3, r1, #3
 8002d44:	4651      	mov	r1, sl
 8002d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	00ca      	lsls	r2, r1, #3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	4642      	mov	r2, r8
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	eb42 0303 	adc.w	r3, r2, r3
 8002d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	4641      	mov	r1, r8
 8002d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d86:	4641      	mov	r1, r8
 8002d88:	008a      	lsls	r2, r1, #2
 8002d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d8e:	f7fd fa7f 	bl	8000290 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <UART_SetConfig+0x4e4>)
 8002d98:	fba3 1302 	umull	r1, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	2164      	movs	r1, #100	@ 0x64
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	3332      	adds	r3, #50	@ 0x32
 8002daa:	4a08      	ldr	r2, [pc, #32]	@ (8002dcc <UART_SetConfig+0x4e4>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4422      	add	r2, r4
 8002dbe:	609a      	str	r2, [r3, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dcc:	51eb851f 	.word	0x51eb851f

08002dd0 <siprintf>:
 8002dd0:	b40e      	push	{r1, r2, r3}
 8002dd2:	b510      	push	{r4, lr}
 8002dd4:	b09d      	sub	sp, #116	@ 0x74
 8002dd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002dd8:	9002      	str	r0, [sp, #8]
 8002dda:	9006      	str	r0, [sp, #24]
 8002ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002de0:	480a      	ldr	r0, [pc, #40]	@ (8002e0c <siprintf+0x3c>)
 8002de2:	9107      	str	r1, [sp, #28]
 8002de4:	9104      	str	r1, [sp, #16]
 8002de6:	490a      	ldr	r1, [pc, #40]	@ (8002e10 <siprintf+0x40>)
 8002de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dec:	9105      	str	r1, [sp, #20]
 8002dee:	2400      	movs	r4, #0
 8002df0:	a902      	add	r1, sp, #8
 8002df2:	6800      	ldr	r0, [r0, #0]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002df8:	f000 f994 	bl	8003124 <_svfiprintf_r>
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	701c      	strb	r4, [r3, #0]
 8002e00:	b01d      	add	sp, #116	@ 0x74
 8002e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e06:	b003      	add	sp, #12
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c
 8002e10:	ffff0208 	.word	0xffff0208

08002e14 <memset>:
 8002e14:	4402      	add	r2, r0
 8002e16:	4603      	mov	r3, r0
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <memset+0xa>
 8002e1c:	4770      	bx	lr
 8002e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e22:	e7f9      	b.n	8002e18 <memset+0x4>

08002e24 <__errno>:
 8002e24:	4b01      	ldr	r3, [pc, #4]	@ (8002e2c <__errno+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	4d0d      	ldr	r5, [pc, #52]	@ (8002e68 <__libc_init_array+0x38>)
 8002e34:	4c0d      	ldr	r4, [pc, #52]	@ (8002e6c <__libc_init_array+0x3c>)
 8002e36:	1b64      	subs	r4, r4, r5
 8002e38:	10a4      	asrs	r4, r4, #2
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	4d0b      	ldr	r5, [pc, #44]	@ (8002e70 <__libc_init_array+0x40>)
 8002e42:	4c0c      	ldr	r4, [pc, #48]	@ (8002e74 <__libc_init_array+0x44>)
 8002e44:	f000 fc64 	bl	8003710 <_init>
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08003794 	.word	0x08003794
 8002e6c:	08003794 	.word	0x08003794
 8002e70:	08003794 	.word	0x08003794
 8002e74:	08003798 	.word	0x08003798

08002e78 <__retarget_lock_acquire_recursive>:
 8002e78:	4770      	bx	lr

08002e7a <__retarget_lock_release_recursive>:
 8002e7a:	4770      	bx	lr

08002e7c <_free_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4605      	mov	r5, r0
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d041      	beq.n	8002f08 <_free_r+0x8c>
 8002e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e88:	1f0c      	subs	r4, r1, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bfb8      	it	lt
 8002e8e:	18e4      	addlt	r4, r4, r3
 8002e90:	f000 f8e0 	bl	8003054 <__malloc_lock>
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <_free_r+0x90>)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	b933      	cbnz	r3, 8002ea8 <_free_r+0x2c>
 8002e9a:	6063      	str	r3, [r4, #4]
 8002e9c:	6014      	str	r4, [r2, #0]
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ea4:	f000 b8dc 	b.w	8003060 <__malloc_unlock>
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	d908      	bls.n	8002ebe <_free_r+0x42>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	1821      	adds	r1, r4, r0
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	bf01      	itttt	eq
 8002eb4:	6819      	ldreq	r1, [r3, #0]
 8002eb6:	685b      	ldreq	r3, [r3, #4]
 8002eb8:	1809      	addeq	r1, r1, r0
 8002eba:	6021      	streq	r1, [r4, #0]
 8002ebc:	e7ed      	b.n	8002e9a <_free_r+0x1e>
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	b10b      	cbz	r3, 8002ec8 <_free_r+0x4c>
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	d9fa      	bls.n	8002ebe <_free_r+0x42>
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	1850      	adds	r0, r2, r1
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d10b      	bne.n	8002ee8 <_free_r+0x6c>
 8002ed0:	6820      	ldr	r0, [r4, #0]
 8002ed2:	4401      	add	r1, r0
 8002ed4:	1850      	adds	r0, r2, r1
 8002ed6:	4283      	cmp	r3, r0
 8002ed8:	6011      	str	r1, [r2, #0]
 8002eda:	d1e0      	bne.n	8002e9e <_free_r+0x22>
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	6053      	str	r3, [r2, #4]
 8002ee2:	4408      	add	r0, r1
 8002ee4:	6010      	str	r0, [r2, #0]
 8002ee6:	e7da      	b.n	8002e9e <_free_r+0x22>
 8002ee8:	d902      	bls.n	8002ef0 <_free_r+0x74>
 8002eea:	230c      	movs	r3, #12
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	e7d6      	b.n	8002e9e <_free_r+0x22>
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	1821      	adds	r1, r4, r0
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	bf04      	itt	eq
 8002ef8:	6819      	ldreq	r1, [r3, #0]
 8002efa:	685b      	ldreq	r3, [r3, #4]
 8002efc:	6063      	str	r3, [r4, #4]
 8002efe:	bf04      	itt	eq
 8002f00:	1809      	addeq	r1, r1, r0
 8002f02:	6021      	streq	r1, [r4, #0]
 8002f04:	6054      	str	r4, [r2, #4]
 8002f06:	e7ca      	b.n	8002e9e <_free_r+0x22>
 8002f08:	bd38      	pop	{r3, r4, r5, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000027c 	.word	0x2000027c

08002f10 <sbrk_aligned>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	4e0f      	ldr	r6, [pc, #60]	@ (8002f50 <sbrk_aligned+0x40>)
 8002f14:	460c      	mov	r4, r1
 8002f16:	6831      	ldr	r1, [r6, #0]
 8002f18:	4605      	mov	r5, r0
 8002f1a:	b911      	cbnz	r1, 8002f22 <sbrk_aligned+0x12>
 8002f1c:	f000 fba4 	bl	8003668 <_sbrk_r>
 8002f20:	6030      	str	r0, [r6, #0]
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 fb9f 	bl	8003668 <_sbrk_r>
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	d103      	bne.n	8002f36 <sbrk_aligned+0x26>
 8002f2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f32:	4620      	mov	r0, r4
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
 8002f36:	1cc4      	adds	r4, r0, #3
 8002f38:	f024 0403 	bic.w	r4, r4, #3
 8002f3c:	42a0      	cmp	r0, r4
 8002f3e:	d0f8      	beq.n	8002f32 <sbrk_aligned+0x22>
 8002f40:	1a21      	subs	r1, r4, r0
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 fb90 	bl	8003668 <_sbrk_r>
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d1f2      	bne.n	8002f32 <sbrk_aligned+0x22>
 8002f4c:	e7ef      	b.n	8002f2e <sbrk_aligned+0x1e>
 8002f4e:	bf00      	nop
 8002f50:	20000278 	.word	0x20000278

08002f54 <_malloc_r>:
 8002f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f58:	1ccd      	adds	r5, r1, #3
 8002f5a:	f025 0503 	bic.w	r5, r5, #3
 8002f5e:	3508      	adds	r5, #8
 8002f60:	2d0c      	cmp	r5, #12
 8002f62:	bf38      	it	cc
 8002f64:	250c      	movcc	r5, #12
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	4606      	mov	r6, r0
 8002f6a:	db01      	blt.n	8002f70 <_malloc_r+0x1c>
 8002f6c:	42a9      	cmp	r1, r5
 8002f6e:	d904      	bls.n	8002f7a <_malloc_r+0x26>
 8002f70:	230c      	movs	r3, #12
 8002f72:	6033      	str	r3, [r6, #0]
 8002f74:	2000      	movs	r0, #0
 8002f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003050 <_malloc_r+0xfc>
 8002f7e:	f000 f869 	bl	8003054 <__malloc_lock>
 8002f82:	f8d8 3000 	ldr.w	r3, [r8]
 8002f86:	461c      	mov	r4, r3
 8002f88:	bb44      	cbnz	r4, 8002fdc <_malloc_r+0x88>
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f7ff ffbf 	bl	8002f10 <sbrk_aligned>
 8002f92:	1c43      	adds	r3, r0, #1
 8002f94:	4604      	mov	r4, r0
 8002f96:	d158      	bne.n	800304a <_malloc_r+0xf6>
 8002f98:	f8d8 4000 	ldr.w	r4, [r8]
 8002f9c:	4627      	mov	r7, r4
 8002f9e:	2f00      	cmp	r7, #0
 8002fa0:	d143      	bne.n	800302a <_malloc_r+0xd6>
 8002fa2:	2c00      	cmp	r4, #0
 8002fa4:	d04b      	beq.n	800303e <_malloc_r+0xea>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	4639      	mov	r1, r7
 8002faa:	4630      	mov	r0, r6
 8002fac:	eb04 0903 	add.w	r9, r4, r3
 8002fb0:	f000 fb5a 	bl	8003668 <_sbrk_r>
 8002fb4:	4581      	cmp	r9, r0
 8002fb6:	d142      	bne.n	800303e <_malloc_r+0xea>
 8002fb8:	6821      	ldr	r1, [r4, #0]
 8002fba:	1a6d      	subs	r5, r5, r1
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f7ff ffa6 	bl	8002f10 <sbrk_aligned>
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d03a      	beq.n	800303e <_malloc_r+0xea>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	442b      	add	r3, r5
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	f8d8 3000 	ldr.w	r3, [r8]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	bb62      	cbnz	r2, 8003030 <_malloc_r+0xdc>
 8002fd6:	f8c8 7000 	str.w	r7, [r8]
 8002fda:	e00f      	b.n	8002ffc <_malloc_r+0xa8>
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	1b52      	subs	r2, r2, r5
 8002fe0:	d420      	bmi.n	8003024 <_malloc_r+0xd0>
 8002fe2:	2a0b      	cmp	r2, #11
 8002fe4:	d917      	bls.n	8003016 <_malloc_r+0xc2>
 8002fe6:	1961      	adds	r1, r4, r5
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	6025      	str	r5, [r4, #0]
 8002fec:	bf18      	it	ne
 8002fee:	6059      	strne	r1, [r3, #4]
 8002ff0:	6863      	ldr	r3, [r4, #4]
 8002ff2:	bf08      	it	eq
 8002ff4:	f8c8 1000 	streq.w	r1, [r8]
 8002ff8:	5162      	str	r2, [r4, r5]
 8002ffa:	604b      	str	r3, [r1, #4]
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f000 f82f 	bl	8003060 <__malloc_unlock>
 8003002:	f104 000b 	add.w	r0, r4, #11
 8003006:	1d23      	adds	r3, r4, #4
 8003008:	f020 0007 	bic.w	r0, r0, #7
 800300c:	1ac2      	subs	r2, r0, r3
 800300e:	bf1c      	itt	ne
 8003010:	1a1b      	subne	r3, r3, r0
 8003012:	50a3      	strne	r3, [r4, r2]
 8003014:	e7af      	b.n	8002f76 <_malloc_r+0x22>
 8003016:	6862      	ldr	r2, [r4, #4]
 8003018:	42a3      	cmp	r3, r4
 800301a:	bf0c      	ite	eq
 800301c:	f8c8 2000 	streq.w	r2, [r8]
 8003020:	605a      	strne	r2, [r3, #4]
 8003022:	e7eb      	b.n	8002ffc <_malloc_r+0xa8>
 8003024:	4623      	mov	r3, r4
 8003026:	6864      	ldr	r4, [r4, #4]
 8003028:	e7ae      	b.n	8002f88 <_malloc_r+0x34>
 800302a:	463c      	mov	r4, r7
 800302c:	687f      	ldr	r7, [r7, #4]
 800302e:	e7b6      	b.n	8002f9e <_malloc_r+0x4a>
 8003030:	461a      	mov	r2, r3
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	42a3      	cmp	r3, r4
 8003036:	d1fb      	bne.n	8003030 <_malloc_r+0xdc>
 8003038:	2300      	movs	r3, #0
 800303a:	6053      	str	r3, [r2, #4]
 800303c:	e7de      	b.n	8002ffc <_malloc_r+0xa8>
 800303e:	230c      	movs	r3, #12
 8003040:	6033      	str	r3, [r6, #0]
 8003042:	4630      	mov	r0, r6
 8003044:	f000 f80c 	bl	8003060 <__malloc_unlock>
 8003048:	e794      	b.n	8002f74 <_malloc_r+0x20>
 800304a:	6005      	str	r5, [r0, #0]
 800304c:	e7d6      	b.n	8002ffc <_malloc_r+0xa8>
 800304e:	bf00      	nop
 8003050:	2000027c 	.word	0x2000027c

08003054 <__malloc_lock>:
 8003054:	4801      	ldr	r0, [pc, #4]	@ (800305c <__malloc_lock+0x8>)
 8003056:	f7ff bf0f 	b.w	8002e78 <__retarget_lock_acquire_recursive>
 800305a:	bf00      	nop
 800305c:	20000274 	.word	0x20000274

08003060 <__malloc_unlock>:
 8003060:	4801      	ldr	r0, [pc, #4]	@ (8003068 <__malloc_unlock+0x8>)
 8003062:	f7ff bf0a 	b.w	8002e7a <__retarget_lock_release_recursive>
 8003066:	bf00      	nop
 8003068:	20000274 	.word	0x20000274

0800306c <__ssputs_r>:
 800306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	688e      	ldr	r6, [r1, #8]
 8003072:	461f      	mov	r7, r3
 8003074:	42be      	cmp	r6, r7
 8003076:	680b      	ldr	r3, [r1, #0]
 8003078:	4682      	mov	sl, r0
 800307a:	460c      	mov	r4, r1
 800307c:	4690      	mov	r8, r2
 800307e:	d82d      	bhi.n	80030dc <__ssputs_r+0x70>
 8003080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003088:	d026      	beq.n	80030d8 <__ssputs_r+0x6c>
 800308a:	6965      	ldr	r5, [r4, #20]
 800308c:	6909      	ldr	r1, [r1, #16]
 800308e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003092:	eba3 0901 	sub.w	r9, r3, r1
 8003096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800309a:	1c7b      	adds	r3, r7, #1
 800309c:	444b      	add	r3, r9
 800309e:	106d      	asrs	r5, r5, #1
 80030a0:	429d      	cmp	r5, r3
 80030a2:	bf38      	it	cc
 80030a4:	461d      	movcc	r5, r3
 80030a6:	0553      	lsls	r3, r2, #21
 80030a8:	d527      	bpl.n	80030fa <__ssputs_r+0x8e>
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7ff ff52 	bl	8002f54 <_malloc_r>
 80030b0:	4606      	mov	r6, r0
 80030b2:	b360      	cbz	r0, 800310e <__ssputs_r+0xa2>
 80030b4:	6921      	ldr	r1, [r4, #16]
 80030b6:	464a      	mov	r2, r9
 80030b8:	f000 fae6 	bl	8003688 <memcpy>
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	6126      	str	r6, [r4, #16]
 80030ca:	6165      	str	r5, [r4, #20]
 80030cc:	444e      	add	r6, r9
 80030ce:	eba5 0509 	sub.w	r5, r5, r9
 80030d2:	6026      	str	r6, [r4, #0]
 80030d4:	60a5      	str	r5, [r4, #8]
 80030d6:	463e      	mov	r6, r7
 80030d8:	42be      	cmp	r6, r7
 80030da:	d900      	bls.n	80030de <__ssputs_r+0x72>
 80030dc:	463e      	mov	r6, r7
 80030de:	6820      	ldr	r0, [r4, #0]
 80030e0:	4632      	mov	r2, r6
 80030e2:	4641      	mov	r1, r8
 80030e4:	f000 faa6 	bl	8003634 <memmove>
 80030e8:	68a3      	ldr	r3, [r4, #8]
 80030ea:	1b9b      	subs	r3, r3, r6
 80030ec:	60a3      	str	r3, [r4, #8]
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	4433      	add	r3, r6
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	2000      	movs	r0, #0
 80030f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fa:	462a      	mov	r2, r5
 80030fc:	f000 fad2 	bl	80036a4 <_realloc_r>
 8003100:	4606      	mov	r6, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d1e0      	bne.n	80030c8 <__ssputs_r+0x5c>
 8003106:	6921      	ldr	r1, [r4, #16]
 8003108:	4650      	mov	r0, sl
 800310a:	f7ff feb7 	bl	8002e7c <_free_r>
 800310e:	230c      	movs	r3, #12
 8003110:	f8ca 3000 	str.w	r3, [sl]
 8003114:	89a3      	ldrh	r3, [r4, #12]
 8003116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003120:	e7e9      	b.n	80030f6 <__ssputs_r+0x8a>
	...

08003124 <_svfiprintf_r>:
 8003124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003128:	4698      	mov	r8, r3
 800312a:	898b      	ldrh	r3, [r1, #12]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	b09d      	sub	sp, #116	@ 0x74
 8003130:	4607      	mov	r7, r0
 8003132:	460d      	mov	r5, r1
 8003134:	4614      	mov	r4, r2
 8003136:	d510      	bpl.n	800315a <_svfiprintf_r+0x36>
 8003138:	690b      	ldr	r3, [r1, #16]
 800313a:	b973      	cbnz	r3, 800315a <_svfiprintf_r+0x36>
 800313c:	2140      	movs	r1, #64	@ 0x40
 800313e:	f7ff ff09 	bl	8002f54 <_malloc_r>
 8003142:	6028      	str	r0, [r5, #0]
 8003144:	6128      	str	r0, [r5, #16]
 8003146:	b930      	cbnz	r0, 8003156 <_svfiprintf_r+0x32>
 8003148:	230c      	movs	r3, #12
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003150:	b01d      	add	sp, #116	@ 0x74
 8003152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003156:	2340      	movs	r3, #64	@ 0x40
 8003158:	616b      	str	r3, [r5, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	9309      	str	r3, [sp, #36]	@ 0x24
 800315e:	2320      	movs	r3, #32
 8003160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003164:	f8cd 800c 	str.w	r8, [sp, #12]
 8003168:	2330      	movs	r3, #48	@ 0x30
 800316a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003308 <_svfiprintf_r+0x1e4>
 800316e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003172:	f04f 0901 	mov.w	r9, #1
 8003176:	4623      	mov	r3, r4
 8003178:	469a      	mov	sl, r3
 800317a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800317e:	b10a      	cbz	r2, 8003184 <_svfiprintf_r+0x60>
 8003180:	2a25      	cmp	r2, #37	@ 0x25
 8003182:	d1f9      	bne.n	8003178 <_svfiprintf_r+0x54>
 8003184:	ebba 0b04 	subs.w	fp, sl, r4
 8003188:	d00b      	beq.n	80031a2 <_svfiprintf_r+0x7e>
 800318a:	465b      	mov	r3, fp
 800318c:	4622      	mov	r2, r4
 800318e:	4629      	mov	r1, r5
 8003190:	4638      	mov	r0, r7
 8003192:	f7ff ff6b 	bl	800306c <__ssputs_r>
 8003196:	3001      	adds	r0, #1
 8003198:	f000 80a7 	beq.w	80032ea <_svfiprintf_r+0x1c6>
 800319c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800319e:	445a      	add	r2, fp
 80031a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80031a2:	f89a 3000 	ldrb.w	r3, [sl]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 809f 	beq.w	80032ea <_svfiprintf_r+0x1c6>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031b6:	f10a 0a01 	add.w	sl, sl, #1
 80031ba:	9304      	str	r3, [sp, #16]
 80031bc:	9307      	str	r3, [sp, #28]
 80031be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80031c4:	4654      	mov	r4, sl
 80031c6:	2205      	movs	r2, #5
 80031c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031cc:	484e      	ldr	r0, [pc, #312]	@ (8003308 <_svfiprintf_r+0x1e4>)
 80031ce:	f7fd f80f 	bl	80001f0 <memchr>
 80031d2:	9a04      	ldr	r2, [sp, #16]
 80031d4:	b9d8      	cbnz	r0, 800320e <_svfiprintf_r+0xea>
 80031d6:	06d0      	lsls	r0, r2, #27
 80031d8:	bf44      	itt	mi
 80031da:	2320      	movmi	r3, #32
 80031dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031e0:	0711      	lsls	r1, r2, #28
 80031e2:	bf44      	itt	mi
 80031e4:	232b      	movmi	r3, #43	@ 0x2b
 80031e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ea:	f89a 3000 	ldrb.w	r3, [sl]
 80031ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f0:	d015      	beq.n	800321e <_svfiprintf_r+0xfa>
 80031f2:	9a07      	ldr	r2, [sp, #28]
 80031f4:	4654      	mov	r4, sl
 80031f6:	2000      	movs	r0, #0
 80031f8:	f04f 0c0a 	mov.w	ip, #10
 80031fc:	4621      	mov	r1, r4
 80031fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003202:	3b30      	subs	r3, #48	@ 0x30
 8003204:	2b09      	cmp	r3, #9
 8003206:	d94b      	bls.n	80032a0 <_svfiprintf_r+0x17c>
 8003208:	b1b0      	cbz	r0, 8003238 <_svfiprintf_r+0x114>
 800320a:	9207      	str	r2, [sp, #28]
 800320c:	e014      	b.n	8003238 <_svfiprintf_r+0x114>
 800320e:	eba0 0308 	sub.w	r3, r0, r8
 8003212:	fa09 f303 	lsl.w	r3, r9, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	9304      	str	r3, [sp, #16]
 800321a:	46a2      	mov	sl, r4
 800321c:	e7d2      	b.n	80031c4 <_svfiprintf_r+0xa0>
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	1d19      	adds	r1, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9103      	str	r1, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfbb      	ittet	lt
 800322a:	425b      	neglt	r3, r3
 800322c:	f042 0202 	orrlt.w	r2, r2, #2
 8003230:	9307      	strge	r3, [sp, #28]
 8003232:	9307      	strlt	r3, [sp, #28]
 8003234:	bfb8      	it	lt
 8003236:	9204      	strlt	r2, [sp, #16]
 8003238:	7823      	ldrb	r3, [r4, #0]
 800323a:	2b2e      	cmp	r3, #46	@ 0x2e
 800323c:	d10a      	bne.n	8003254 <_svfiprintf_r+0x130>
 800323e:	7863      	ldrb	r3, [r4, #1]
 8003240:	2b2a      	cmp	r3, #42	@ 0x2a
 8003242:	d132      	bne.n	80032aa <_svfiprintf_r+0x186>
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	9203      	str	r2, [sp, #12]
 800324c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003250:	3402      	adds	r4, #2
 8003252:	9305      	str	r3, [sp, #20]
 8003254:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003318 <_svfiprintf_r+0x1f4>
 8003258:	7821      	ldrb	r1, [r4, #0]
 800325a:	2203      	movs	r2, #3
 800325c:	4650      	mov	r0, sl
 800325e:	f7fc ffc7 	bl	80001f0 <memchr>
 8003262:	b138      	cbz	r0, 8003274 <_svfiprintf_r+0x150>
 8003264:	9b04      	ldr	r3, [sp, #16]
 8003266:	eba0 000a 	sub.w	r0, r0, sl
 800326a:	2240      	movs	r2, #64	@ 0x40
 800326c:	4082      	lsls	r2, r0
 800326e:	4313      	orrs	r3, r2
 8003270:	3401      	adds	r4, #1
 8003272:	9304      	str	r3, [sp, #16]
 8003274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003278:	4824      	ldr	r0, [pc, #144]	@ (800330c <_svfiprintf_r+0x1e8>)
 800327a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800327e:	2206      	movs	r2, #6
 8003280:	f7fc ffb6 	bl	80001f0 <memchr>
 8003284:	2800      	cmp	r0, #0
 8003286:	d036      	beq.n	80032f6 <_svfiprintf_r+0x1d2>
 8003288:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <_svfiprintf_r+0x1ec>)
 800328a:	bb1b      	cbnz	r3, 80032d4 <_svfiprintf_r+0x1b0>
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	3307      	adds	r3, #7
 8003290:	f023 0307 	bic.w	r3, r3, #7
 8003294:	3308      	adds	r3, #8
 8003296:	9303      	str	r3, [sp, #12]
 8003298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800329a:	4433      	add	r3, r6
 800329c:	9309      	str	r3, [sp, #36]	@ 0x24
 800329e:	e76a      	b.n	8003176 <_svfiprintf_r+0x52>
 80032a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80032a4:	460c      	mov	r4, r1
 80032a6:	2001      	movs	r0, #1
 80032a8:	e7a8      	b.n	80031fc <_svfiprintf_r+0xd8>
 80032aa:	2300      	movs	r3, #0
 80032ac:	3401      	adds	r4, #1
 80032ae:	9305      	str	r3, [sp, #20]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f04f 0c0a 	mov.w	ip, #10
 80032b6:	4620      	mov	r0, r4
 80032b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032bc:	3a30      	subs	r2, #48	@ 0x30
 80032be:	2a09      	cmp	r2, #9
 80032c0:	d903      	bls.n	80032ca <_svfiprintf_r+0x1a6>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0c6      	beq.n	8003254 <_svfiprintf_r+0x130>
 80032c6:	9105      	str	r1, [sp, #20]
 80032c8:	e7c4      	b.n	8003254 <_svfiprintf_r+0x130>
 80032ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ce:	4604      	mov	r4, r0
 80032d0:	2301      	movs	r3, #1
 80032d2:	e7f0      	b.n	80032b6 <_svfiprintf_r+0x192>
 80032d4:	ab03      	add	r3, sp, #12
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	462a      	mov	r2, r5
 80032da:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <_svfiprintf_r+0x1f0>)
 80032dc:	a904      	add	r1, sp, #16
 80032de:	4638      	mov	r0, r7
 80032e0:	f3af 8000 	nop.w
 80032e4:	1c42      	adds	r2, r0, #1
 80032e6:	4606      	mov	r6, r0
 80032e8:	d1d6      	bne.n	8003298 <_svfiprintf_r+0x174>
 80032ea:	89ab      	ldrh	r3, [r5, #12]
 80032ec:	065b      	lsls	r3, r3, #25
 80032ee:	f53f af2d 	bmi.w	800314c <_svfiprintf_r+0x28>
 80032f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032f4:	e72c      	b.n	8003150 <_svfiprintf_r+0x2c>
 80032f6:	ab03      	add	r3, sp, #12
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	462a      	mov	r2, r5
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <_svfiprintf_r+0x1f0>)
 80032fe:	a904      	add	r1, sp, #16
 8003300:	4638      	mov	r0, r7
 8003302:	f000 f879 	bl	80033f8 <_printf_i>
 8003306:	e7ed      	b.n	80032e4 <_svfiprintf_r+0x1c0>
 8003308:	08003758 	.word	0x08003758
 800330c:	08003762 	.word	0x08003762
 8003310:	00000000 	.word	0x00000000
 8003314:	0800306d 	.word	0x0800306d
 8003318:	0800375e 	.word	0x0800375e

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4616      	mov	r6, r2
 8003322:	4698      	mov	r8, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800332c:	4293      	cmp	r3, r2
 800332e:	bfb8      	it	lt
 8003330:	4613      	movlt	r3, r2
 8003332:	6033      	str	r3, [r6, #0]
 8003334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003338:	4607      	mov	r7, r0
 800333a:	460c      	mov	r4, r1
 800333c:	b10a      	cbz	r2, 8003342 <_printf_common+0x26>
 800333e:	3301      	adds	r3, #1
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	0699      	lsls	r1, r3, #26
 8003346:	bf42      	ittt	mi
 8003348:	6833      	ldrmi	r3, [r6, #0]
 800334a:	3302      	addmi	r3, #2
 800334c:	6033      	strmi	r3, [r6, #0]
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	f015 0506 	ands.w	r5, r5, #6
 8003354:	d106      	bne.n	8003364 <_printf_common+0x48>
 8003356:	f104 0a19 	add.w	sl, r4, #25
 800335a:	68e3      	ldr	r3, [r4, #12]
 800335c:	6832      	ldr	r2, [r6, #0]
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	42ab      	cmp	r3, r5
 8003362:	dc26      	bgt.n	80033b2 <_printf_common+0x96>
 8003364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	3b00      	subs	r3, #0
 800336c:	bf18      	it	ne
 800336e:	2301      	movne	r3, #1
 8003370:	0692      	lsls	r2, r2, #26
 8003372:	d42b      	bmi.n	80033cc <_printf_common+0xb0>
 8003374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003378:	4641      	mov	r1, r8
 800337a:	4638      	mov	r0, r7
 800337c:	47c8      	blx	r9
 800337e:	3001      	adds	r0, #1
 8003380:	d01e      	beq.n	80033c0 <_printf_common+0xa4>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	6922      	ldr	r2, [r4, #16]
 8003386:	f003 0306 	and.w	r3, r3, #6
 800338a:	2b04      	cmp	r3, #4
 800338c:	bf02      	ittt	eq
 800338e:	68e5      	ldreq	r5, [r4, #12]
 8003390:	6833      	ldreq	r3, [r6, #0]
 8003392:	1aed      	subeq	r5, r5, r3
 8003394:	68a3      	ldr	r3, [r4, #8]
 8003396:	bf0c      	ite	eq
 8003398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800339c:	2500      	movne	r5, #0
 800339e:	4293      	cmp	r3, r2
 80033a0:	bfc4      	itt	gt
 80033a2:	1a9b      	subgt	r3, r3, r2
 80033a4:	18ed      	addgt	r5, r5, r3
 80033a6:	2600      	movs	r6, #0
 80033a8:	341a      	adds	r4, #26
 80033aa:	42b5      	cmp	r5, r6
 80033ac:	d11a      	bne.n	80033e4 <_printf_common+0xc8>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e008      	b.n	80033c4 <_printf_common+0xa8>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4652      	mov	r2, sl
 80033b6:	4641      	mov	r1, r8
 80033b8:	4638      	mov	r0, r7
 80033ba:	47c8      	blx	r9
 80033bc:	3001      	adds	r0, #1
 80033be:	d103      	bne.n	80033c8 <_printf_common+0xac>
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	3501      	adds	r5, #1
 80033ca:	e7c6      	b.n	800335a <_printf_common+0x3e>
 80033cc:	18e1      	adds	r1, r4, r3
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	2030      	movs	r0, #48	@ 0x30
 80033d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033d6:	4422      	add	r2, r4
 80033d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033e0:	3302      	adds	r3, #2
 80033e2:	e7c7      	b.n	8003374 <_printf_common+0x58>
 80033e4:	2301      	movs	r3, #1
 80033e6:	4622      	mov	r2, r4
 80033e8:	4641      	mov	r1, r8
 80033ea:	4638      	mov	r0, r7
 80033ec:	47c8      	blx	r9
 80033ee:	3001      	adds	r0, #1
 80033f0:	d0e6      	beq.n	80033c0 <_printf_common+0xa4>
 80033f2:	3601      	adds	r6, #1
 80033f4:	e7d9      	b.n	80033aa <_printf_common+0x8e>
	...

080033f8 <_printf_i>:
 80033f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033fc:	7e0f      	ldrb	r7, [r1, #24]
 80033fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003400:	2f78      	cmp	r7, #120	@ 0x78
 8003402:	4691      	mov	r9, r2
 8003404:	4680      	mov	r8, r0
 8003406:	460c      	mov	r4, r1
 8003408:	469a      	mov	sl, r3
 800340a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800340e:	d807      	bhi.n	8003420 <_printf_i+0x28>
 8003410:	2f62      	cmp	r7, #98	@ 0x62
 8003412:	d80a      	bhi.n	800342a <_printf_i+0x32>
 8003414:	2f00      	cmp	r7, #0
 8003416:	f000 80d1 	beq.w	80035bc <_printf_i+0x1c4>
 800341a:	2f58      	cmp	r7, #88	@ 0x58
 800341c:	f000 80b8 	beq.w	8003590 <_printf_i+0x198>
 8003420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003428:	e03a      	b.n	80034a0 <_printf_i+0xa8>
 800342a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800342e:	2b15      	cmp	r3, #21
 8003430:	d8f6      	bhi.n	8003420 <_printf_i+0x28>
 8003432:	a101      	add	r1, pc, #4	@ (adr r1, 8003438 <_printf_i+0x40>)
 8003434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003438:	08003491 	.word	0x08003491
 800343c:	080034a5 	.word	0x080034a5
 8003440:	08003421 	.word	0x08003421
 8003444:	08003421 	.word	0x08003421
 8003448:	08003421 	.word	0x08003421
 800344c:	08003421 	.word	0x08003421
 8003450:	080034a5 	.word	0x080034a5
 8003454:	08003421 	.word	0x08003421
 8003458:	08003421 	.word	0x08003421
 800345c:	08003421 	.word	0x08003421
 8003460:	08003421 	.word	0x08003421
 8003464:	080035a3 	.word	0x080035a3
 8003468:	080034cf 	.word	0x080034cf
 800346c:	0800355d 	.word	0x0800355d
 8003470:	08003421 	.word	0x08003421
 8003474:	08003421 	.word	0x08003421
 8003478:	080035c5 	.word	0x080035c5
 800347c:	08003421 	.word	0x08003421
 8003480:	080034cf 	.word	0x080034cf
 8003484:	08003421 	.word	0x08003421
 8003488:	08003421 	.word	0x08003421
 800348c:	08003565 	.word	0x08003565
 8003490:	6833      	ldr	r3, [r6, #0]
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6032      	str	r2, [r6, #0]
 8003498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800349c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034a0:	2301      	movs	r3, #1
 80034a2:	e09c      	b.n	80035de <_printf_i+0x1e6>
 80034a4:	6833      	ldr	r3, [r6, #0]
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	1d19      	adds	r1, r3, #4
 80034aa:	6031      	str	r1, [r6, #0]
 80034ac:	0606      	lsls	r6, r0, #24
 80034ae:	d501      	bpl.n	80034b4 <_printf_i+0xbc>
 80034b0:	681d      	ldr	r5, [r3, #0]
 80034b2:	e003      	b.n	80034bc <_printf_i+0xc4>
 80034b4:	0645      	lsls	r5, r0, #25
 80034b6:	d5fb      	bpl.n	80034b0 <_printf_i+0xb8>
 80034b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034bc:	2d00      	cmp	r5, #0
 80034be:	da03      	bge.n	80034c8 <_printf_i+0xd0>
 80034c0:	232d      	movs	r3, #45	@ 0x2d
 80034c2:	426d      	negs	r5, r5
 80034c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034c8:	4858      	ldr	r0, [pc, #352]	@ (800362c <_printf_i+0x234>)
 80034ca:	230a      	movs	r3, #10
 80034cc:	e011      	b.n	80034f2 <_printf_i+0xfa>
 80034ce:	6821      	ldr	r1, [r4, #0]
 80034d0:	6833      	ldr	r3, [r6, #0]
 80034d2:	0608      	lsls	r0, r1, #24
 80034d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80034d8:	d402      	bmi.n	80034e0 <_printf_i+0xe8>
 80034da:	0649      	lsls	r1, r1, #25
 80034dc:	bf48      	it	mi
 80034de:	b2ad      	uxthmi	r5, r5
 80034e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80034e2:	4852      	ldr	r0, [pc, #328]	@ (800362c <_printf_i+0x234>)
 80034e4:	6033      	str	r3, [r6, #0]
 80034e6:	bf14      	ite	ne
 80034e8:	230a      	movne	r3, #10
 80034ea:	2308      	moveq	r3, #8
 80034ec:	2100      	movs	r1, #0
 80034ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034f2:	6866      	ldr	r6, [r4, #4]
 80034f4:	60a6      	str	r6, [r4, #8]
 80034f6:	2e00      	cmp	r6, #0
 80034f8:	db05      	blt.n	8003506 <_printf_i+0x10e>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	432e      	orrs	r6, r5
 80034fe:	f021 0104 	bic.w	r1, r1, #4
 8003502:	6021      	str	r1, [r4, #0]
 8003504:	d04b      	beq.n	800359e <_printf_i+0x1a6>
 8003506:	4616      	mov	r6, r2
 8003508:	fbb5 f1f3 	udiv	r1, r5, r3
 800350c:	fb03 5711 	mls	r7, r3, r1, r5
 8003510:	5dc7      	ldrb	r7, [r0, r7]
 8003512:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003516:	462f      	mov	r7, r5
 8003518:	42bb      	cmp	r3, r7
 800351a:	460d      	mov	r5, r1
 800351c:	d9f4      	bls.n	8003508 <_printf_i+0x110>
 800351e:	2b08      	cmp	r3, #8
 8003520:	d10b      	bne.n	800353a <_printf_i+0x142>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	07df      	lsls	r7, r3, #31
 8003526:	d508      	bpl.n	800353a <_printf_i+0x142>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	6861      	ldr	r1, [r4, #4]
 800352c:	4299      	cmp	r1, r3
 800352e:	bfde      	ittt	le
 8003530:	2330      	movle	r3, #48	@ 0x30
 8003532:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003536:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800353a:	1b92      	subs	r2, r2, r6
 800353c:	6122      	str	r2, [r4, #16]
 800353e:	f8cd a000 	str.w	sl, [sp]
 8003542:	464b      	mov	r3, r9
 8003544:	aa03      	add	r2, sp, #12
 8003546:	4621      	mov	r1, r4
 8003548:	4640      	mov	r0, r8
 800354a:	f7ff fee7 	bl	800331c <_printf_common>
 800354e:	3001      	adds	r0, #1
 8003550:	d14a      	bne.n	80035e8 <_printf_i+0x1f0>
 8003552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003556:	b004      	add	sp, #16
 8003558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	4832      	ldr	r0, [pc, #200]	@ (8003630 <_printf_i+0x238>)
 8003566:	2778      	movs	r7, #120	@ 0x78
 8003568:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	6831      	ldr	r1, [r6, #0]
 8003570:	061f      	lsls	r7, r3, #24
 8003572:	f851 5b04 	ldr.w	r5, [r1], #4
 8003576:	d402      	bmi.n	800357e <_printf_i+0x186>
 8003578:	065f      	lsls	r7, r3, #25
 800357a:	bf48      	it	mi
 800357c:	b2ad      	uxthmi	r5, r5
 800357e:	6031      	str	r1, [r6, #0]
 8003580:	07d9      	lsls	r1, r3, #31
 8003582:	bf44      	itt	mi
 8003584:	f043 0320 	orrmi.w	r3, r3, #32
 8003588:	6023      	strmi	r3, [r4, #0]
 800358a:	b11d      	cbz	r5, 8003594 <_printf_i+0x19c>
 800358c:	2310      	movs	r3, #16
 800358e:	e7ad      	b.n	80034ec <_printf_i+0xf4>
 8003590:	4826      	ldr	r0, [pc, #152]	@ (800362c <_printf_i+0x234>)
 8003592:	e7e9      	b.n	8003568 <_printf_i+0x170>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	f023 0320 	bic.w	r3, r3, #32
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	e7f6      	b.n	800358c <_printf_i+0x194>
 800359e:	4616      	mov	r6, r2
 80035a0:	e7bd      	b.n	800351e <_printf_i+0x126>
 80035a2:	6833      	ldr	r3, [r6, #0]
 80035a4:	6825      	ldr	r5, [r4, #0]
 80035a6:	6961      	ldr	r1, [r4, #20]
 80035a8:	1d18      	adds	r0, r3, #4
 80035aa:	6030      	str	r0, [r6, #0]
 80035ac:	062e      	lsls	r6, r5, #24
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	d501      	bpl.n	80035b6 <_printf_i+0x1be>
 80035b2:	6019      	str	r1, [r3, #0]
 80035b4:	e002      	b.n	80035bc <_printf_i+0x1c4>
 80035b6:	0668      	lsls	r0, r5, #25
 80035b8:	d5fb      	bpl.n	80035b2 <_printf_i+0x1ba>
 80035ba:	8019      	strh	r1, [r3, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	6123      	str	r3, [r4, #16]
 80035c0:	4616      	mov	r6, r2
 80035c2:	e7bc      	b.n	800353e <_printf_i+0x146>
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	6032      	str	r2, [r6, #0]
 80035ca:	681e      	ldr	r6, [r3, #0]
 80035cc:	6862      	ldr	r2, [r4, #4]
 80035ce:	2100      	movs	r1, #0
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7fc fe0d 	bl	80001f0 <memchr>
 80035d6:	b108      	cbz	r0, 80035dc <_printf_i+0x1e4>
 80035d8:	1b80      	subs	r0, r0, r6
 80035da:	6060      	str	r0, [r4, #4]
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	6123      	str	r3, [r4, #16]
 80035e0:	2300      	movs	r3, #0
 80035e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035e6:	e7aa      	b.n	800353e <_printf_i+0x146>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	4632      	mov	r2, r6
 80035ec:	4649      	mov	r1, r9
 80035ee:	4640      	mov	r0, r8
 80035f0:	47d0      	blx	sl
 80035f2:	3001      	adds	r0, #1
 80035f4:	d0ad      	beq.n	8003552 <_printf_i+0x15a>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	079b      	lsls	r3, r3, #30
 80035fa:	d413      	bmi.n	8003624 <_printf_i+0x22c>
 80035fc:	68e0      	ldr	r0, [r4, #12]
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	4298      	cmp	r0, r3
 8003602:	bfb8      	it	lt
 8003604:	4618      	movlt	r0, r3
 8003606:	e7a6      	b.n	8003556 <_printf_i+0x15e>
 8003608:	2301      	movs	r3, #1
 800360a:	4632      	mov	r2, r6
 800360c:	4649      	mov	r1, r9
 800360e:	4640      	mov	r0, r8
 8003610:	47d0      	blx	sl
 8003612:	3001      	adds	r0, #1
 8003614:	d09d      	beq.n	8003552 <_printf_i+0x15a>
 8003616:	3501      	adds	r5, #1
 8003618:	68e3      	ldr	r3, [r4, #12]
 800361a:	9903      	ldr	r1, [sp, #12]
 800361c:	1a5b      	subs	r3, r3, r1
 800361e:	42ab      	cmp	r3, r5
 8003620:	dcf2      	bgt.n	8003608 <_printf_i+0x210>
 8003622:	e7eb      	b.n	80035fc <_printf_i+0x204>
 8003624:	2500      	movs	r5, #0
 8003626:	f104 0619 	add.w	r6, r4, #25
 800362a:	e7f5      	b.n	8003618 <_printf_i+0x220>
 800362c:	08003769 	.word	0x08003769
 8003630:	0800377a 	.word	0x0800377a

08003634 <memmove>:
 8003634:	4288      	cmp	r0, r1
 8003636:	b510      	push	{r4, lr}
 8003638:	eb01 0402 	add.w	r4, r1, r2
 800363c:	d902      	bls.n	8003644 <memmove+0x10>
 800363e:	4284      	cmp	r4, r0
 8003640:	4623      	mov	r3, r4
 8003642:	d807      	bhi.n	8003654 <memmove+0x20>
 8003644:	1e43      	subs	r3, r0, #1
 8003646:	42a1      	cmp	r1, r4
 8003648:	d008      	beq.n	800365c <memmove+0x28>
 800364a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800364e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003652:	e7f8      	b.n	8003646 <memmove+0x12>
 8003654:	4402      	add	r2, r0
 8003656:	4601      	mov	r1, r0
 8003658:	428a      	cmp	r2, r1
 800365a:	d100      	bne.n	800365e <memmove+0x2a>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003666:	e7f7      	b.n	8003658 <memmove+0x24>

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d06      	ldr	r5, [pc, #24]	@ (8003684 <_sbrk_r+0x1c>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd fa32 	bl	8000adc <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000270 	.word	0x20000270

08003688 <memcpy>:
 8003688:	440a      	add	r2, r1
 800368a:	4291      	cmp	r1, r2
 800368c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003690:	d100      	bne.n	8003694 <memcpy+0xc>
 8003692:	4770      	bx	lr
 8003694:	b510      	push	{r4, lr}
 8003696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800369a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800369e:	4291      	cmp	r1, r2
 80036a0:	d1f9      	bne.n	8003696 <memcpy+0xe>
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <_realloc_r>:
 80036a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a8:	4607      	mov	r7, r0
 80036aa:	4614      	mov	r4, r2
 80036ac:	460d      	mov	r5, r1
 80036ae:	b921      	cbnz	r1, 80036ba <_realloc_r+0x16>
 80036b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b4:	4611      	mov	r1, r2
 80036b6:	f7ff bc4d 	b.w	8002f54 <_malloc_r>
 80036ba:	b92a      	cbnz	r2, 80036c8 <_realloc_r+0x24>
 80036bc:	f7ff fbde 	bl	8002e7c <_free_r>
 80036c0:	4625      	mov	r5, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c8:	f000 f81a 	bl	8003700 <_malloc_usable_size_r>
 80036cc:	4284      	cmp	r4, r0
 80036ce:	4606      	mov	r6, r0
 80036d0:	d802      	bhi.n	80036d8 <_realloc_r+0x34>
 80036d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036d6:	d8f4      	bhi.n	80036c2 <_realloc_r+0x1e>
 80036d8:	4621      	mov	r1, r4
 80036da:	4638      	mov	r0, r7
 80036dc:	f7ff fc3a 	bl	8002f54 <_malloc_r>
 80036e0:	4680      	mov	r8, r0
 80036e2:	b908      	cbnz	r0, 80036e8 <_realloc_r+0x44>
 80036e4:	4645      	mov	r5, r8
 80036e6:	e7ec      	b.n	80036c2 <_realloc_r+0x1e>
 80036e8:	42b4      	cmp	r4, r6
 80036ea:	4622      	mov	r2, r4
 80036ec:	4629      	mov	r1, r5
 80036ee:	bf28      	it	cs
 80036f0:	4632      	movcs	r2, r6
 80036f2:	f7ff ffc9 	bl	8003688 <memcpy>
 80036f6:	4629      	mov	r1, r5
 80036f8:	4638      	mov	r0, r7
 80036fa:	f7ff fbbf 	bl	8002e7c <_free_r>
 80036fe:	e7f1      	b.n	80036e4 <_realloc_r+0x40>

08003700 <_malloc_usable_size_r>:
 8003700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003704:	1f18      	subs	r0, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfbc      	itt	lt
 800370a:	580b      	ldrlt	r3, [r1, r0]
 800370c:	18c0      	addlt	r0, r0, r3
 800370e:	4770      	bx	lr

08003710 <_init>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr

0800371c <_fini>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr
