
DC-voltage-measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af8  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005ce0  08005ce0  00006ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b4  080060b4  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060b8  080060b8  000070b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080060bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001d4  08006290  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08006290  000083bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008337  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ae  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00011de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000605  00000000  00000000  000125d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a342  00000000  00000000  00012bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009adb  00000000  00000000  0002cf1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009797e  00000000  00000000  000369fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000303c  00000000  00000000  000ce3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000d13f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08005cc8 	.word	0x08005cc8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08005cc8 	.word	0x08005cc8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b092      	sub	sp, #72	@ 0x48
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fb25 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f845 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f8fd 	bl	8000d6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b72:	f000 f893 	bl	8000c9c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 f8cf 	bl	8000d18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000b7a:	481b      	ldr	r0, [pc, #108]	@ (8000be8 <main+0x88>)
 8000b7c:	f000 fc8a 	bl	8001494 <HAL_ADC_Start>

  uint32_t raw_dc_battery_voltage = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float converted_dc_battery_voltage = 0;
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	4817      	ldr	r0, [pc, #92]	@ (8000bec <main+0x8c>)
 8000b90:	f001 fa64 	bl	800205c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000b94:	2064      	movs	r0, #100	@ 0x64
 8000b96:	f000 fb6f 	bl	8001278 <HAL_Delay>

	  // read the battery
	  HAL_ADC_PollForConversion(&hadc1, 500);
 8000b9a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000b9e:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <main+0x88>)
 8000ba0:	f000 fd26 	bl	80015f0 <HAL_ADC_PollForConversion>
	  raw_dc_battery_voltage = HAL_ADC_GetValue(&hadc1);
 8000ba4:	4810      	ldr	r0, [pc, #64]	@ (8000be8 <main+0x88>)
 8000ba6:	f000 fe29 	bl	80017fc <HAL_ADC_GetValue>
 8000baa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  converted_dc_battery_voltage = ((float) raw_dc_battery_voltage) * (3300 / 4095); // 12 bit
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	  sprintf(eps_packet_buffer,
 8000bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000bb4:	f7ff fca4 	bl	8000500 <__aeabi_f2d>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	1d38      	adds	r0, r7, #4
 8000bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8000bc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bc4:	490a      	ldr	r1, [pc, #40]	@ (8000bf0 <main+0x90>)
 8000bc6:	f002 ff41 	bl	8003a4c <siprintf>
			  "raw:%lu, real:%.2f\r\n",
			  raw_dc_battery_voltage,
			  converted_dc_battery_voltage);

	  HAL_UART_Transmit(&huart2, (uint8_t*)eps_packet_buffer, strlen(eps_packet_buffer), 500);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fb2b 	bl	8000228 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	1d39      	adds	r1, r7, #4
 8000bd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <main+0x94>)
 8000bde:	f002 f845 	bl	8002c6c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000be2:	bf00      	nop
 8000be4:	e7d1      	b.n	8000b8a <main+0x2a>
 8000be6:	bf00      	nop
 8000be8:	200001f0 	.word	0x200001f0
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	08005ce0 	.word	0x08005ce0
 8000bf4:	20000220 	.word	0x20000220

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b096      	sub	sp, #88	@ 0x58
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c02:	2228      	movs	r2, #40	@ 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 ff85 	bl	8003b16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	2310      	movs	r3, #16
 8000c36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fa25 	bl	8002090 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f8da 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fc92 	bl	8002594 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c76:	f000 f8c5 	bl	8000e04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fe13 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c90:	f000 f8b8 	bl	8000e04 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3758      	adds	r7, #88	@ 0x58
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cae:	4a19      	ldr	r2, [pc, #100]	@ (8000d14 <MX_ADC1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cc6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cda:	f000 faf1 	bl	80012c0 <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f88e 	bl	8000e04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_ADC1_Init+0x74>)
 8000cfa:	f000 fd8b 	bl	8001814 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d04:	f000 f87e 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001f0 	.word	0x200001f0
 8000d14:	40012400 	.word	0x40012400

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <MX_USART2_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f001 ff3c 	bl	8002bcc <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 f853 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000220 	.word	0x20000220
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a11      	ldr	r2, [pc, #68]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000dfc <MX_GPIO_Init+0x90>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dce:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_GPIO_Init+0x94>)
 8000dd0:	f001 f92c 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <MX_GPIO_Init+0x94>)
 8000dee:	f000 ff89 	bl	8001d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010800 	.word	0x40010800

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	61d3      	str	r3, [r2, #28]
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_MspInit+0x60>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000

08000e74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <HAL_ADC_MspInit+0x6c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d121      	bne.n	8000ed8 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000eb2:	f043 0310 	orr.w	r3, r3, #16
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_ADC_MspInit+0x70>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = VBUS_ADC_Pin;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBUS_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_ADC_MspInit+0x74>)
 8000ed4:	f000 ff16 	bl	8001d04 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40012400 	.word	0x40012400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40011000 	.word	0x40011000

08000eec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1b      	ldr	r2, [pc, #108]	@ (8000f74 <HAL_UART_MspInit+0x88>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d12f      	bne.n	8000f6c <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f16:	61d3      	str	r3, [r2, #28]
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f50:	f000 fed8 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f68:	f000 fecc 	bl	8001d04 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <NMI_Handler+0x4>

08000f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <MemManage_Handler+0x4>

08000f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f936 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return 1;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <_kill>:

int _kill(int pid, int sig)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ff0:	f002 fde4 	bl	8003bbc <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2216      	movs	r2, #22
 8000ff8:	601a      	str	r2, [r3, #0]
  return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_exit>:

void _exit (int status)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800100e:	f04f 31ff 	mov.w	r1, #4294967295
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffe7 	bl	8000fe6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <_exit+0x12>

0800101c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e00a      	b.n	8001044 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102e:	f3af 8000 	nop.w
 8001032:	4601      	mov	r1, r0
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf0      	blt.n	800102e <_read+0x12>
  }

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e009      	b.n	800107c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf1      	blt.n	8001068 <_write+0x12>
  }
  return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b4:	605a      	str	r2, [r3, #4]
  return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f002 fd4c 	bl	8003bbc <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000c000 	.word	0x2000c000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000268 	.word	0x20000268
 8001158:	200003c0 	.word	0x200003c0

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001168:	f7ff fff8 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116e:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001184:	4c09      	ldr	r4, [pc, #36]	@ (80011ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f002 fd19 	bl	8003bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001196:	f7ff fce3 	bl	8000b60 <main>
  bx lr
 800119a:	4770      	bx	lr
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011a4:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 80011a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011ac:	200003bc 	.word	0x200003bc

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <HAL_Init+0x28>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 fd69 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fe1e 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fd73 	bl	8001cea <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 fd49 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_IncTick+0x1c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_IncTick+0x20>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <HAL_IncTick+0x20>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000008 	.word	0x20000008
 8001260:	2000026c 	.word	0x2000026c

08001264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b02      	ldr	r3, [pc, #8]	@ (8001274 <HAL_GetTick+0x10>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	2000026c 	.word	0x2000026c

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fff0 	bl	8001264 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffe0 	bl	8001264 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0ce      	b.n	8001480 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d109      	bne.n	8001304 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fdb8 	bl	8000e74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fbd7 	bl	8001ab8 <ADC_ConversionStop_Disable>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 80a9 	bne.w	800146e <HAL_ADC_Init+0x1ae>
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 80a5 	bne.w	800146e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001328:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800132c:	f023 0302 	bic.w	r3, r3, #2
 8001330:	f043 0202 	orr.w	r2, r3, #2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4951      	ldr	r1, [pc, #324]	@ (8001488 <HAL_ADC_Init+0x1c8>)
 8001342:	428b      	cmp	r3, r1
 8001344:	d10a      	bne.n	800135c <HAL_ADC_Init+0x9c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800134e:	d002      	beq.n	8001356 <HAL_ADC_Init+0x96>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	e004      	b.n	8001360 <HAL_ADC_Init+0xa0>
 8001356:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800135a:	e001      	b.n	8001360 <HAL_ADC_Init+0xa0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001360:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7b1b      	ldrb	r3, [r3, #12]
 8001366:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001368:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4313      	orrs	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001378:	d003      	beq.n	8001382 <HAL_ADC_Init+0xc2>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_ADC_Init+0xc8>
 8001382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001386:	e000      	b.n	800138a <HAL_ADC_Init+0xca>
 8001388:	2300      	movs	r3, #0
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7d1b      	ldrb	r3, [r3, #20]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d119      	bne.n	80013cc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7b1b      	ldrb	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	035a      	lsls	r2, r3, #13
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	e00b      	b.n	80013cc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f043 0220 	orr.w	r2, r3, #32
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <HAL_ADC_Init+0x1cc>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013fc:	d003      	beq.n	8001406 <HAL_ADC_Init+0x146>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	3b01      	subs	r3, #1
 800140c:	051b      	lsls	r3, r3, #20
 800140e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	430a      	orrs	r2, r1
 8001422:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_ADC_Init+0x1d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d10b      	bne.n	800144c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143e:	f023 0303 	bic.w	r3, r3, #3
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800144a:	e018      	b.n	800147e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	f023 0312 	bic.w	r3, r3, #18
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800146c:	e007      	b.n	800147e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001472:	f043 0210 	orr.w	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013c00 	.word	0x40013c00
 800148c:	ffe1f7fd 	.word	0xffe1f7fd
 8001490:	ff1f0efe 	.word	0xff1f0efe

08001494 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Start+0x1a>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e098      	b.n	80015e0 <HAL_ADC_Start+0x14c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 faa4 	bl	8001a04 <ADC_Enable>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8087 	bne.w	80015d6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a41      	ldr	r2, [pc, #260]	@ (80015e8 <HAL_ADC_Start+0x154>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d105      	bne.n	80014f2 <HAL_ADC_Start+0x5e>
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_ADC_Start+0x158>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d026      	beq.n	800155a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001514:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800151c:	e01d      	b.n	800155a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <HAL_ADC_Start+0x158>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d004      	beq.n	800153e <HAL_ADC_Start+0xaa>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2b      	ldr	r2, [pc, #172]	@ (80015e8 <HAL_ADC_Start+0x154>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10d      	bne.n	800155a <HAL_ADC_Start+0xc6>
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_ADC_Start+0x158>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001552:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	f023 0206 	bic.w	r2, r3, #6
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001572:	e002      	b.n	800157a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0202 	mvn.w	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001596:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800159a:	d113      	bne.n	80015c4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015a0:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <HAL_ADC_Start+0x154>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d105      	bne.n	80015b2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_ADC_Start+0x158>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d108      	bne.n	80015c4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	e00c      	b.n	80015de <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e003      	b.n	80015de <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40012800 	.word	0x40012800
 80015ec:	40012400 	.word	0x40012400

080015f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001606:	f7ff fe2d 	bl	8001264 <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f043 0220 	orr.w	r2, r3, #32
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0d3      	b.n	80017da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d131      	bne.n	80016a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001646:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800164a:	2b00      	cmp	r3, #0
 800164c:	d12a      	bne.n	80016a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800164e:	e021      	b.n	8001694 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001656:	d01d      	beq.n	8001694 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ADC_PollForConversion+0x7e>
 800165e:	f7ff fe01 	bl	8001264 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d212      	bcs.n	8001694 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10b      	bne.n	8001694 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	f043 0204 	orr.w	r2, r3, #4
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0a2      	b.n	80017da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0d6      	beq.n	8001650 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016a2:	e070      	b.n	8001786 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016a4:	4b4f      	ldr	r3, [pc, #316]	@ (80017e4 <HAL_ADC_PollForConversion+0x1f4>)
 80016a6:	681c      	ldr	r4, [r3, #0]
 80016a8:	2002      	movs	r0, #2
 80016aa:	f001 f9b7 	bl	8002a1c <HAL_RCCEx_GetPeriphCLKFreq>
 80016ae:	4603      	mov	r3, r0
 80016b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6919      	ldr	r1, [r3, #16]
 80016ba:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <HAL_ADC_PollForConversion+0x1f8>)
 80016bc:	400b      	ands	r3, r1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d118      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x104>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68d9      	ldr	r1, [r3, #12]
 80016c8:	4b48      	ldr	r3, [pc, #288]	@ (80017ec <HAL_ADC_PollForConversion+0x1fc>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_ADC_PollForConversion+0x104>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	4b46      	ldr	r3, [pc, #280]	@ (80017f0 <HAL_ADC_PollForConversion+0x200>)
 80016d8:	400b      	ands	r3, r1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <HAL_ADC_PollForConversion+0x100>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d9      	ldr	r1, [r3, #12]
 80016e4:	4b43      	ldr	r3, [pc, #268]	@ (80017f4 <HAL_ADC_PollForConversion+0x204>)
 80016e6:	400b      	ands	r3, r1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_PollForConversion+0x100>
 80016ec:	2314      	movs	r3, #20
 80016ee:	e020      	b.n	8001732 <HAL_ADC_PollForConversion+0x142>
 80016f0:	2329      	movs	r3, #41	@ 0x29
 80016f2:	e01e      	b.n	8001732 <HAL_ADC_PollForConversion+0x142>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <HAL_ADC_PollForConversion+0x200>)
 80016fc:	400b      	ands	r3, r1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_ADC_PollForConversion+0x120>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68d9      	ldr	r1, [r3, #12]
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <HAL_ADC_PollForConversion+0x204>)
 800170a:	400b      	ands	r3, r1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_ADC_PollForConversion+0x13c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <HAL_ADC_PollForConversion+0x208>)
 8001718:	400b      	ands	r3, r1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d108      	bne.n	8001730 <HAL_ADC_PollForConversion+0x140>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_ADC_PollForConversion+0x208>)
 8001726:	400b      	ands	r3, r1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_ADC_PollForConversion+0x140>
 800172c:	2354      	movs	r3, #84	@ 0x54
 800172e:	e000      	b.n	8001732 <HAL_ADC_PollForConversion+0x142>
 8001730:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001738:	e021      	b.n	800177e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d01a      	beq.n	8001778 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <HAL_ADC_PollForConversion+0x168>
 8001748:	f7ff fd8c 	bl	8001264 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d20f      	bcs.n	8001778 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d90b      	bls.n	8001778 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e030      	b.n	80017da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8d9      	bhi.n	800173a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f06f 0212 	mvn.w	r2, #18
 800178e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017aa:	d115      	bne.n	80017d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d111      	bne.n	80017d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000
 80017e8:	24924924 	.word	0x24924924
 80017ec:	00924924 	.word	0x00924924
 80017f0:	12492492 	.word	0x12492492
 80017f4:	00492492 	.word	0x00492492
 80017f8:	00249249 	.word	0x00249249

080017fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x20>
 8001830:	2302      	movs	r3, #2
 8001832:	e0dc      	b.n	80019ee <HAL_ADC_ConfigChannel+0x1da>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b06      	cmp	r3, #6
 8001842:	d81c      	bhi.n	800187e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b05      	subs	r3, #5
 8001856:	221f      	movs	r2, #31
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b05      	subs	r3, #5
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	635a      	str	r2, [r3, #52]	@ 0x34
 800187c:	e03c      	b.n	80018f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d81c      	bhi.n	80018c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b23      	subs	r3, #35	@ 0x23
 8001898:	221f      	movs	r2, #31
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	4019      	ands	r1, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b23      	subs	r3, #35	@ 0x23
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80018be:	e01b      	b.n	80018f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	3b41      	subs	r3, #65	@ 0x41
 80018d2:	221f      	movs	r2, #31
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	4019      	ands	r1, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b41      	subs	r3, #65	@ 0x41
 80018ec:	fa00 f203 	lsl.w	r2, r0, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b09      	cmp	r3, #9
 80018fe:	d91c      	bls.n	800193a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68d9      	ldr	r1, [r3, #12]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	3b1e      	subs	r3, #30
 8001912:	2207      	movs	r2, #7
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4019      	ands	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6898      	ldr	r0, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3b1e      	subs	r3, #30
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	e019      	b.n	800196e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6919      	ldr	r1, [r3, #16]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	2207      	movs	r2, #7
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	4019      	ands	r1, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6898      	ldr	r0, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	fa00 f203 	lsl.w	r2, r0, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d003      	beq.n	800197e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800197a:	2b11      	cmp	r3, #17
 800197c:	d132      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d125      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d126      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d11a      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_ADC_ConfigChannel+0x1e8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <HAL_ADC_ConfigChannel+0x1ec>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	0c9a      	lsrs	r2, r3, #18
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c4:	e002      	b.n	80019cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f9      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x1b2>
 80019d2:	e007      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	40012400 	.word	0x40012400
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83

08001a04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d040      	beq.n	8001aa4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0201 	orr.w	r2, r2, #1
 8001a30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <ADC_Enable+0xac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <ADC_Enable+0xb0>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0c9b      	lsrs	r3, r3, #18
 8001a3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a40:	e002      	b.n	8001a48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f9      	bne.n	8001a42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff fc09 	bl	8001264 <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a54:	e01f      	b.n	8001a96 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a56:	f7ff fc05 	bl	8001264 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d918      	bls.n	8001a96 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d011      	beq.n	8001a96 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e007      	b.n	8001aa6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d1d8      	bne.n	8001a56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12e      	bne.n	8001b30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ae2:	f7ff fbbf 	bl	8001264 <HAL_GetTick>
 8001ae6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ae8:	e01b      	b.n	8001b22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aea:	f7ff fbbb 	bl	8001264 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d914      	bls.n	8001b22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10d      	bne.n	8001b22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	f043 0201 	orr.w	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e007      	b.n	8001b32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d0dc      	beq.n	8001aea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff90 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff49 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff5e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff90 	bl	8001bf4 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5f 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffb0 	bl	8001c58 <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b08b      	sub	sp, #44	@ 0x2c
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	e179      	b.n	800200c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 8168 	bne.w	8002006 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a96      	ldr	r2, [pc, #600]	@ (8001f94 <HAL_GPIO_Init+0x290>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d05e      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d40:	4a94      	ldr	r2, [pc, #592]	@ (8001f94 <HAL_GPIO_Init+0x290>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d875      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d46:	4a94      	ldr	r2, [pc, #592]	@ (8001f98 <HAL_GPIO_Init+0x294>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d058      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d4c:	4a92      	ldr	r2, [pc, #584]	@ (8001f98 <HAL_GPIO_Init+0x294>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d86f      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d52:	4a92      	ldr	r2, [pc, #584]	@ (8001f9c <HAL_GPIO_Init+0x298>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d052      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d58:	4a90      	ldr	r2, [pc, #576]	@ (8001f9c <HAL_GPIO_Init+0x298>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d869      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d5e:	4a90      	ldr	r2, [pc, #576]	@ (8001fa0 <HAL_GPIO_Init+0x29c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04c      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d64:	4a8e      	ldr	r2, [pc, #568]	@ (8001fa0 <HAL_GPIO_Init+0x29c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d863      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d6a:	4a8e      	ldr	r2, [pc, #568]	@ (8001fa4 <HAL_GPIO_Init+0x2a0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d046      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
 8001d70:	4a8c      	ldr	r2, [pc, #560]	@ (8001fa4 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d85d      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d76:	2b12      	cmp	r3, #18
 8001d78:	d82a      	bhi.n	8001dd0 <HAL_GPIO_Init+0xcc>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d859      	bhi.n	8001e32 <HAL_GPIO_Init+0x12e>
 8001d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d84 <HAL_GPIO_Init+0x80>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001dff 	.word	0x08001dff
 8001d88:	08001dd9 	.word	0x08001dd9
 8001d8c:	08001deb 	.word	0x08001deb
 8001d90:	08001e2d 	.word	0x08001e2d
 8001d94:	08001e33 	.word	0x08001e33
 8001d98:	08001e33 	.word	0x08001e33
 8001d9c:	08001e33 	.word	0x08001e33
 8001da0:	08001e33 	.word	0x08001e33
 8001da4:	08001e33 	.word	0x08001e33
 8001da8:	08001e33 	.word	0x08001e33
 8001dac:	08001e33 	.word	0x08001e33
 8001db0:	08001e33 	.word	0x08001e33
 8001db4:	08001e33 	.word	0x08001e33
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e33 	.word	0x08001e33
 8001dc0:	08001e33 	.word	0x08001e33
 8001dc4:	08001e33 	.word	0x08001e33
 8001dc8:	08001de1 	.word	0x08001de1
 8001dcc:	08001df5 	.word	0x08001df5
 8001dd0:	4a75      	ldr	r2, [pc, #468]	@ (8001fa8 <HAL_GPIO_Init+0x2a4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dd6:	e02c      	b.n	8001e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e029      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	623b      	str	r3, [r7, #32]
          break;
 8001de8:	e024      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	3308      	adds	r3, #8
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e01f      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e01a      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e06:	2304      	movs	r3, #4
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e013      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e14:	2308      	movs	r3, #8
 8001e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	611a      	str	r2, [r3, #16]
          break;
 8001e1e:	e009      	b.n	8001e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	615a      	str	r2, [r3, #20]
          break;
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x130>
          break;
 8001e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2bff      	cmp	r3, #255	@ 0xff
 8001e38:	d801      	bhi.n	8001e3e <HAL_GPIO_Init+0x13a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_Init+0x13e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	@ 0xff
 8001e48:	d802      	bhi.n	8001e50 <HAL_GPIO_Init+0x14c>
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x152>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	3b08      	subs	r3, #8
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	6a39      	ldr	r1, [r7, #32]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80c1 	beq.w	8002006 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e84:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_GPIO_Init+0x2a8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a48      	ldr	r2, [pc, #288]	@ (8001fac <HAL_GPIO_Init+0x2a8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b46      	ldr	r3, [pc, #280]	@ (8001fac <HAL_GPIO_Init+0x2a8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e9c:	4a44      	ldr	r2, [pc, #272]	@ (8001fb0 <HAL_GPIO_Init+0x2ac>)
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <HAL_GPIO_Init+0x2b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d01f      	beq.n	8001f08 <HAL_GPIO_Init+0x204>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_GPIO_Init+0x2b4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d019      	beq.n	8001f04 <HAL_GPIO_Init+0x200>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	@ (8001fbc <HAL_GPIO_Init+0x2b8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_GPIO_Init+0x1fc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a39      	ldr	r2, [pc, #228]	@ (8001fc0 <HAL_GPIO_Init+0x2bc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00d      	beq.n	8001efc <HAL_GPIO_Init+0x1f8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a38      	ldr	r2, [pc, #224]	@ (8001fc4 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a37      	ldr	r2, [pc, #220]	@ (8001fc8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_GPIO_Init+0x1f0>
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	e00a      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	e008      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001efc:	2303      	movs	r3, #3
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x206>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	4925      	ldr	r1, [pc, #148]	@ (8001fb0 <HAL_GPIO_Init+0x2ac>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b25      	ldr	r3, [pc, #148]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4924      	ldr	r1, [pc, #144]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4920      	ldr	r1, [pc, #128]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	491a      	ldr	r1, [pc, #104]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4916      	ldr	r1, [pc, #88]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d025      	beq.n	8001fd0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <HAL_GPIO_Init+0x2c8>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e025      	b.n	8001fde <HAL_GPIO_Init+0x2da>
 8001f92:	bf00      	nop
 8001f94:	10320000 	.word	0x10320000
 8001f98:	10310000 	.word	0x10310000
 8001f9c:	10220000 	.word	0x10220000
 8001fa0:	10210000 	.word	0x10210000
 8001fa4:	10120000 	.word	0x10120000
 8001fa8:	10110000 	.word	0x10110000
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	40010800 	.word	0x40010800
 8001fb8:	40010c00 	.word	0x40010c00
 8001fbc:	40011000 	.word	0x40011000
 8001fc0:	40011400 	.word	0x40011400
 8001fc4:	40011800 	.word	0x40011800
 8001fc8:	40011c00 	.word	0x40011c00
 8001fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4913      	ldr	r1, [pc, #76]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	490e      	ldr	r1, [pc, #56]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4909      	ldr	r1, [pc, #36]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8002002:	4013      	ands	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae7e 	bne.w	8001d18 <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	@ 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
 8002038:	4613      	mov	r3, r2
 800203a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002048:	e003      	b.n	8002052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43d9      	mvns	r1, r3
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	400b      	ands	r3, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e272      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8087 	beq.w	80021be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b0:	4b92      	ldr	r3, [pc, #584]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020bc:	4b8f      	ldr	r3, [pc, #572]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d112      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
 80020c8:	4b8c      	ldr	r3, [pc, #560]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d4:	d10b      	bne.n	80020ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d06c      	beq.n	80021bc <HAL_RCC_OscConfig+0x12c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d168      	bne.n	80021bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e24c      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x76>
 80020f8:	4b80      	ldr	r3, [pc, #512]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e02e      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x98>
 800210e:	4b7b      	ldr	r3, [pc, #492]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a7a      	ldr	r2, [pc, #488]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b78      	ldr	r3, [pc, #480]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a77      	ldr	r2, [pc, #476]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0xbc>
 8002132:	4b72      	ldr	r3, [pc, #456]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a71      	ldr	r2, [pc, #452]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xd4>
 800214c:	4b6b      	ldr	r3, [pc, #428]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b68      	ldr	r3, [pc, #416]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a67      	ldr	r2, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002162:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f87a 	bl	8001264 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f876 	bl	8001264 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e200      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b5d      	ldr	r3, [pc, #372]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xe4>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff f866 	bl	8001264 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff f862 	bl	8001264 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1ec      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x10c>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d063      	beq.n	8002292 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ca:	4b4c      	ldr	r3, [pc, #304]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d6:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d11c      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
 80021e2:	4b46      	ldr	r3, [pc, #280]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d001      	beq.n	8002206 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e1c0      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4939      	ldr	r1, [pc, #228]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	e03a      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_RCC_OscConfig+0x270>)
 8002226:	2201      	movs	r2, #1
 8002228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff f81b 	bl	8001264 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff f817 	bl	8001264 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	4b2d      	ldr	r3, [pc, #180]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4927      	ldr	r1, [pc, #156]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <HAL_RCC_OscConfig+0x270>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe fffa 	bl	8001264 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002274:	f7fe fff6 	bl	8001264 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e180      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b1d      	ldr	r3, [pc, #116]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03a      	beq.n	8002314 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe ffda 	bl	8001264 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe ffd6 	bl	8001264 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e160      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <HAL_RCC_OscConfig+0x26c>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d2:	2001      	movs	r0, #1
 80022d4:	f000 face 	bl	8002874 <RCC_Delay>
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe ffc0 	bl	8001264 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	e00f      	b.n	8002308 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe ffbc 	bl	8001264 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d908      	bls.n	8002308 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e146      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	42420000 	.word	0x42420000
 8002304:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b92      	ldr	r3, [pc, #584]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e9      	bne.n	80022e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a6 	beq.w	800246e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b8b      	ldr	r3, [pc, #556]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b88      	ldr	r3, [pc, #544]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a87      	ldr	r2, [pc, #540]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b85      	ldr	r3, [pc, #532]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b82      	ldr	r3, [pc, #520]	@ (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b7f      	ldr	r3, [pc, #508]	@ (8002558 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7e      	ldr	r2, [pc, #504]	@ (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe ff7d 	bl	8001264 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe ff79 	bl	8001264 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	@ 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e103      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b75      	ldr	r3, [pc, #468]	@ (8002558 <HAL_RCC_OscConfig+0x4c8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x312>
 8002394:	4b6f      	ldr	r3, [pc, #444]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a6e      	ldr	r2, [pc, #440]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e02d      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x334>
 80023aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a69      	ldr	r2, [pc, #420]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b67      	ldr	r3, [pc, #412]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a66      	ldr	r2, [pc, #408]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01c      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCC_OscConfig+0x356>
 80023cc:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a60      	ldr	r2, [pc, #384]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	e00b      	b.n	80023fe <HAL_RCC_OscConfig+0x36e>
 80023e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b58      	ldr	r3, [pc, #352]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a57      	ldr	r2, [pc, #348]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d015      	beq.n	8002432 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe ff2d 	bl	8001264 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7fe ff29 	bl	8001264 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0b1      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b4b      	ldr	r3, [pc, #300]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ee      	beq.n	800240e <HAL_RCC_OscConfig+0x37e>
 8002430:	e014      	b.n	800245c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7fe ff17 	bl	8001264 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe ff13 	bl	8001264 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e09b      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	4b40      	ldr	r3, [pc, #256]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1ee      	bne.n	800243a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800245c:	7dfb      	ldrb	r3, [r7, #23]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a3b      	ldr	r2, [pc, #236]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8087 	beq.w	8002586 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d061      	beq.n	8002548 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d146      	bne.n	800251a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x4cc>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7fe fee7 	bl	8001264 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fee3 	bl	8001264 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e06d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4921      	ldr	r1, [pc, #132]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a19      	ldr	r1, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	430b      	orrs	r3, r1
 80024e6:	491b      	ldr	r1, [pc, #108]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x4cc>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe feb7 	bl	8001264 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe feb3 	bl	8001264 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e03d      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x46a>
 8002518:	e035      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fea0 	bl	8001264 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fe9c 	bl	8001264 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e026      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x498>
 8002546:	e01e      	b.n	8002586 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e019      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x500>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fdee 	bl	8001264 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fdea 	bl	8001264 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	@ (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd4c 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	08005cf8 	.word	0x08005cf8
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002782:	4b1e      	ldr	r3, [pc, #120]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b04      	cmp	r3, #4
 8002790:	d002      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x30>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d003      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x36>
 8002796:	e027      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	e027      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0c9b      	lsrs	r3, r3, #18
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x94>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0c5b      	lsrs	r3, r3, #17
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	fb03 f202 	mul.w	r2, r3, r2
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e004      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	613b      	str	r3, [r7, #16]
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	693b      	ldr	r3, [r7, #16]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	007a1200 	.word	0x007a1200
 8002804:	08005d10 	.word	0x08005d10
 8002808:	08005d20 	.word	0x08005d20
 800280c:	003d0900 	.word	0x003d0900

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	08005d08 	.word	0x08005d08

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffde 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	@ (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08005d08 	.word	0x08005d08

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d07d      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b49      	ldr	r3, [pc, #292]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b46      	ldr	r3, [pc, #280]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d118      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a42      	ldr	r2, [pc, #264]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002910:	f7fe fca8 	bl	8001264 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	e008      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe fca4 	bl	8001264 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e06d      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002936:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d027      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800295e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b2c      	ldr	r3, [pc, #176]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800296a:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d014      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fc73 	bl	8001264 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fc6f 	bl	8001264 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e036      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4917      	ldr	r1, [pc, #92]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	490b      	ldr	r1, [pc, #44]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	4904      	ldr	r1, [pc, #16]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42420440 	.word	0x42420440

08002a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	f200 80af 	bhi.w	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002a42:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002b1f 	.word	0x08002b1f
 8002a4c:	08002b85 	.word	0x08002b85
 8002a50:	08002ba1 	.word	0x08002ba1
 8002a54:	08002b0f 	.word	0x08002b0f
 8002a58:	08002ba1 	.word	0x08002ba1
 8002a5c:	08002ba1 	.word	0x08002ba1
 8002a60:	08002ba1 	.word	0x08002ba1
 8002a64:	08002b17 	.word	0x08002b17
 8002a68:	08002ba1 	.word	0x08002ba1
 8002a6c:	08002ba1 	.word	0x08002ba1
 8002a70:	08002ba1 	.word	0x08002ba1
 8002a74:	08002ba1 	.word	0x08002ba1
 8002a78:	08002ba1 	.word	0x08002ba1
 8002a7c:	08002ba1 	.word	0x08002ba1
 8002a80:	08002ba1 	.word	0x08002ba1
 8002a84:	08002a89 	.word	0x08002a89
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002a88:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8084 	beq.w	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	4a44      	ldr	r2, [pc, #272]	@ (8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d015      	beq.n	8002ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	0c5b      	lsrs	r3, r3, #17
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ace:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e004      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4a38      	ldr	r2, [pc, #224]	@ (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002aea:	4b32      	ldr	r3, [pc, #200]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af6:	d102      	bne.n	8002afe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002afc:	e052      	b.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
      break;
 8002b0c:	e04a      	b.n	8002ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b0e:	f7ff fe2b 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002b12:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b14:	e049      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b16:	f7ff fe27 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002b1a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b1c:	e045      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002b1e:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2e:	d108      	bne.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e01f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b4e:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002b5a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	e00f      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002b7a:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002b7e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002b80:	e012      	b.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002b82:	e011      	b.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b84:	f7ff fe62 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0b9b      	lsrs	r3, r3, #14
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	3301      	adds	r3, #1
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	61bb      	str	r3, [r7, #24]
      break;
 8002b9e:	e004      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e002      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002ba8:	bf00      	nop
    }
  }
  return (frequency);
 8002baa:	69bb      	ldr	r3, [r7, #24]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08005d24 	.word	0x08005d24
 8002bbc:	08005d34 	.word	0x08005d34
 8002bc0:	007a1200 	.word	0x007a1200
 8002bc4:	003d0900 	.word	0x003d0900
 8002bc8:	aaaaaaab 	.word	0xaaaaaaab

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e042      	b.n	8002c64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe f97a 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	@ 0x24
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f971 	bl	8002ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d175      	bne.n	8002d78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Transmit+0x2c>
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e06e      	b.n	8002d7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2221      	movs	r2, #33	@ 0x21
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002caa:	f7fe fadb 	bl	8001264 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_UART_Transmit+0x6c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e003      	b.n	8002ce0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ce0:	e02e      	b.n	8002d40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	@ 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f848 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e03a      	b.n	8002d7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e007      	b.n	8002d32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1cb      	bne.n	8002ce2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2140      	movs	r1, #64	@ 0x40
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f814 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d92:	e03b      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d037      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fa62 	bl	8001264 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e03a      	b.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b80      	cmp	r3, #128	@ 0x80
 8002dc8:	d020      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b40      	cmp	r3, #64	@ 0x40
 8002dce:	d01d      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d116      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f81d 	bl	8002e34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00f      	b.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d0b4      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b095      	sub	sp, #84	@ 0x54
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d119      	bne.n	8002ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ecc:	61ba      	str	r2, [r7, #24]
 8002ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e5      	bne.n	8002eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eee:	bf00      	nop
 8002ef0:	3754      	adds	r7, #84	@ 0x54
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <UART_SetConfig+0x114>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d103      	bne.n	8002f68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f60:	f7ff fc74 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	e002      	b.n	8002f6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f68:	f7ff fc5c 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <UART_SetConfig+0x118>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	0119      	lsls	r1, r3, #4
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003010 <UART_SetConfig+0x118>)
 8002fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2064      	movs	r0, #100	@ 0x64
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	@ 0x32
 8002fb8:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <UART_SetConfig+0x118>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fc4:	4419      	add	r1, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <UART_SetConfig+0x118>)
 8002fde:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2064      	movs	r0, #100	@ 0x64
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	3332      	adds	r3, #50	@ 0x32
 8002ff0:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <UART_SetConfig+0x118>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	440a      	add	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013800 	.word	0x40013800
 8003010:	51eb851f 	.word	0x51eb851f

08003014 <__cvt>:
 8003014:	2b00      	cmp	r3, #0
 8003016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800301a:	461d      	mov	r5, r3
 800301c:	bfbb      	ittet	lt
 800301e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003022:	461d      	movlt	r5, r3
 8003024:	2300      	movge	r3, #0
 8003026:	232d      	movlt	r3, #45	@ 0x2d
 8003028:	b088      	sub	sp, #32
 800302a:	4614      	mov	r4, r2
 800302c:	bfb8      	it	lt
 800302e:	4614      	movlt	r4, r2
 8003030:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003032:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003034:	7013      	strb	r3, [r2, #0]
 8003036:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003038:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800303c:	f023 0820 	bic.w	r8, r3, #32
 8003040:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003044:	d005      	beq.n	8003052 <__cvt+0x3e>
 8003046:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800304a:	d100      	bne.n	800304e <__cvt+0x3a>
 800304c:	3601      	adds	r6, #1
 800304e:	2302      	movs	r3, #2
 8003050:	e000      	b.n	8003054 <__cvt+0x40>
 8003052:	2303      	movs	r3, #3
 8003054:	aa07      	add	r2, sp, #28
 8003056:	9204      	str	r2, [sp, #16]
 8003058:	aa06      	add	r2, sp, #24
 800305a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800305e:	e9cd 3600 	strd	r3, r6, [sp]
 8003062:	4622      	mov	r2, r4
 8003064:	462b      	mov	r3, r5
 8003066:	f000 fe6f 	bl	8003d48 <_dtoa_r>
 800306a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800306e:	4607      	mov	r7, r0
 8003070:	d119      	bne.n	80030a6 <__cvt+0x92>
 8003072:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003074:	07db      	lsls	r3, r3, #31
 8003076:	d50e      	bpl.n	8003096 <__cvt+0x82>
 8003078:	eb00 0906 	add.w	r9, r0, r6
 800307c:	2200      	movs	r2, #0
 800307e:	2300      	movs	r3, #0
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f7fd fcfc 	bl	8000a80 <__aeabi_dcmpeq>
 8003088:	b108      	cbz	r0, 800308e <__cvt+0x7a>
 800308a:	f8cd 901c 	str.w	r9, [sp, #28]
 800308e:	2230      	movs	r2, #48	@ 0x30
 8003090:	9b07      	ldr	r3, [sp, #28]
 8003092:	454b      	cmp	r3, r9
 8003094:	d31e      	bcc.n	80030d4 <__cvt+0xc0>
 8003096:	4638      	mov	r0, r7
 8003098:	9b07      	ldr	r3, [sp, #28]
 800309a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800309c:	1bdb      	subs	r3, r3, r7
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	b008      	add	sp, #32
 80030a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80030aa:	eb00 0906 	add.w	r9, r0, r6
 80030ae:	d1e5      	bne.n	800307c <__cvt+0x68>
 80030b0:	7803      	ldrb	r3, [r0, #0]
 80030b2:	2b30      	cmp	r3, #48	@ 0x30
 80030b4:	d10a      	bne.n	80030cc <__cvt+0xb8>
 80030b6:	2200      	movs	r2, #0
 80030b8:	2300      	movs	r3, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd fcdf 	bl	8000a80 <__aeabi_dcmpeq>
 80030c2:	b918      	cbnz	r0, 80030cc <__cvt+0xb8>
 80030c4:	f1c6 0601 	rsb	r6, r6, #1
 80030c8:	f8ca 6000 	str.w	r6, [sl]
 80030cc:	f8da 3000 	ldr.w	r3, [sl]
 80030d0:	4499      	add	r9, r3
 80030d2:	e7d3      	b.n	800307c <__cvt+0x68>
 80030d4:	1c59      	adds	r1, r3, #1
 80030d6:	9107      	str	r1, [sp, #28]
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e7d9      	b.n	8003090 <__cvt+0x7c>

080030dc <__exponent>:
 80030dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030de:	2900      	cmp	r1, #0
 80030e0:	bfb6      	itet	lt
 80030e2:	232d      	movlt	r3, #45	@ 0x2d
 80030e4:	232b      	movge	r3, #43	@ 0x2b
 80030e6:	4249      	neglt	r1, r1
 80030e8:	2909      	cmp	r1, #9
 80030ea:	7002      	strb	r2, [r0, #0]
 80030ec:	7043      	strb	r3, [r0, #1]
 80030ee:	dd29      	ble.n	8003144 <__exponent+0x68>
 80030f0:	f10d 0307 	add.w	r3, sp, #7
 80030f4:	461d      	mov	r5, r3
 80030f6:	270a      	movs	r7, #10
 80030f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80030fc:	461a      	mov	r2, r3
 80030fe:	fb07 1416 	mls	r4, r7, r6, r1
 8003102:	3430      	adds	r4, #48	@ 0x30
 8003104:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003108:	460c      	mov	r4, r1
 800310a:	2c63      	cmp	r4, #99	@ 0x63
 800310c:	4631      	mov	r1, r6
 800310e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003112:	dcf1      	bgt.n	80030f8 <__exponent+0x1c>
 8003114:	3130      	adds	r1, #48	@ 0x30
 8003116:	1e94      	subs	r4, r2, #2
 8003118:	f803 1c01 	strb.w	r1, [r3, #-1]
 800311c:	4623      	mov	r3, r4
 800311e:	1c41      	adds	r1, r0, #1
 8003120:	42ab      	cmp	r3, r5
 8003122:	d30a      	bcc.n	800313a <__exponent+0x5e>
 8003124:	f10d 0309 	add.w	r3, sp, #9
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	42ac      	cmp	r4, r5
 800312c:	bf88      	it	hi
 800312e:	2300      	movhi	r3, #0
 8003130:	3302      	adds	r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	1a18      	subs	r0, r3, r0
 8003136:	b003      	add	sp, #12
 8003138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800313e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003142:	e7ed      	b.n	8003120 <__exponent+0x44>
 8003144:	2330      	movs	r3, #48	@ 0x30
 8003146:	3130      	adds	r1, #48	@ 0x30
 8003148:	7083      	strb	r3, [r0, #2]
 800314a:	70c1      	strb	r1, [r0, #3]
 800314c:	1d03      	adds	r3, r0, #4
 800314e:	e7f1      	b.n	8003134 <__exponent+0x58>

08003150 <_printf_float>:
 8003150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003154:	b091      	sub	sp, #68	@ 0x44
 8003156:	460c      	mov	r4, r1
 8003158:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800315c:	4616      	mov	r6, r2
 800315e:	461f      	mov	r7, r3
 8003160:	4605      	mov	r5, r0
 8003162:	f000 fce1 	bl	8003b28 <_localeconv_r>
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	9308      	str	r3, [sp, #32]
 800316c:	f7fd f85c 	bl	8000228 <strlen>
 8003170:	2300      	movs	r3, #0
 8003172:	930e      	str	r3, [sp, #56]	@ 0x38
 8003174:	f8d8 3000 	ldr.w	r3, [r8]
 8003178:	9009      	str	r0, [sp, #36]	@ 0x24
 800317a:	3307      	adds	r3, #7
 800317c:	f023 0307 	bic.w	r3, r3, #7
 8003180:	f103 0208 	add.w	r2, r3, #8
 8003184:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003188:	f8d4 b000 	ldr.w	fp, [r4]
 800318c:	f8c8 2000 	str.w	r2, [r8]
 8003190:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003194:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800319a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800319e:	f04f 32ff 	mov.w	r2, #4294967295
 80031a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80031a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80031aa:	4b9c      	ldr	r3, [pc, #624]	@ (800341c <_printf_float+0x2cc>)
 80031ac:	f7fd fc9a 	bl	8000ae4 <__aeabi_dcmpun>
 80031b0:	bb70      	cbnz	r0, 8003210 <_printf_float+0xc0>
 80031b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80031b6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ba:	4b98      	ldr	r3, [pc, #608]	@ (800341c <_printf_float+0x2cc>)
 80031bc:	f7fd fc74 	bl	8000aa8 <__aeabi_dcmple>
 80031c0:	bb30      	cbnz	r0, 8003210 <_printf_float+0xc0>
 80031c2:	2200      	movs	r2, #0
 80031c4:	2300      	movs	r3, #0
 80031c6:	4640      	mov	r0, r8
 80031c8:	4649      	mov	r1, r9
 80031ca:	f7fd fc63 	bl	8000a94 <__aeabi_dcmplt>
 80031ce:	b110      	cbz	r0, 80031d6 <_printf_float+0x86>
 80031d0:	232d      	movs	r3, #45	@ 0x2d
 80031d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031d6:	4a92      	ldr	r2, [pc, #584]	@ (8003420 <_printf_float+0x2d0>)
 80031d8:	4b92      	ldr	r3, [pc, #584]	@ (8003424 <_printf_float+0x2d4>)
 80031da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80031de:	bf8c      	ite	hi
 80031e0:	4690      	movhi	r8, r2
 80031e2:	4698      	movls	r8, r3
 80031e4:	2303      	movs	r3, #3
 80031e6:	f04f 0900 	mov.w	r9, #0
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	f02b 0304 	bic.w	r3, fp, #4
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	4633      	mov	r3, r6
 80031f4:	4621      	mov	r1, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	9700      	str	r7, [sp, #0]
 80031fa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80031fc:	f000 f9d4 	bl	80035a8 <_printf_common>
 8003200:	3001      	adds	r0, #1
 8003202:	f040 8090 	bne.w	8003326 <_printf_float+0x1d6>
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	b011      	add	sp, #68	@ 0x44
 800320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	4640      	mov	r0, r8
 8003216:	4649      	mov	r1, r9
 8003218:	f7fd fc64 	bl	8000ae4 <__aeabi_dcmpun>
 800321c:	b148      	cbz	r0, 8003232 <_printf_float+0xe2>
 800321e:	464b      	mov	r3, r9
 8003220:	2b00      	cmp	r3, #0
 8003222:	bfb8      	it	lt
 8003224:	232d      	movlt	r3, #45	@ 0x2d
 8003226:	4a80      	ldr	r2, [pc, #512]	@ (8003428 <_printf_float+0x2d8>)
 8003228:	bfb8      	it	lt
 800322a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800322e:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <_printf_float+0x2dc>)
 8003230:	e7d3      	b.n	80031da <_printf_float+0x8a>
 8003232:	6863      	ldr	r3, [r4, #4]
 8003234:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	d13f      	bne.n	80032bc <_printf_float+0x16c>
 800323c:	2306      	movs	r3, #6
 800323e:	6063      	str	r3, [r4, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	9206      	str	r2, [sp, #24]
 800324a:	aa0e      	add	r2, sp, #56	@ 0x38
 800324c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003250:	aa0d      	add	r2, sp, #52	@ 0x34
 8003252:	9203      	str	r2, [sp, #12]
 8003254:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003258:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	4642      	mov	r2, r8
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4628      	mov	r0, r5
 8003264:	464b      	mov	r3, r9
 8003266:	910a      	str	r1, [sp, #40]	@ 0x28
 8003268:	f7ff fed4 	bl	8003014 <__cvt>
 800326c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800326e:	4680      	mov	r8, r0
 8003270:	2947      	cmp	r1, #71	@ 0x47
 8003272:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003274:	d128      	bne.n	80032c8 <_printf_float+0x178>
 8003276:	1cc8      	adds	r0, r1, #3
 8003278:	db02      	blt.n	8003280 <_printf_float+0x130>
 800327a:	6863      	ldr	r3, [r4, #4]
 800327c:	4299      	cmp	r1, r3
 800327e:	dd40      	ble.n	8003302 <_printf_float+0x1b2>
 8003280:	f1aa 0a02 	sub.w	sl, sl, #2
 8003284:	fa5f fa8a 	uxtb.w	sl, sl
 8003288:	4652      	mov	r2, sl
 800328a:	3901      	subs	r1, #1
 800328c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003290:	910d      	str	r1, [sp, #52]	@ 0x34
 8003292:	f7ff ff23 	bl	80030dc <__exponent>
 8003296:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003298:	4681      	mov	r9, r0
 800329a:	1813      	adds	r3, r2, r0
 800329c:	2a01      	cmp	r2, #1
 800329e:	6123      	str	r3, [r4, #16]
 80032a0:	dc02      	bgt.n	80032a8 <_printf_float+0x158>
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	07d2      	lsls	r2, r2, #31
 80032a6:	d501      	bpl.n	80032ac <_printf_float+0x15c>
 80032a8:	3301      	adds	r3, #1
 80032aa:	6123      	str	r3, [r4, #16]
 80032ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d09e      	beq.n	80031f2 <_printf_float+0xa2>
 80032b4:	232d      	movs	r3, #45	@ 0x2d
 80032b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ba:	e79a      	b.n	80031f2 <_printf_float+0xa2>
 80032bc:	2947      	cmp	r1, #71	@ 0x47
 80032be:	d1bf      	bne.n	8003240 <_printf_float+0xf0>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1bd      	bne.n	8003240 <_printf_float+0xf0>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e7ba      	b.n	800323e <_printf_float+0xee>
 80032c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80032cc:	d9dc      	bls.n	8003288 <_printf_float+0x138>
 80032ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80032d2:	d118      	bne.n	8003306 <_printf_float+0x1b6>
 80032d4:	2900      	cmp	r1, #0
 80032d6:	6863      	ldr	r3, [r4, #4]
 80032d8:	dd0b      	ble.n	80032f2 <_printf_float+0x1a2>
 80032da:	6121      	str	r1, [r4, #16]
 80032dc:	b913      	cbnz	r3, 80032e4 <_printf_float+0x194>
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	07d0      	lsls	r0, r2, #31
 80032e2:	d502      	bpl.n	80032ea <_printf_float+0x19a>
 80032e4:	3301      	adds	r3, #1
 80032e6:	440b      	add	r3, r1
 80032e8:	6123      	str	r3, [r4, #16]
 80032ea:	f04f 0900 	mov.w	r9, #0
 80032ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032f0:	e7dc      	b.n	80032ac <_printf_float+0x15c>
 80032f2:	b913      	cbnz	r3, 80032fa <_printf_float+0x1aa>
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	07d2      	lsls	r2, r2, #31
 80032f8:	d501      	bpl.n	80032fe <_printf_float+0x1ae>
 80032fa:	3302      	adds	r3, #2
 80032fc:	e7f4      	b.n	80032e8 <_printf_float+0x198>
 80032fe:	2301      	movs	r3, #1
 8003300:	e7f2      	b.n	80032e8 <_printf_float+0x198>
 8003302:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003308:	4299      	cmp	r1, r3
 800330a:	db05      	blt.n	8003318 <_printf_float+0x1c8>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	6121      	str	r1, [r4, #16]
 8003310:	07d8      	lsls	r0, r3, #31
 8003312:	d5ea      	bpl.n	80032ea <_printf_float+0x19a>
 8003314:	1c4b      	adds	r3, r1, #1
 8003316:	e7e7      	b.n	80032e8 <_printf_float+0x198>
 8003318:	2900      	cmp	r1, #0
 800331a:	bfcc      	ite	gt
 800331c:	2201      	movgt	r2, #1
 800331e:	f1c1 0202 	rsble	r2, r1, #2
 8003322:	4413      	add	r3, r2
 8003324:	e7e0      	b.n	80032e8 <_printf_float+0x198>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	055a      	lsls	r2, r3, #21
 800332a:	d407      	bmi.n	800333c <_printf_float+0x1ec>
 800332c:	6923      	ldr	r3, [r4, #16]
 800332e:	4642      	mov	r2, r8
 8003330:	4631      	mov	r1, r6
 8003332:	4628      	mov	r0, r5
 8003334:	47b8      	blx	r7
 8003336:	3001      	adds	r0, #1
 8003338:	d12b      	bne.n	8003392 <_printf_float+0x242>
 800333a:	e764      	b.n	8003206 <_printf_float+0xb6>
 800333c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003340:	f240 80dc 	bls.w	80034fc <_printf_float+0x3ac>
 8003344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003348:	2200      	movs	r2, #0
 800334a:	2300      	movs	r3, #0
 800334c:	f7fd fb98 	bl	8000a80 <__aeabi_dcmpeq>
 8003350:	2800      	cmp	r0, #0
 8003352:	d033      	beq.n	80033bc <_printf_float+0x26c>
 8003354:	2301      	movs	r3, #1
 8003356:	4631      	mov	r1, r6
 8003358:	4628      	mov	r0, r5
 800335a:	4a35      	ldr	r2, [pc, #212]	@ (8003430 <_printf_float+0x2e0>)
 800335c:	47b8      	blx	r7
 800335e:	3001      	adds	r0, #1
 8003360:	f43f af51 	beq.w	8003206 <_printf_float+0xb6>
 8003364:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003368:	4543      	cmp	r3, r8
 800336a:	db02      	blt.n	8003372 <_printf_float+0x222>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	07d8      	lsls	r0, r3, #31
 8003370:	d50f      	bpl.n	8003392 <_printf_float+0x242>
 8003372:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003376:	4631      	mov	r1, r6
 8003378:	4628      	mov	r0, r5
 800337a:	47b8      	blx	r7
 800337c:	3001      	adds	r0, #1
 800337e:	f43f af42 	beq.w	8003206 <_printf_float+0xb6>
 8003382:	f04f 0900 	mov.w	r9, #0
 8003386:	f108 38ff 	add.w	r8, r8, #4294967295
 800338a:	f104 0a1a 	add.w	sl, r4, #26
 800338e:	45c8      	cmp	r8, r9
 8003390:	dc09      	bgt.n	80033a6 <_printf_float+0x256>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	079b      	lsls	r3, r3, #30
 8003396:	f100 8102 	bmi.w	800359e <_printf_float+0x44e>
 800339a:	68e0      	ldr	r0, [r4, #12]
 800339c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800339e:	4298      	cmp	r0, r3
 80033a0:	bfb8      	it	lt
 80033a2:	4618      	movlt	r0, r3
 80033a4:	e731      	b.n	800320a <_printf_float+0xba>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4652      	mov	r2, sl
 80033aa:	4631      	mov	r1, r6
 80033ac:	4628      	mov	r0, r5
 80033ae:	47b8      	blx	r7
 80033b0:	3001      	adds	r0, #1
 80033b2:	f43f af28 	beq.w	8003206 <_printf_float+0xb6>
 80033b6:	f109 0901 	add.w	r9, r9, #1
 80033ba:	e7e8      	b.n	800338e <_printf_float+0x23e>
 80033bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dc38      	bgt.n	8003434 <_printf_float+0x2e4>
 80033c2:	2301      	movs	r3, #1
 80033c4:	4631      	mov	r1, r6
 80033c6:	4628      	mov	r0, r5
 80033c8:	4a19      	ldr	r2, [pc, #100]	@ (8003430 <_printf_float+0x2e0>)
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	f43f af1a 	beq.w	8003206 <_printf_float+0xb6>
 80033d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80033d6:	ea59 0303 	orrs.w	r3, r9, r3
 80033da:	d102      	bne.n	80033e2 <_printf_float+0x292>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	07d9      	lsls	r1, r3, #31
 80033e0:	d5d7      	bpl.n	8003392 <_printf_float+0x242>
 80033e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033e6:	4631      	mov	r1, r6
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b8      	blx	r7
 80033ec:	3001      	adds	r0, #1
 80033ee:	f43f af0a 	beq.w	8003206 <_printf_float+0xb6>
 80033f2:	f04f 0a00 	mov.w	sl, #0
 80033f6:	f104 0b1a 	add.w	fp, r4, #26
 80033fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033fc:	425b      	negs	r3, r3
 80033fe:	4553      	cmp	r3, sl
 8003400:	dc01      	bgt.n	8003406 <_printf_float+0x2b6>
 8003402:	464b      	mov	r3, r9
 8003404:	e793      	b.n	800332e <_printf_float+0x1de>
 8003406:	2301      	movs	r3, #1
 8003408:	465a      	mov	r2, fp
 800340a:	4631      	mov	r1, r6
 800340c:	4628      	mov	r0, r5
 800340e:	47b8      	blx	r7
 8003410:	3001      	adds	r0, #1
 8003412:	f43f aef8 	beq.w	8003206 <_printf_float+0xb6>
 8003416:	f10a 0a01 	add.w	sl, sl, #1
 800341a:	e7ee      	b.n	80033fa <_printf_float+0x2aa>
 800341c:	7fefffff 	.word	0x7fefffff
 8003420:	08005d3a 	.word	0x08005d3a
 8003424:	08005d36 	.word	0x08005d36
 8003428:	08005d42 	.word	0x08005d42
 800342c:	08005d3e 	.word	0x08005d3e
 8003430:	08005d46 	.word	0x08005d46
 8003434:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003436:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800343a:	4553      	cmp	r3, sl
 800343c:	bfa8      	it	ge
 800343e:	4653      	movge	r3, sl
 8003440:	2b00      	cmp	r3, #0
 8003442:	4699      	mov	r9, r3
 8003444:	dc36      	bgt.n	80034b4 <_printf_float+0x364>
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800344e:	f104 021a 	add.w	r2, r4, #26
 8003452:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003454:	930a      	str	r3, [sp, #40]	@ 0x28
 8003456:	eba3 0309 	sub.w	r3, r3, r9
 800345a:	455b      	cmp	r3, fp
 800345c:	dc31      	bgt.n	80034c2 <_printf_float+0x372>
 800345e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003460:	459a      	cmp	sl, r3
 8003462:	dc3a      	bgt.n	80034da <_printf_float+0x38a>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	07da      	lsls	r2, r3, #31
 8003468:	d437      	bmi.n	80034da <_printf_float+0x38a>
 800346a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800346c:	ebaa 0903 	sub.w	r9, sl, r3
 8003470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003472:	ebaa 0303 	sub.w	r3, sl, r3
 8003476:	4599      	cmp	r9, r3
 8003478:	bfa8      	it	ge
 800347a:	4699      	movge	r9, r3
 800347c:	f1b9 0f00 	cmp.w	r9, #0
 8003480:	dc33      	bgt.n	80034ea <_printf_float+0x39a>
 8003482:	f04f 0800 	mov.w	r8, #0
 8003486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800348a:	f104 0b1a 	add.w	fp, r4, #26
 800348e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003490:	ebaa 0303 	sub.w	r3, sl, r3
 8003494:	eba3 0309 	sub.w	r3, r3, r9
 8003498:	4543      	cmp	r3, r8
 800349a:	f77f af7a 	ble.w	8003392 <_printf_float+0x242>
 800349e:	2301      	movs	r3, #1
 80034a0:	465a      	mov	r2, fp
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	47b8      	blx	r7
 80034a8:	3001      	adds	r0, #1
 80034aa:	f43f aeac 	beq.w	8003206 <_printf_float+0xb6>
 80034ae:	f108 0801 	add.w	r8, r8, #1
 80034b2:	e7ec      	b.n	800348e <_printf_float+0x33e>
 80034b4:	4642      	mov	r2, r8
 80034b6:	4631      	mov	r1, r6
 80034b8:	4628      	mov	r0, r5
 80034ba:	47b8      	blx	r7
 80034bc:	3001      	adds	r0, #1
 80034be:	d1c2      	bne.n	8003446 <_printf_float+0x2f6>
 80034c0:	e6a1      	b.n	8003206 <_printf_float+0xb6>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80034ca:	47b8      	blx	r7
 80034cc:	3001      	adds	r0, #1
 80034ce:	f43f ae9a 	beq.w	8003206 <_printf_float+0xb6>
 80034d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034d4:	f10b 0b01 	add.w	fp, fp, #1
 80034d8:	e7bb      	b.n	8003452 <_printf_float+0x302>
 80034da:	4631      	mov	r1, r6
 80034dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	d1c0      	bne.n	800346a <_printf_float+0x31a>
 80034e8:	e68d      	b.n	8003206 <_printf_float+0xb6>
 80034ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034ec:	464b      	mov	r3, r9
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	4442      	add	r2, r8
 80034f4:	47b8      	blx	r7
 80034f6:	3001      	adds	r0, #1
 80034f8:	d1c3      	bne.n	8003482 <_printf_float+0x332>
 80034fa:	e684      	b.n	8003206 <_printf_float+0xb6>
 80034fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003500:	f1ba 0f01 	cmp.w	sl, #1
 8003504:	dc01      	bgt.n	800350a <_printf_float+0x3ba>
 8003506:	07db      	lsls	r3, r3, #31
 8003508:	d536      	bpl.n	8003578 <_printf_float+0x428>
 800350a:	2301      	movs	r3, #1
 800350c:	4642      	mov	r2, r8
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	f43f ae76 	beq.w	8003206 <_printf_float+0xb6>
 800351a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	47b8      	blx	r7
 8003524:	3001      	adds	r0, #1
 8003526:	f43f ae6e 	beq.w	8003206 <_printf_float+0xb6>
 800352a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003536:	f7fd faa3 	bl	8000a80 <__aeabi_dcmpeq>
 800353a:	b9c0      	cbnz	r0, 800356e <_printf_float+0x41e>
 800353c:	4653      	mov	r3, sl
 800353e:	f108 0201 	add.w	r2, r8, #1
 8003542:	4631      	mov	r1, r6
 8003544:	4628      	mov	r0, r5
 8003546:	47b8      	blx	r7
 8003548:	3001      	adds	r0, #1
 800354a:	d10c      	bne.n	8003566 <_printf_float+0x416>
 800354c:	e65b      	b.n	8003206 <_printf_float+0xb6>
 800354e:	2301      	movs	r3, #1
 8003550:	465a      	mov	r2, fp
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	47b8      	blx	r7
 8003558:	3001      	adds	r0, #1
 800355a:	f43f ae54 	beq.w	8003206 <_printf_float+0xb6>
 800355e:	f108 0801 	add.w	r8, r8, #1
 8003562:	45d0      	cmp	r8, sl
 8003564:	dbf3      	blt.n	800354e <_printf_float+0x3fe>
 8003566:	464b      	mov	r3, r9
 8003568:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800356c:	e6e0      	b.n	8003330 <_printf_float+0x1e0>
 800356e:	f04f 0800 	mov.w	r8, #0
 8003572:	f104 0b1a 	add.w	fp, r4, #26
 8003576:	e7f4      	b.n	8003562 <_printf_float+0x412>
 8003578:	2301      	movs	r3, #1
 800357a:	4642      	mov	r2, r8
 800357c:	e7e1      	b.n	8003542 <_printf_float+0x3f2>
 800357e:	2301      	movs	r3, #1
 8003580:	464a      	mov	r2, r9
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	47b8      	blx	r7
 8003588:	3001      	adds	r0, #1
 800358a:	f43f ae3c 	beq.w	8003206 <_printf_float+0xb6>
 800358e:	f108 0801 	add.w	r8, r8, #1
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003596:	1a5b      	subs	r3, r3, r1
 8003598:	4543      	cmp	r3, r8
 800359a:	dcf0      	bgt.n	800357e <_printf_float+0x42e>
 800359c:	e6fd      	b.n	800339a <_printf_float+0x24a>
 800359e:	f04f 0800 	mov.w	r8, #0
 80035a2:	f104 0919 	add.w	r9, r4, #25
 80035a6:	e7f4      	b.n	8003592 <_printf_float+0x442>

080035a8 <_printf_common>:
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	4616      	mov	r6, r2
 80035ae:	4698      	mov	r8, r3
 80035b0:	688a      	ldr	r2, [r1, #8]
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	4607      	mov	r7, r0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	bfb8      	it	lt
 80035ba:	4613      	movlt	r3, r2
 80035bc:	6033      	str	r3, [r6, #0]
 80035be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035c2:	460c      	mov	r4, r1
 80035c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035c8:	b10a      	cbz	r2, 80035ce <_printf_common+0x26>
 80035ca:	3301      	adds	r3, #1
 80035cc:	6033      	str	r3, [r6, #0]
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	0699      	lsls	r1, r3, #26
 80035d2:	bf42      	ittt	mi
 80035d4:	6833      	ldrmi	r3, [r6, #0]
 80035d6:	3302      	addmi	r3, #2
 80035d8:	6033      	strmi	r3, [r6, #0]
 80035da:	6825      	ldr	r5, [r4, #0]
 80035dc:	f015 0506 	ands.w	r5, r5, #6
 80035e0:	d106      	bne.n	80035f0 <_printf_common+0x48>
 80035e2:	f104 0a19 	add.w	sl, r4, #25
 80035e6:	68e3      	ldr	r3, [r4, #12]
 80035e8:	6832      	ldr	r2, [r6, #0]
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	42ab      	cmp	r3, r5
 80035ee:	dc2b      	bgt.n	8003648 <_printf_common+0xa0>
 80035f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	3b00      	subs	r3, #0
 80035f8:	bf18      	it	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	0692      	lsls	r2, r2, #26
 80035fe:	d430      	bmi.n	8003662 <_printf_common+0xba>
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003608:	47c8      	blx	r9
 800360a:	3001      	adds	r0, #1
 800360c:	d023      	beq.n	8003656 <_printf_common+0xae>
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	6922      	ldr	r2, [r4, #16]
 8003612:	f003 0306 	and.w	r3, r3, #6
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf14      	ite	ne
 800361a:	2500      	movne	r5, #0
 800361c:	6833      	ldreq	r3, [r6, #0]
 800361e:	f04f 0600 	mov.w	r6, #0
 8003622:	bf08      	it	eq
 8003624:	68e5      	ldreq	r5, [r4, #12]
 8003626:	f104 041a 	add.w	r4, r4, #26
 800362a:	bf08      	it	eq
 800362c:	1aed      	subeq	r5, r5, r3
 800362e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003632:	bf08      	it	eq
 8003634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003638:	4293      	cmp	r3, r2
 800363a:	bfc4      	itt	gt
 800363c:	1a9b      	subgt	r3, r3, r2
 800363e:	18ed      	addgt	r5, r5, r3
 8003640:	42b5      	cmp	r5, r6
 8003642:	d11a      	bne.n	800367a <_printf_common+0xd2>
 8003644:	2000      	movs	r0, #0
 8003646:	e008      	b.n	800365a <_printf_common+0xb2>
 8003648:	2301      	movs	r3, #1
 800364a:	4652      	mov	r2, sl
 800364c:	4641      	mov	r1, r8
 800364e:	4638      	mov	r0, r7
 8003650:	47c8      	blx	r9
 8003652:	3001      	adds	r0, #1
 8003654:	d103      	bne.n	800365e <_printf_common+0xb6>
 8003656:	f04f 30ff 	mov.w	r0, #4294967295
 800365a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365e:	3501      	adds	r5, #1
 8003660:	e7c1      	b.n	80035e6 <_printf_common+0x3e>
 8003662:	2030      	movs	r0, #48	@ 0x30
 8003664:	18e1      	adds	r1, r4, r3
 8003666:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003670:	4422      	add	r2, r4
 8003672:	3302      	adds	r3, #2
 8003674:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003678:	e7c2      	b.n	8003600 <_printf_common+0x58>
 800367a:	2301      	movs	r3, #1
 800367c:	4622      	mov	r2, r4
 800367e:	4641      	mov	r1, r8
 8003680:	4638      	mov	r0, r7
 8003682:	47c8      	blx	r9
 8003684:	3001      	adds	r0, #1
 8003686:	d0e6      	beq.n	8003656 <_printf_common+0xae>
 8003688:	3601      	adds	r6, #1
 800368a:	e7d9      	b.n	8003640 <_printf_common+0x98>

0800368c <_printf_i>:
 800368c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003690:	7e0f      	ldrb	r7, [r1, #24]
 8003692:	4691      	mov	r9, r2
 8003694:	2f78      	cmp	r7, #120	@ 0x78
 8003696:	4680      	mov	r8, r0
 8003698:	460c      	mov	r4, r1
 800369a:	469a      	mov	sl, r3
 800369c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800369e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036a2:	d807      	bhi.n	80036b4 <_printf_i+0x28>
 80036a4:	2f62      	cmp	r7, #98	@ 0x62
 80036a6:	d80a      	bhi.n	80036be <_printf_i+0x32>
 80036a8:	2f00      	cmp	r7, #0
 80036aa:	f000 80d1 	beq.w	8003850 <_printf_i+0x1c4>
 80036ae:	2f58      	cmp	r7, #88	@ 0x58
 80036b0:	f000 80b8 	beq.w	8003824 <_printf_i+0x198>
 80036b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036bc:	e03a      	b.n	8003734 <_printf_i+0xa8>
 80036be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036c2:	2b15      	cmp	r3, #21
 80036c4:	d8f6      	bhi.n	80036b4 <_printf_i+0x28>
 80036c6:	a101      	add	r1, pc, #4	@ (adr r1, 80036cc <_printf_i+0x40>)
 80036c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036cc:	08003725 	.word	0x08003725
 80036d0:	08003739 	.word	0x08003739
 80036d4:	080036b5 	.word	0x080036b5
 80036d8:	080036b5 	.word	0x080036b5
 80036dc:	080036b5 	.word	0x080036b5
 80036e0:	080036b5 	.word	0x080036b5
 80036e4:	08003739 	.word	0x08003739
 80036e8:	080036b5 	.word	0x080036b5
 80036ec:	080036b5 	.word	0x080036b5
 80036f0:	080036b5 	.word	0x080036b5
 80036f4:	080036b5 	.word	0x080036b5
 80036f8:	08003837 	.word	0x08003837
 80036fc:	08003763 	.word	0x08003763
 8003700:	080037f1 	.word	0x080037f1
 8003704:	080036b5 	.word	0x080036b5
 8003708:	080036b5 	.word	0x080036b5
 800370c:	08003859 	.word	0x08003859
 8003710:	080036b5 	.word	0x080036b5
 8003714:	08003763 	.word	0x08003763
 8003718:	080036b5 	.word	0x080036b5
 800371c:	080036b5 	.word	0x080036b5
 8003720:	080037f9 	.word	0x080037f9
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	1d1a      	adds	r2, r3, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6032      	str	r2, [r6, #0]
 800372c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003734:	2301      	movs	r3, #1
 8003736:	e09c      	b.n	8003872 <_printf_i+0x1e6>
 8003738:	6833      	ldr	r3, [r6, #0]
 800373a:	6820      	ldr	r0, [r4, #0]
 800373c:	1d19      	adds	r1, r3, #4
 800373e:	6031      	str	r1, [r6, #0]
 8003740:	0606      	lsls	r6, r0, #24
 8003742:	d501      	bpl.n	8003748 <_printf_i+0xbc>
 8003744:	681d      	ldr	r5, [r3, #0]
 8003746:	e003      	b.n	8003750 <_printf_i+0xc4>
 8003748:	0645      	lsls	r5, r0, #25
 800374a:	d5fb      	bpl.n	8003744 <_printf_i+0xb8>
 800374c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003750:	2d00      	cmp	r5, #0
 8003752:	da03      	bge.n	800375c <_printf_i+0xd0>
 8003754:	232d      	movs	r3, #45	@ 0x2d
 8003756:	426d      	negs	r5, r5
 8003758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800375c:	230a      	movs	r3, #10
 800375e:	4858      	ldr	r0, [pc, #352]	@ (80038c0 <_printf_i+0x234>)
 8003760:	e011      	b.n	8003786 <_printf_i+0xfa>
 8003762:	6821      	ldr	r1, [r4, #0]
 8003764:	6833      	ldr	r3, [r6, #0]
 8003766:	0608      	lsls	r0, r1, #24
 8003768:	f853 5b04 	ldr.w	r5, [r3], #4
 800376c:	d402      	bmi.n	8003774 <_printf_i+0xe8>
 800376e:	0649      	lsls	r1, r1, #25
 8003770:	bf48      	it	mi
 8003772:	b2ad      	uxthmi	r5, r5
 8003774:	2f6f      	cmp	r7, #111	@ 0x6f
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	bf14      	ite	ne
 800377a:	230a      	movne	r3, #10
 800377c:	2308      	moveq	r3, #8
 800377e:	4850      	ldr	r0, [pc, #320]	@ (80038c0 <_printf_i+0x234>)
 8003780:	2100      	movs	r1, #0
 8003782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003786:	6866      	ldr	r6, [r4, #4]
 8003788:	2e00      	cmp	r6, #0
 800378a:	60a6      	str	r6, [r4, #8]
 800378c:	db05      	blt.n	800379a <_printf_i+0x10e>
 800378e:	6821      	ldr	r1, [r4, #0]
 8003790:	432e      	orrs	r6, r5
 8003792:	f021 0104 	bic.w	r1, r1, #4
 8003796:	6021      	str	r1, [r4, #0]
 8003798:	d04b      	beq.n	8003832 <_printf_i+0x1a6>
 800379a:	4616      	mov	r6, r2
 800379c:	fbb5 f1f3 	udiv	r1, r5, r3
 80037a0:	fb03 5711 	mls	r7, r3, r1, r5
 80037a4:	5dc7      	ldrb	r7, [r0, r7]
 80037a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037aa:	462f      	mov	r7, r5
 80037ac:	42bb      	cmp	r3, r7
 80037ae:	460d      	mov	r5, r1
 80037b0:	d9f4      	bls.n	800379c <_printf_i+0x110>
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d10b      	bne.n	80037ce <_printf_i+0x142>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	07df      	lsls	r7, r3, #31
 80037ba:	d508      	bpl.n	80037ce <_printf_i+0x142>
 80037bc:	6923      	ldr	r3, [r4, #16]
 80037be:	6861      	ldr	r1, [r4, #4]
 80037c0:	4299      	cmp	r1, r3
 80037c2:	bfde      	ittt	le
 80037c4:	2330      	movle	r3, #48	@ 0x30
 80037c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037ce:	1b92      	subs	r2, r2, r6
 80037d0:	6122      	str	r2, [r4, #16]
 80037d2:	464b      	mov	r3, r9
 80037d4:	4621      	mov	r1, r4
 80037d6:	4640      	mov	r0, r8
 80037d8:	f8cd a000 	str.w	sl, [sp]
 80037dc:	aa03      	add	r2, sp, #12
 80037de:	f7ff fee3 	bl	80035a8 <_printf_common>
 80037e2:	3001      	adds	r0, #1
 80037e4:	d14a      	bne.n	800387c <_printf_i+0x1f0>
 80037e6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ea:	b004      	add	sp, #16
 80037ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	2778      	movs	r7, #120	@ 0x78
 80037fa:	4832      	ldr	r0, [pc, #200]	@ (80038c4 <_printf_i+0x238>)
 80037fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	6831      	ldr	r1, [r6, #0]
 8003804:	061f      	lsls	r7, r3, #24
 8003806:	f851 5b04 	ldr.w	r5, [r1], #4
 800380a:	d402      	bmi.n	8003812 <_printf_i+0x186>
 800380c:	065f      	lsls	r7, r3, #25
 800380e:	bf48      	it	mi
 8003810:	b2ad      	uxthmi	r5, r5
 8003812:	6031      	str	r1, [r6, #0]
 8003814:	07d9      	lsls	r1, r3, #31
 8003816:	bf44      	itt	mi
 8003818:	f043 0320 	orrmi.w	r3, r3, #32
 800381c:	6023      	strmi	r3, [r4, #0]
 800381e:	b11d      	cbz	r5, 8003828 <_printf_i+0x19c>
 8003820:	2310      	movs	r3, #16
 8003822:	e7ad      	b.n	8003780 <_printf_i+0xf4>
 8003824:	4826      	ldr	r0, [pc, #152]	@ (80038c0 <_printf_i+0x234>)
 8003826:	e7e9      	b.n	80037fc <_printf_i+0x170>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	e7f6      	b.n	8003820 <_printf_i+0x194>
 8003832:	4616      	mov	r6, r2
 8003834:	e7bd      	b.n	80037b2 <_printf_i+0x126>
 8003836:	6833      	ldr	r3, [r6, #0]
 8003838:	6825      	ldr	r5, [r4, #0]
 800383a:	1d18      	adds	r0, r3, #4
 800383c:	6961      	ldr	r1, [r4, #20]
 800383e:	6030      	str	r0, [r6, #0]
 8003840:	062e      	lsls	r6, r5, #24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	d501      	bpl.n	800384a <_printf_i+0x1be>
 8003846:	6019      	str	r1, [r3, #0]
 8003848:	e002      	b.n	8003850 <_printf_i+0x1c4>
 800384a:	0668      	lsls	r0, r5, #25
 800384c:	d5fb      	bpl.n	8003846 <_printf_i+0x1ba>
 800384e:	8019      	strh	r1, [r3, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	4616      	mov	r6, r2
 8003854:	6123      	str	r3, [r4, #16]
 8003856:	e7bc      	b.n	80037d2 <_printf_i+0x146>
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	2100      	movs	r1, #0
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	6032      	str	r2, [r6, #0]
 8003860:	681e      	ldr	r6, [r3, #0]
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f9d6 	bl	8003c16 <memchr>
 800386a:	b108      	cbz	r0, 8003870 <_printf_i+0x1e4>
 800386c:	1b80      	subs	r0, r0, r6
 800386e:	6060      	str	r0, [r4, #4]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	6123      	str	r3, [r4, #16]
 8003874:	2300      	movs	r3, #0
 8003876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800387a:	e7aa      	b.n	80037d2 <_printf_i+0x146>
 800387c:	4632      	mov	r2, r6
 800387e:	4649      	mov	r1, r9
 8003880:	4640      	mov	r0, r8
 8003882:	6923      	ldr	r3, [r4, #16]
 8003884:	47d0      	blx	sl
 8003886:	3001      	adds	r0, #1
 8003888:	d0ad      	beq.n	80037e6 <_printf_i+0x15a>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	079b      	lsls	r3, r3, #30
 800388e:	d413      	bmi.n	80038b8 <_printf_i+0x22c>
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	9b03      	ldr	r3, [sp, #12]
 8003894:	4298      	cmp	r0, r3
 8003896:	bfb8      	it	lt
 8003898:	4618      	movlt	r0, r3
 800389a:	e7a6      	b.n	80037ea <_printf_i+0x15e>
 800389c:	2301      	movs	r3, #1
 800389e:	4632      	mov	r2, r6
 80038a0:	4649      	mov	r1, r9
 80038a2:	4640      	mov	r0, r8
 80038a4:	47d0      	blx	sl
 80038a6:	3001      	adds	r0, #1
 80038a8:	d09d      	beq.n	80037e6 <_printf_i+0x15a>
 80038aa:	3501      	adds	r5, #1
 80038ac:	68e3      	ldr	r3, [r4, #12]
 80038ae:	9903      	ldr	r1, [sp, #12]
 80038b0:	1a5b      	subs	r3, r3, r1
 80038b2:	42ab      	cmp	r3, r5
 80038b4:	dcf2      	bgt.n	800389c <_printf_i+0x210>
 80038b6:	e7eb      	b.n	8003890 <_printf_i+0x204>
 80038b8:	2500      	movs	r5, #0
 80038ba:	f104 0619 	add.w	r6, r4, #25
 80038be:	e7f5      	b.n	80038ac <_printf_i+0x220>
 80038c0:	08005d48 	.word	0x08005d48
 80038c4:	08005d59 	.word	0x08005d59

080038c8 <std>:
 80038c8:	2300      	movs	r3, #0
 80038ca:	b510      	push	{r4, lr}
 80038cc:	4604      	mov	r4, r0
 80038ce:	e9c0 3300 	strd	r3, r3, [r0]
 80038d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d6:	6083      	str	r3, [r0, #8]
 80038d8:	8181      	strh	r1, [r0, #12]
 80038da:	6643      	str	r3, [r0, #100]	@ 0x64
 80038dc:	81c2      	strh	r2, [r0, #14]
 80038de:	6183      	str	r3, [r0, #24]
 80038e0:	4619      	mov	r1, r3
 80038e2:	2208      	movs	r2, #8
 80038e4:	305c      	adds	r0, #92	@ 0x5c
 80038e6:	f000 f916 	bl	8003b16 <memset>
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <std+0x58>)
 80038ec:	6224      	str	r4, [r4, #32]
 80038ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <std+0x5c>)
 80038f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003928 <std+0x60>)
 80038f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038f8:	4b0c      	ldr	r3, [pc, #48]	@ (800392c <std+0x64>)
 80038fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80038fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <std+0x68>)
 80038fe:	429c      	cmp	r4, r3
 8003900:	d006      	beq.n	8003910 <std+0x48>
 8003902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003906:	4294      	cmp	r4, r2
 8003908:	d002      	beq.n	8003910 <std+0x48>
 800390a:	33d0      	adds	r3, #208	@ 0xd0
 800390c:	429c      	cmp	r4, r3
 800390e:	d105      	bne.n	800391c <std+0x54>
 8003910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003918:	f000 b97a 	b.w	8003c10 <__retarget_lock_init_recursive>
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	08003a91 	.word	0x08003a91
 8003924:	08003ab3 	.word	0x08003ab3
 8003928:	08003aeb 	.word	0x08003aeb
 800392c:	08003b0f 	.word	0x08003b0f
 8003930:	20000270 	.word	0x20000270

08003934 <stdio_exit_handler>:
 8003934:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <stdio_exit_handler+0xc>)
 8003936:	4903      	ldr	r1, [pc, #12]	@ (8003944 <stdio_exit_handler+0x10>)
 8003938:	4803      	ldr	r0, [pc, #12]	@ (8003948 <stdio_exit_handler+0x14>)
 800393a:	f000 b869 	b.w	8003a10 <_fwalk_sglue>
 800393e:	bf00      	nop
 8003940:	2000000c 	.word	0x2000000c
 8003944:	08005591 	.word	0x08005591
 8003948:	2000001c 	.word	0x2000001c

0800394c <cleanup_stdio>:
 800394c:	6841      	ldr	r1, [r0, #4]
 800394e:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <cleanup_stdio+0x34>)
 8003950:	b510      	push	{r4, lr}
 8003952:	4299      	cmp	r1, r3
 8003954:	4604      	mov	r4, r0
 8003956:	d001      	beq.n	800395c <cleanup_stdio+0x10>
 8003958:	f001 fe1a 	bl	8005590 <_fflush_r>
 800395c:	68a1      	ldr	r1, [r4, #8]
 800395e:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <cleanup_stdio+0x38>)
 8003960:	4299      	cmp	r1, r3
 8003962:	d002      	beq.n	800396a <cleanup_stdio+0x1e>
 8003964:	4620      	mov	r0, r4
 8003966:	f001 fe13 	bl	8005590 <_fflush_r>
 800396a:	68e1      	ldr	r1, [r4, #12]
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <cleanup_stdio+0x3c>)
 800396e:	4299      	cmp	r1, r3
 8003970:	d004      	beq.n	800397c <cleanup_stdio+0x30>
 8003972:	4620      	mov	r0, r4
 8003974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003978:	f001 be0a 	b.w	8005590 <_fflush_r>
 800397c:	bd10      	pop	{r4, pc}
 800397e:	bf00      	nop
 8003980:	20000270 	.word	0x20000270
 8003984:	200002d8 	.word	0x200002d8
 8003988:	20000340 	.word	0x20000340

0800398c <global_stdio_init.part.0>:
 800398c:	b510      	push	{r4, lr}
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <global_stdio_init.part.0+0x30>)
 8003990:	4c0b      	ldr	r4, [pc, #44]	@ (80039c0 <global_stdio_init.part.0+0x34>)
 8003992:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <global_stdio_init.part.0+0x38>)
 8003994:	4620      	mov	r0, r4
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	2104      	movs	r1, #4
 800399a:	2200      	movs	r2, #0
 800399c:	f7ff ff94 	bl	80038c8 <std>
 80039a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039a4:	2201      	movs	r2, #1
 80039a6:	2109      	movs	r1, #9
 80039a8:	f7ff ff8e 	bl	80038c8 <std>
 80039ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80039b0:	2202      	movs	r2, #2
 80039b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b6:	2112      	movs	r1, #18
 80039b8:	f7ff bf86 	b.w	80038c8 <std>
 80039bc:	200003a8 	.word	0x200003a8
 80039c0:	20000270 	.word	0x20000270
 80039c4:	08003935 	.word	0x08003935

080039c8 <__sfp_lock_acquire>:
 80039c8:	4801      	ldr	r0, [pc, #4]	@ (80039d0 <__sfp_lock_acquire+0x8>)
 80039ca:	f000 b922 	b.w	8003c12 <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	200003b1 	.word	0x200003b1

080039d4 <__sfp_lock_release>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__sfp_lock_release+0x8>)
 80039d6:	f000 b91d 	b.w	8003c14 <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	200003b1 	.word	0x200003b1

080039e0 <__sinit>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f7ff fff0 	bl	80039c8 <__sfp_lock_acquire>
 80039e8:	6a23      	ldr	r3, [r4, #32]
 80039ea:	b11b      	cbz	r3, 80039f4 <__sinit+0x14>
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f7ff bff0 	b.w	80039d4 <__sfp_lock_release>
 80039f4:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <__sinit+0x28>)
 80039f6:	6223      	str	r3, [r4, #32]
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__sinit+0x2c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f5      	bne.n	80039ec <__sinit+0xc>
 8003a00:	f7ff ffc4 	bl	800398c <global_stdio_init.part.0>
 8003a04:	e7f2      	b.n	80039ec <__sinit+0xc>
 8003a06:	bf00      	nop
 8003a08:	0800394d 	.word	0x0800394d
 8003a0c:	200003a8 	.word	0x200003a8

08003a10 <_fwalk_sglue>:
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4607      	mov	r7, r0
 8003a16:	4688      	mov	r8, r1
 8003a18:	4614      	mov	r4, r2
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a20:	f1b9 0901 	subs.w	r9, r9, #1
 8003a24:	d505      	bpl.n	8003a32 <_fwalk_sglue+0x22>
 8003a26:	6824      	ldr	r4, [r4, #0]
 8003a28:	2c00      	cmp	r4, #0
 8003a2a:	d1f7      	bne.n	8003a1c <_fwalk_sglue+0xc>
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a32:	89ab      	ldrh	r3, [r5, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d907      	bls.n	8003a48 <_fwalk_sglue+0x38>
 8003a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	d003      	beq.n	8003a48 <_fwalk_sglue+0x38>
 8003a40:	4629      	mov	r1, r5
 8003a42:	4638      	mov	r0, r7
 8003a44:	47c0      	blx	r8
 8003a46:	4306      	orrs	r6, r0
 8003a48:	3568      	adds	r5, #104	@ 0x68
 8003a4a:	e7e9      	b.n	8003a20 <_fwalk_sglue+0x10>

08003a4c <siprintf>:
 8003a4c:	b40e      	push	{r1, r2, r3}
 8003a4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a52:	b510      	push	{r4, lr}
 8003a54:	2400      	movs	r4, #0
 8003a56:	b09d      	sub	sp, #116	@ 0x74
 8003a58:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003a5a:	9002      	str	r0, [sp, #8]
 8003a5c:	9006      	str	r0, [sp, #24]
 8003a5e:	9107      	str	r1, [sp, #28]
 8003a60:	9104      	str	r1, [sp, #16]
 8003a62:	4809      	ldr	r0, [pc, #36]	@ (8003a88 <siprintf+0x3c>)
 8003a64:	4909      	ldr	r1, [pc, #36]	@ (8003a8c <siprintf+0x40>)
 8003a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a6a:	9105      	str	r1, [sp, #20]
 8003a6c:	6800      	ldr	r0, [r0, #0]
 8003a6e:	a902      	add	r1, sp, #8
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003a74:	f001 fc10 	bl	8005298 <_svfiprintf_r>
 8003a78:	9b02      	ldr	r3, [sp, #8]
 8003a7a:	701c      	strb	r4, [r3, #0]
 8003a7c:	b01d      	add	sp, #116	@ 0x74
 8003a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a82:	b003      	add	sp, #12
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000018 	.word	0x20000018
 8003a8c:	ffff0208 	.word	0xffff0208

08003a90 <__sread>:
 8003a90:	b510      	push	{r4, lr}
 8003a92:	460c      	mov	r4, r1
 8003a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a98:	f000 f86c 	bl	8003b74 <_read_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	bfab      	itete	ge
 8003aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa4:	181b      	addge	r3, r3, r0
 8003aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003aaa:	bfac      	ite	ge
 8003aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003aae:	81a3      	strhlt	r3, [r4, #12]
 8003ab0:	bd10      	pop	{r4, pc}

08003ab2 <__swrite>:
 8003ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	898b      	ldrh	r3, [r1, #12]
 8003aba:	4605      	mov	r5, r0
 8003abc:	05db      	lsls	r3, r3, #23
 8003abe:	460c      	mov	r4, r1
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	d505      	bpl.n	8003ad0 <__swrite+0x1e>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	f000 f840 	bl	8003b50 <_lseek_r>
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	4628      	mov	r0, r5
 8003adc:	463b      	mov	r3, r7
 8003ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae6:	f000 b857 	b.w	8003b98 <_write_r>

08003aea <__sseek>:
 8003aea:	b510      	push	{r4, lr}
 8003aec:	460c      	mov	r4, r1
 8003aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af2:	f000 f82d 	bl	8003b50 <_lseek_r>
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	bf15      	itete	ne
 8003afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b06:	81a3      	strheq	r3, [r4, #12]
 8003b08:	bf18      	it	ne
 8003b0a:	81a3      	strhne	r3, [r4, #12]
 8003b0c:	bd10      	pop	{r4, pc}

08003b0e <__sclose>:
 8003b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b12:	f000 b80d 	b.w	8003b30 <_close_r>

08003b16 <memset>:
 8003b16:	4603      	mov	r3, r0
 8003b18:	4402      	add	r2, r0
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d100      	bne.n	8003b20 <memset+0xa>
 8003b1e:	4770      	bx	lr
 8003b20:	f803 1b01 	strb.w	r1, [r3], #1
 8003b24:	e7f9      	b.n	8003b1a <memset+0x4>
	...

08003b28 <_localeconv_r>:
 8003b28:	4800      	ldr	r0, [pc, #0]	@ (8003b2c <_localeconv_r+0x4>)
 8003b2a:	4770      	bx	lr
 8003b2c:	20000158 	.word	0x20000158

08003b30 <_close_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2300      	movs	r3, #0
 8003b34:	4d05      	ldr	r5, [pc, #20]	@ (8003b4c <_close_r+0x1c>)
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	f7fd faa7 	bl	800108e <_close>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_close_r+0x1a>
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_close_r+0x1a>
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	200003ac 	.word	0x200003ac

08003b50 <_lseek_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4d05      	ldr	r5, [pc, #20]	@ (8003b70 <_lseek_r+0x20>)
 8003b5c:	602a      	str	r2, [r5, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f7fd fab9 	bl	80010d6 <_lseek>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	d102      	bne.n	8003b6e <_lseek_r+0x1e>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	b103      	cbz	r3, 8003b6e <_lseek_r+0x1e>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}
 8003b70:	200003ac 	.word	0x200003ac

08003b74 <_read_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4d05      	ldr	r5, [pc, #20]	@ (8003b94 <_read_r+0x20>)
 8003b80:	602a      	str	r2, [r5, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f7fd fa4a 	bl	800101c <_read>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_read_r+0x1e>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_read_r+0x1e>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	200003ac 	.word	0x200003ac

08003b98 <_write_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4d05      	ldr	r5, [pc, #20]	@ (8003bb8 <_write_r+0x20>)
 8003ba4:	602a      	str	r2, [r5, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7fd fa55 	bl	8001056 <_write>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_write_r+0x1e>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_write_r+0x1e>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	200003ac 	.word	0x200003ac

08003bbc <__errno>:
 8003bbc:	4b01      	ldr	r3, [pc, #4]	@ (8003bc4 <__errno+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000018 	.word	0x20000018

08003bc8 <__libc_init_array>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	2600      	movs	r6, #0
 8003bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8003c00 <__libc_init_array+0x38>)
 8003bce:	4c0d      	ldr	r4, [pc, #52]	@ (8003c04 <__libc_init_array+0x3c>)
 8003bd0:	1b64      	subs	r4, r4, r5
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	42a6      	cmp	r6, r4
 8003bd6:	d109      	bne.n	8003bec <__libc_init_array+0x24>
 8003bd8:	f002 f876 	bl	8005cc8 <_init>
 8003bdc:	2600      	movs	r6, #0
 8003bde:	4d0a      	ldr	r5, [pc, #40]	@ (8003c08 <__libc_init_array+0x40>)
 8003be0:	4c0a      	ldr	r4, [pc, #40]	@ (8003c0c <__libc_init_array+0x44>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	42a6      	cmp	r6, r4
 8003be8:	d105      	bne.n	8003bf6 <__libc_init_array+0x2e>
 8003bea:	bd70      	pop	{r4, r5, r6, pc}
 8003bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf0:	4798      	blx	r3
 8003bf2:	3601      	adds	r6, #1
 8003bf4:	e7ee      	b.n	8003bd4 <__libc_init_array+0xc>
 8003bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfa:	4798      	blx	r3
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	e7f2      	b.n	8003be6 <__libc_init_array+0x1e>
 8003c00:	080060b4 	.word	0x080060b4
 8003c04:	080060b4 	.word	0x080060b4
 8003c08:	080060b4 	.word	0x080060b4
 8003c0c:	080060b8 	.word	0x080060b8

08003c10 <__retarget_lock_init_recursive>:
 8003c10:	4770      	bx	lr

08003c12 <__retarget_lock_acquire_recursive>:
 8003c12:	4770      	bx	lr

08003c14 <__retarget_lock_release_recursive>:
 8003c14:	4770      	bx	lr

08003c16 <memchr>:
 8003c16:	4603      	mov	r3, r0
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	b2c9      	uxtb	r1, r1
 8003c1c:	4402      	add	r2, r0
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	d101      	bne.n	8003c28 <memchr+0x12>
 8003c24:	2000      	movs	r0, #0
 8003c26:	e003      	b.n	8003c30 <memchr+0x1a>
 8003c28:	7804      	ldrb	r4, [r0, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	428c      	cmp	r4, r1
 8003c2e:	d1f6      	bne.n	8003c1e <memchr+0x8>
 8003c30:	bd10      	pop	{r4, pc}

08003c32 <quorem>:
 8003c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c36:	6903      	ldr	r3, [r0, #16]
 8003c38:	690c      	ldr	r4, [r1, #16]
 8003c3a:	4607      	mov	r7, r0
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	db7e      	blt.n	8003d3e <quorem+0x10c>
 8003c40:	3c01      	subs	r4, #1
 8003c42:	00a3      	lsls	r3, r4, #2
 8003c44:	f100 0514 	add.w	r5, r0, #20
 8003c48:	f101 0814 	add.w	r8, r1, #20
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c68:	d32e      	bcc.n	8003cc8 <quorem+0x96>
 8003c6a:	f04f 0a00 	mov.w	sl, #0
 8003c6e:	46c4      	mov	ip, r8
 8003c70:	46ae      	mov	lr, r5
 8003c72:	46d3      	mov	fp, sl
 8003c74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c78:	b298      	uxth	r0, r3
 8003c7a:	fb06 a000 	mla	r0, r6, r0, sl
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	0c02      	lsrs	r2, r0, #16
 8003c82:	fb06 2303 	mla	r3, r6, r3, r2
 8003c86:	f8de 2000 	ldr.w	r2, [lr]
 8003c8a:	b280      	uxth	r0, r0
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	1a12      	subs	r2, r2, r0
 8003c90:	445a      	add	r2, fp
 8003c92:	f8de 0000 	ldr.w	r0, [lr]
 8003c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003ca0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003caa:	45e1      	cmp	r9, ip
 8003cac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003cb0:	f84e 2b04 	str.w	r2, [lr], #4
 8003cb4:	d2de      	bcs.n	8003c74 <quorem+0x42>
 8003cb6:	9b00      	ldr	r3, [sp, #0]
 8003cb8:	58eb      	ldr	r3, [r5, r3]
 8003cba:	b92b      	cbnz	r3, 8003cc8 <quorem+0x96>
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	429d      	cmp	r5, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	d32f      	bcc.n	8003d26 <quorem+0xf4>
 8003cc6:	613c      	str	r4, [r7, #16]
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f001 f981 	bl	8004fd0 <__mcmp>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	db25      	blt.n	8003d1e <quorem+0xec>
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cda:	f8d1 c000 	ldr.w	ip, [r1]
 8003cde:	fa1f fe82 	uxth.w	lr, r2
 8003ce2:	fa1f f38c 	uxth.w	r3, ip
 8003ce6:	eba3 030e 	sub.w	r3, r3, lr
 8003cea:	4403      	add	r3, r0
 8003cec:	0c12      	lsrs	r2, r2, #16
 8003cee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cf2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003cfc:	45c1      	cmp	r9, r8
 8003cfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d02:	f841 3b04 	str.w	r3, [r1], #4
 8003d06:	d2e6      	bcs.n	8003cd6 <quorem+0xa4>
 8003d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d10:	b922      	cbnz	r2, 8003d1c <quorem+0xea>
 8003d12:	3b04      	subs	r3, #4
 8003d14:	429d      	cmp	r5, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	d30b      	bcc.n	8003d32 <quorem+0x100>
 8003d1a:	613c      	str	r4, [r7, #16]
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	4630      	mov	r0, r6
 8003d20:	b003      	add	sp, #12
 8003d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	3b04      	subs	r3, #4
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	d1cb      	bne.n	8003cc6 <quorem+0x94>
 8003d2e:	3c01      	subs	r4, #1
 8003d30:	e7c6      	b.n	8003cc0 <quorem+0x8e>
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	3b04      	subs	r3, #4
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	d1ef      	bne.n	8003d1a <quorem+0xe8>
 8003d3a:	3c01      	subs	r4, #1
 8003d3c:	e7ea      	b.n	8003d14 <quorem+0xe2>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e7ee      	b.n	8003d20 <quorem+0xee>
 8003d42:	0000      	movs	r0, r0
 8003d44:	0000      	movs	r0, r0
	...

08003d48 <_dtoa_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	69c7      	ldr	r7, [r0, #28]
 8003d52:	b097      	sub	sp, #92	@ 0x5c
 8003d54:	4681      	mov	r9, r0
 8003d56:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003d5c:	b97f      	cbnz	r7, 8003d7e <_dtoa_r+0x36>
 8003d5e:	2010      	movs	r0, #16
 8003d60:	f000 fe0e 	bl	8004980 <malloc>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f8c9 001c 	str.w	r0, [r9, #28]
 8003d6a:	b920      	cbnz	r0, 8003d76 <_dtoa_r+0x2e>
 8003d6c:	21ef      	movs	r1, #239	@ 0xef
 8003d6e:	4bac      	ldr	r3, [pc, #688]	@ (8004020 <_dtoa_r+0x2d8>)
 8003d70:	48ac      	ldr	r0, [pc, #688]	@ (8004024 <_dtoa_r+0x2dc>)
 8003d72:	f001 fc6d 	bl	8005650 <__assert_func>
 8003d76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d7a:	6007      	str	r7, [r0, #0]
 8003d7c:	60c7      	str	r7, [r0, #12]
 8003d7e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	b159      	cbz	r1, 8003d9e <_dtoa_r+0x56>
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	4093      	lsls	r3, r2
 8003d8c:	604a      	str	r2, [r1, #4]
 8003d8e:	608b      	str	r3, [r1, #8]
 8003d90:	4648      	mov	r0, r9
 8003d92:	f000 feeb 	bl	8004b6c <_Bfree>
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	1e2b      	subs	r3, r5, #0
 8003da0:	bfaf      	iteee	ge
 8003da2:	2300      	movge	r3, #0
 8003da4:	2201      	movlt	r2, #1
 8003da6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003daa:	9307      	strlt	r3, [sp, #28]
 8003dac:	bfa8      	it	ge
 8003dae:	6033      	strge	r3, [r6, #0]
 8003db0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003db4:	4b9c      	ldr	r3, [pc, #624]	@ (8004028 <_dtoa_r+0x2e0>)
 8003db6:	bfb8      	it	lt
 8003db8:	6032      	strlt	r2, [r6, #0]
 8003dba:	ea33 0308 	bics.w	r3, r3, r8
 8003dbe:	d112      	bne.n	8003de6 <_dtoa_r+0x9e>
 8003dc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003dc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003dcc:	4323      	orrs	r3, r4
 8003dce:	f000 855e 	beq.w	800488e <_dtoa_r+0xb46>
 8003dd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003dd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800402c <_dtoa_r+0x2e4>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8560 	beq.w	800489e <_dtoa_r+0xb56>
 8003dde:	f10a 0303 	add.w	r3, sl, #3
 8003de2:	f000 bd5a 	b.w	800489a <_dtoa_r+0xb52>
 8003de6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	2300      	movs	r3, #0
 8003df6:	f7fc fe43 	bl	8000a80 <__aeabi_dcmpeq>
 8003dfa:	4607      	mov	r7, r0
 8003dfc:	b158      	cbz	r0, 8003e16 <_dtoa_r+0xce>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e06:	b113      	cbz	r3, 8003e0e <_dtoa_r+0xc6>
 8003e08:	4b89      	ldr	r3, [pc, #548]	@ (8004030 <_dtoa_r+0x2e8>)
 8003e0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004034 <_dtoa_r+0x2ec>
 8003e12:	f000 bd44 	b.w	800489e <_dtoa_r+0xb56>
 8003e16:	ab14      	add	r3, sp, #80	@ 0x50
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	ab15      	add	r3, sp, #84	@ 0x54
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	4648      	mov	r0, r9
 8003e20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e24:	f001 f984 	bl	8005130 <__d2b>
 8003e28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003e2c:	9003      	str	r0, [sp, #12]
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d078      	beq.n	8003f24 <_dtoa_r+0x1dc>
 8003e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e48:	9712      	str	r7, [sp, #72]	@ 0x48
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004038 <_dtoa_r+0x2f0>)
 8003e50:	f7fc f9f6 	bl	8000240 <__aeabi_dsub>
 8003e54:	a36c      	add	r3, pc, #432	@ (adr r3, 8004008 <_dtoa_r+0x2c0>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f7fc fba9 	bl	80005b0 <__aeabi_dmul>
 8003e5e:	a36c      	add	r3, pc, #432	@ (adr r3, 8004010 <_dtoa_r+0x2c8>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc f9ee 	bl	8000244 <__adddf3>
 8003e68:	4604      	mov	r4, r0
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	460d      	mov	r5, r1
 8003e6e:	f7fc fb35 	bl	80004dc <__aeabi_i2d>
 8003e72:	a369      	add	r3, pc, #420	@ (adr r3, 8004018 <_dtoa_r+0x2d0>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc fb9a 	bl	80005b0 <__aeabi_dmul>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4620      	mov	r0, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	f7fc f9de 	bl	8000244 <__adddf3>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	f7fc fe40 	bl	8000b10 <__aeabi_d2iz>
 8003e90:	2200      	movs	r2, #0
 8003e92:	4607      	mov	r7, r0
 8003e94:	2300      	movs	r3, #0
 8003e96:	4620      	mov	r0, r4
 8003e98:	4629      	mov	r1, r5
 8003e9a:	f7fc fdfb 	bl	8000a94 <__aeabi_dcmplt>
 8003e9e:	b140      	cbz	r0, 8003eb2 <_dtoa_r+0x16a>
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7fc fb1b 	bl	80004dc <__aeabi_i2d>
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	462b      	mov	r3, r5
 8003eaa:	f7fc fde9 	bl	8000a80 <__aeabi_dcmpeq>
 8003eae:	b900      	cbnz	r0, 8003eb2 <_dtoa_r+0x16a>
 8003eb0:	3f01      	subs	r7, #1
 8003eb2:	2f16      	cmp	r7, #22
 8003eb4:	d854      	bhi.n	8003f60 <_dtoa_r+0x218>
 8003eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eba:	4b60      	ldr	r3, [pc, #384]	@ (800403c <_dtoa_r+0x2f4>)
 8003ebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc fde6 	bl	8000a94 <__aeabi_dcmplt>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d04b      	beq.n	8003f64 <_dtoa_r+0x21c>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	3f01      	subs	r7, #1
 8003ed0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ed2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ed4:	1b9b      	subs	r3, r3, r6
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	bf49      	itett	mi
 8003eda:	f1c3 0301 	rsbmi	r3, r3, #1
 8003ede:	2300      	movpl	r3, #0
 8003ee0:	9304      	strmi	r3, [sp, #16]
 8003ee2:	2300      	movmi	r3, #0
 8003ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ee6:	bf54      	ite	pl
 8003ee8:	9304      	strpl	r3, [sp, #16]
 8003eea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003eec:	2f00      	cmp	r7, #0
 8003eee:	db3b      	blt.n	8003f68 <_dtoa_r+0x220>
 8003ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef2:	970e      	str	r7, [sp, #56]	@ 0x38
 8003ef4:	443b      	add	r3, r7
 8003ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef8:	2300      	movs	r3, #0
 8003efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8003efc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003efe:	2b09      	cmp	r3, #9
 8003f00:	d865      	bhi.n	8003fce <_dtoa_r+0x286>
 8003f02:	2b05      	cmp	r3, #5
 8003f04:	bfc4      	itt	gt
 8003f06:	3b04      	subgt	r3, #4
 8003f08:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003f0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f0c:	bfc8      	it	gt
 8003f0e:	2400      	movgt	r4, #0
 8003f10:	f1a3 0302 	sub.w	r3, r3, #2
 8003f14:	bfd8      	it	le
 8003f16:	2401      	movle	r4, #1
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d864      	bhi.n	8003fe6 <_dtoa_r+0x29e>
 8003f1c:	e8df f003 	tbb	[pc, r3]
 8003f20:	2c385553 	.word	0x2c385553
 8003f24:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f28:	441e      	add	r6, r3
 8003f2a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	bfc1      	itttt	gt
 8003f32:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f36:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f42:	bfd6      	itet	le
 8003f44:	f1c3 0320 	rsble	r3, r3, #32
 8003f48:	ea48 0003 	orrgt.w	r0, r8, r3
 8003f4c:	fa04 f003 	lslle.w	r0, r4, r3
 8003f50:	f7fc fab4 	bl	80004bc <__aeabi_ui2d>
 8003f54:	2201      	movs	r2, #1
 8003f56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f5a:	3e01      	subs	r6, #1
 8003f5c:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f5e:	e774      	b.n	8003e4a <_dtoa_r+0x102>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e7b5      	b.n	8003ed0 <_dtoa_r+0x188>
 8003f64:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f66:	e7b4      	b.n	8003ed2 <_dtoa_r+0x18a>
 8003f68:	9b04      	ldr	r3, [sp, #16]
 8003f6a:	1bdb      	subs	r3, r3, r7
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	427b      	negs	r3, r7
 8003f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f72:	2300      	movs	r3, #0
 8003f74:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f76:	e7c1      	b.n	8003efc <_dtoa_r+0x1b4>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f7e:	eb07 0b03 	add.w	fp, r7, r3
 8003f82:	f10b 0301 	add.w	r3, fp, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	9308      	str	r3, [sp, #32]
 8003f8a:	bfb8      	it	lt
 8003f8c:	2301      	movlt	r3, #1
 8003f8e:	e006      	b.n	8003f9e <_dtoa_r+0x256>
 8003f90:	2301      	movs	r3, #1
 8003f92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dd28      	ble.n	8003fec <_dtoa_r+0x2a4>
 8003f9a:	469b      	mov	fp, r3
 8003f9c:	9308      	str	r3, [sp, #32]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003fa6:	f102 0514 	add.w	r5, r2, #20
 8003faa:	429d      	cmp	r5, r3
 8003fac:	d926      	bls.n	8003ffc <_dtoa_r+0x2b4>
 8003fae:	6041      	str	r1, [r0, #4]
 8003fb0:	4648      	mov	r0, r9
 8003fb2:	f000 fd9b 	bl	8004aec <_Balloc>
 8003fb6:	4682      	mov	sl, r0
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d143      	bne.n	8004044 <_dtoa_r+0x2fc>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004040 <_dtoa_r+0x2f8>)
 8003fc4:	e6d4      	b.n	8003d70 <_dtoa_r+0x28>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e7e3      	b.n	8003f92 <_dtoa_r+0x24a>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e7d5      	b.n	8003f7a <_dtoa_r+0x232>
 8003fce:	2401      	movs	r4, #1
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003fd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8003fd6:	f04f 3bff 	mov.w	fp, #4294967295
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2312      	movs	r3, #18
 8003fde:	f8cd b020 	str.w	fp, [sp, #32]
 8003fe2:	9221      	str	r2, [sp, #132]	@ 0x84
 8003fe4:	e7db      	b.n	8003f9e <_dtoa_r+0x256>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fea:	e7f4      	b.n	8003fd6 <_dtoa_r+0x28e>
 8003fec:	f04f 0b01 	mov.w	fp, #1
 8003ff0:	465b      	mov	r3, fp
 8003ff2:	f8cd b020 	str.w	fp, [sp, #32]
 8003ff6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003ffa:	e7d0      	b.n	8003f9e <_dtoa_r+0x256>
 8003ffc:	3101      	adds	r1, #1
 8003ffe:	0052      	lsls	r2, r2, #1
 8004000:	e7d1      	b.n	8003fa6 <_dtoa_r+0x25e>
 8004002:	bf00      	nop
 8004004:	f3af 8000 	nop.w
 8004008:	636f4361 	.word	0x636f4361
 800400c:	3fd287a7 	.word	0x3fd287a7
 8004010:	8b60c8b3 	.word	0x8b60c8b3
 8004014:	3fc68a28 	.word	0x3fc68a28
 8004018:	509f79fb 	.word	0x509f79fb
 800401c:	3fd34413 	.word	0x3fd34413
 8004020:	08005d77 	.word	0x08005d77
 8004024:	08005d8e 	.word	0x08005d8e
 8004028:	7ff00000 	.word	0x7ff00000
 800402c:	08005d73 	.word	0x08005d73
 8004030:	08005d47 	.word	0x08005d47
 8004034:	08005d46 	.word	0x08005d46
 8004038:	3ff80000 	.word	0x3ff80000
 800403c:	08005ee0 	.word	0x08005ee0
 8004040:	08005de6 	.word	0x08005de6
 8004044:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004048:	6018      	str	r0, [r3, #0]
 800404a:	9b08      	ldr	r3, [sp, #32]
 800404c:	2b0e      	cmp	r3, #14
 800404e:	f200 80a1 	bhi.w	8004194 <_dtoa_r+0x44c>
 8004052:	2c00      	cmp	r4, #0
 8004054:	f000 809e 	beq.w	8004194 <_dtoa_r+0x44c>
 8004058:	2f00      	cmp	r7, #0
 800405a:	dd33      	ble.n	80040c4 <_dtoa_r+0x37c>
 800405c:	4b9c      	ldr	r3, [pc, #624]	@ (80042d0 <_dtoa_r+0x588>)
 800405e:	f007 020f 	and.w	r2, r7, #15
 8004062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004066:	05f8      	lsls	r0, r7, #23
 8004068:	e9d3 3400 	ldrd	r3, r4, [r3]
 800406c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004070:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004074:	d516      	bpl.n	80040a4 <_dtoa_r+0x35c>
 8004076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800407a:	4b96      	ldr	r3, [pc, #600]	@ (80042d4 <_dtoa_r+0x58c>)
 800407c:	2603      	movs	r6, #3
 800407e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004082:	f7fc fbbf 	bl	8000804 <__aeabi_ddiv>
 8004086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800408a:	f004 040f 	and.w	r4, r4, #15
 800408e:	4d91      	ldr	r5, [pc, #580]	@ (80042d4 <_dtoa_r+0x58c>)
 8004090:	b954      	cbnz	r4, 80040a8 <_dtoa_r+0x360>
 8004092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800409a:	f7fc fbb3 	bl	8000804 <__aeabi_ddiv>
 800409e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040a2:	e028      	b.n	80040f6 <_dtoa_r+0x3ae>
 80040a4:	2602      	movs	r6, #2
 80040a6:	e7f2      	b.n	800408e <_dtoa_r+0x346>
 80040a8:	07e1      	lsls	r1, r4, #31
 80040aa:	d508      	bpl.n	80040be <_dtoa_r+0x376>
 80040ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80040b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040b4:	f7fc fa7c 	bl	80005b0 <__aeabi_dmul>
 80040b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040bc:	3601      	adds	r6, #1
 80040be:	1064      	asrs	r4, r4, #1
 80040c0:	3508      	adds	r5, #8
 80040c2:	e7e5      	b.n	8004090 <_dtoa_r+0x348>
 80040c4:	f000 80af 	beq.w	8004226 <_dtoa_r+0x4de>
 80040c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040cc:	427c      	negs	r4, r7
 80040ce:	4b80      	ldr	r3, [pc, #512]	@ (80042d0 <_dtoa_r+0x588>)
 80040d0:	f004 020f 	and.w	r2, r4, #15
 80040d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f7fc fa68 	bl	80005b0 <__aeabi_dmul>
 80040e0:	2602      	movs	r6, #2
 80040e2:	2300      	movs	r3, #0
 80040e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040e8:	4d7a      	ldr	r5, [pc, #488]	@ (80042d4 <_dtoa_r+0x58c>)
 80040ea:	1124      	asrs	r4, r4, #4
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	f040 808f 	bne.w	8004210 <_dtoa_r+0x4c8>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1d3      	bne.n	800409e <_dtoa_r+0x356>
 80040f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80040fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8094 	beq.w	800422a <_dtoa_r+0x4e2>
 8004102:	2200      	movs	r2, #0
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	4b73      	ldr	r3, [pc, #460]	@ (80042d8 <_dtoa_r+0x590>)
 800410a:	f7fc fcc3 	bl	8000a94 <__aeabi_dcmplt>
 800410e:	2800      	cmp	r0, #0
 8004110:	f000 808b 	beq.w	800422a <_dtoa_r+0x4e2>
 8004114:	9b08      	ldr	r3, [sp, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8087 	beq.w	800422a <_dtoa_r+0x4e2>
 800411c:	f1bb 0f00 	cmp.w	fp, #0
 8004120:	dd34      	ble.n	800418c <_dtoa_r+0x444>
 8004122:	4620      	mov	r0, r4
 8004124:	2200      	movs	r2, #0
 8004126:	4629      	mov	r1, r5
 8004128:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <_dtoa_r+0x594>)
 800412a:	f7fc fa41 	bl	80005b0 <__aeabi_dmul>
 800412e:	465c      	mov	r4, fp
 8004130:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004134:	f107 38ff 	add.w	r8, r7, #4294967295
 8004138:	3601      	adds	r6, #1
 800413a:	4630      	mov	r0, r6
 800413c:	f7fc f9ce 	bl	80004dc <__aeabi_i2d>
 8004140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004144:	f7fc fa34 	bl	80005b0 <__aeabi_dmul>
 8004148:	2200      	movs	r2, #0
 800414a:	4b65      	ldr	r3, [pc, #404]	@ (80042e0 <_dtoa_r+0x598>)
 800414c:	f7fc f87a 	bl	8000244 <__adddf3>
 8004150:	4605      	mov	r5, r0
 8004152:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004156:	2c00      	cmp	r4, #0
 8004158:	d16a      	bne.n	8004230 <_dtoa_r+0x4e8>
 800415a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800415e:	2200      	movs	r2, #0
 8004160:	4b60      	ldr	r3, [pc, #384]	@ (80042e4 <_dtoa_r+0x59c>)
 8004162:	f7fc f86d 	bl	8000240 <__aeabi_dsub>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800416e:	462a      	mov	r2, r5
 8004170:	4633      	mov	r3, r6
 8004172:	f7fc fcad 	bl	8000ad0 <__aeabi_dcmpgt>
 8004176:	2800      	cmp	r0, #0
 8004178:	f040 8298 	bne.w	80046ac <_dtoa_r+0x964>
 800417c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004180:	462a      	mov	r2, r5
 8004182:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004186:	f7fc fc85 	bl	8000a94 <__aeabi_dcmplt>
 800418a:	bb38      	cbnz	r0, 80041dc <_dtoa_r+0x494>
 800418c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004190:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004194:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004196:	2b00      	cmp	r3, #0
 8004198:	f2c0 8157 	blt.w	800444a <_dtoa_r+0x702>
 800419c:	2f0e      	cmp	r7, #14
 800419e:	f300 8154 	bgt.w	800444a <_dtoa_r+0x702>
 80041a2:	4b4b      	ldr	r3, [pc, #300]	@ (80042d0 <_dtoa_r+0x588>)
 80041a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f280 80e5 	bge.w	8004382 <_dtoa_r+0x63a>
 80041b8:	9b08      	ldr	r3, [sp, #32]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f300 80e1 	bgt.w	8004382 <_dtoa_r+0x63a>
 80041c0:	d10c      	bne.n	80041dc <_dtoa_r+0x494>
 80041c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041c6:	2200      	movs	r2, #0
 80041c8:	4b46      	ldr	r3, [pc, #280]	@ (80042e4 <_dtoa_r+0x59c>)
 80041ca:	f7fc f9f1 	bl	80005b0 <__aeabi_dmul>
 80041ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041d2:	f7fc fc73 	bl	8000abc <__aeabi_dcmpge>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	f000 8266 	beq.w	80046a8 <_dtoa_r+0x960>
 80041dc:	2400      	movs	r4, #0
 80041de:	4625      	mov	r5, r4
 80041e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041e2:	4656      	mov	r6, sl
 80041e4:	ea6f 0803 	mvn.w	r8, r3
 80041e8:	2700      	movs	r7, #0
 80041ea:	4621      	mov	r1, r4
 80041ec:	4648      	mov	r0, r9
 80041ee:	f000 fcbd 	bl	8004b6c <_Bfree>
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	f000 80bd 	beq.w	8004372 <_dtoa_r+0x62a>
 80041f8:	b12f      	cbz	r7, 8004206 <_dtoa_r+0x4be>
 80041fa:	42af      	cmp	r7, r5
 80041fc:	d003      	beq.n	8004206 <_dtoa_r+0x4be>
 80041fe:	4639      	mov	r1, r7
 8004200:	4648      	mov	r0, r9
 8004202:	f000 fcb3 	bl	8004b6c <_Bfree>
 8004206:	4629      	mov	r1, r5
 8004208:	4648      	mov	r0, r9
 800420a:	f000 fcaf 	bl	8004b6c <_Bfree>
 800420e:	e0b0      	b.n	8004372 <_dtoa_r+0x62a>
 8004210:	07e2      	lsls	r2, r4, #31
 8004212:	d505      	bpl.n	8004220 <_dtoa_r+0x4d8>
 8004214:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004218:	f7fc f9ca 	bl	80005b0 <__aeabi_dmul>
 800421c:	2301      	movs	r3, #1
 800421e:	3601      	adds	r6, #1
 8004220:	1064      	asrs	r4, r4, #1
 8004222:	3508      	adds	r5, #8
 8004224:	e762      	b.n	80040ec <_dtoa_r+0x3a4>
 8004226:	2602      	movs	r6, #2
 8004228:	e765      	b.n	80040f6 <_dtoa_r+0x3ae>
 800422a:	46b8      	mov	r8, r7
 800422c:	9c08      	ldr	r4, [sp, #32]
 800422e:	e784      	b.n	800413a <_dtoa_r+0x3f2>
 8004230:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <_dtoa_r+0x588>)
 8004232:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004234:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004238:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800423c:	4454      	add	r4, sl
 800423e:	2900      	cmp	r1, #0
 8004240:	d054      	beq.n	80042ec <_dtoa_r+0x5a4>
 8004242:	2000      	movs	r0, #0
 8004244:	4928      	ldr	r1, [pc, #160]	@ (80042e8 <_dtoa_r+0x5a0>)
 8004246:	f7fc fadd 	bl	8000804 <__aeabi_ddiv>
 800424a:	4633      	mov	r3, r6
 800424c:	462a      	mov	r2, r5
 800424e:	f7fb fff7 	bl	8000240 <__aeabi_dsub>
 8004252:	4656      	mov	r6, sl
 8004254:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800425c:	f7fc fc58 	bl	8000b10 <__aeabi_d2iz>
 8004260:	4605      	mov	r5, r0
 8004262:	f7fc f93b 	bl	80004dc <__aeabi_i2d>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800426e:	f7fb ffe7 	bl	8000240 <__aeabi_dsub>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	3530      	adds	r5, #48	@ 0x30
 8004278:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800427c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004280:	f806 5b01 	strb.w	r5, [r6], #1
 8004284:	f7fc fc06 	bl	8000a94 <__aeabi_dcmplt>
 8004288:	2800      	cmp	r0, #0
 800428a:	d172      	bne.n	8004372 <_dtoa_r+0x62a>
 800428c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004290:	2000      	movs	r0, #0
 8004292:	4911      	ldr	r1, [pc, #68]	@ (80042d8 <_dtoa_r+0x590>)
 8004294:	f7fb ffd4 	bl	8000240 <__aeabi_dsub>
 8004298:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800429c:	f7fc fbfa 	bl	8000a94 <__aeabi_dcmplt>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	f040 80b4 	bne.w	800440e <_dtoa_r+0x6c6>
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	f43f af70 	beq.w	800418c <_dtoa_r+0x444>
 80042ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80042b0:	2200      	movs	r2, #0
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <_dtoa_r+0x594>)
 80042b4:	f7fc f97c 	bl	80005b0 <__aeabi_dmul>
 80042b8:	2200      	movs	r2, #0
 80042ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <_dtoa_r+0x594>)
 80042c4:	f7fc f974 	bl	80005b0 <__aeabi_dmul>
 80042c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042cc:	e7c4      	b.n	8004258 <_dtoa_r+0x510>
 80042ce:	bf00      	nop
 80042d0:	08005ee0 	.word	0x08005ee0
 80042d4:	08005eb8 	.word	0x08005eb8
 80042d8:	3ff00000 	.word	0x3ff00000
 80042dc:	40240000 	.word	0x40240000
 80042e0:	401c0000 	.word	0x401c0000
 80042e4:	40140000 	.word	0x40140000
 80042e8:	3fe00000 	.word	0x3fe00000
 80042ec:	4631      	mov	r1, r6
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7fc f95e 	bl	80005b0 <__aeabi_dmul>
 80042f4:	4656      	mov	r6, sl
 80042f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80042fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004300:	f7fc fc06 	bl	8000b10 <__aeabi_d2iz>
 8004304:	4605      	mov	r5, r0
 8004306:	f7fc f8e9 	bl	80004dc <__aeabi_i2d>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004312:	f7fb ff95 	bl	8000240 <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	3530      	adds	r5, #48	@ 0x30
 800431c:	f806 5b01 	strb.w	r5, [r6], #1
 8004320:	42a6      	cmp	r6, r4
 8004322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	d124      	bne.n	8004376 <_dtoa_r+0x62e>
 800432c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004330:	4bae      	ldr	r3, [pc, #696]	@ (80045ec <_dtoa_r+0x8a4>)
 8004332:	f7fb ff87 	bl	8000244 <__adddf3>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800433e:	f7fc fbc7 	bl	8000ad0 <__aeabi_dcmpgt>
 8004342:	2800      	cmp	r0, #0
 8004344:	d163      	bne.n	800440e <_dtoa_r+0x6c6>
 8004346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800434a:	2000      	movs	r0, #0
 800434c:	49a7      	ldr	r1, [pc, #668]	@ (80045ec <_dtoa_r+0x8a4>)
 800434e:	f7fb ff77 	bl	8000240 <__aeabi_dsub>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800435a:	f7fc fb9b 	bl	8000a94 <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	f43f af14 	beq.w	800418c <_dtoa_r+0x444>
 8004364:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004366:	1e73      	subs	r3, r6, #1
 8004368:	9313      	str	r3, [sp, #76]	@ 0x4c
 800436a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800436e:	2b30      	cmp	r3, #48	@ 0x30
 8004370:	d0f8      	beq.n	8004364 <_dtoa_r+0x61c>
 8004372:	4647      	mov	r7, r8
 8004374:	e03b      	b.n	80043ee <_dtoa_r+0x6a6>
 8004376:	4b9e      	ldr	r3, [pc, #632]	@ (80045f0 <_dtoa_r+0x8a8>)
 8004378:	f7fc f91a 	bl	80005b0 <__aeabi_dmul>
 800437c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004380:	e7bc      	b.n	80042fc <_dtoa_r+0x5b4>
 8004382:	4656      	mov	r6, sl
 8004384:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800438c:	4620      	mov	r0, r4
 800438e:	4629      	mov	r1, r5
 8004390:	f7fc fa38 	bl	8000804 <__aeabi_ddiv>
 8004394:	f7fc fbbc 	bl	8000b10 <__aeabi_d2iz>
 8004398:	4680      	mov	r8, r0
 800439a:	f7fc f89f 	bl	80004dc <__aeabi_i2d>
 800439e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043a2:	f7fc f905 	bl	80005b0 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fb ff47 	bl	8000240 <__aeabi_dsub>
 80043b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80043b6:	9d08      	ldr	r5, [sp, #32]
 80043b8:	f806 4b01 	strb.w	r4, [r6], #1
 80043bc:	eba6 040a 	sub.w	r4, r6, sl
 80043c0:	42a5      	cmp	r5, r4
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	d133      	bne.n	8004430 <_dtoa_r+0x6e8>
 80043c8:	f7fb ff3c 	bl	8000244 <__adddf3>
 80043cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043d0:	4604      	mov	r4, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	f7fc fb7c 	bl	8000ad0 <__aeabi_dcmpgt>
 80043d8:	b9c0      	cbnz	r0, 800440c <_dtoa_r+0x6c4>
 80043da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc fb4d 	bl	8000a80 <__aeabi_dcmpeq>
 80043e6:	b110      	cbz	r0, 80043ee <_dtoa_r+0x6a6>
 80043e8:	f018 0f01 	tst.w	r8, #1
 80043ec:	d10e      	bne.n	800440c <_dtoa_r+0x6c4>
 80043ee:	4648      	mov	r0, r9
 80043f0:	9903      	ldr	r1, [sp, #12]
 80043f2:	f000 fbbb 	bl	8004b6c <_Bfree>
 80043f6:	2300      	movs	r3, #0
 80043f8:	7033      	strb	r3, [r6, #0]
 80043fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80043fc:	3701      	adds	r7, #1
 80043fe:	601f      	str	r7, [r3, #0]
 8004400:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 824b 	beq.w	800489e <_dtoa_r+0xb56>
 8004408:	601e      	str	r6, [r3, #0]
 800440a:	e248      	b.n	800489e <_dtoa_r+0xb56>
 800440c:	46b8      	mov	r8, r7
 800440e:	4633      	mov	r3, r6
 8004410:	461e      	mov	r6, r3
 8004412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004416:	2a39      	cmp	r2, #57	@ 0x39
 8004418:	d106      	bne.n	8004428 <_dtoa_r+0x6e0>
 800441a:	459a      	cmp	sl, r3
 800441c:	d1f8      	bne.n	8004410 <_dtoa_r+0x6c8>
 800441e:	2230      	movs	r2, #48	@ 0x30
 8004420:	f108 0801 	add.w	r8, r8, #1
 8004424:	f88a 2000 	strb.w	r2, [sl]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	3201      	adds	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e7a0      	b.n	8004372 <_dtoa_r+0x62a>
 8004430:	2200      	movs	r2, #0
 8004432:	4b6f      	ldr	r3, [pc, #444]	@ (80045f0 <_dtoa_r+0x8a8>)
 8004434:	f7fc f8bc 	bl	80005b0 <__aeabi_dmul>
 8004438:	2200      	movs	r2, #0
 800443a:	2300      	movs	r3, #0
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	f7fc fb1e 	bl	8000a80 <__aeabi_dcmpeq>
 8004444:	2800      	cmp	r0, #0
 8004446:	d09f      	beq.n	8004388 <_dtoa_r+0x640>
 8004448:	e7d1      	b.n	80043ee <_dtoa_r+0x6a6>
 800444a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800444c:	2a00      	cmp	r2, #0
 800444e:	f000 80ea 	beq.w	8004626 <_dtoa_r+0x8de>
 8004452:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004454:	2a01      	cmp	r2, #1
 8004456:	f300 80cd 	bgt.w	80045f4 <_dtoa_r+0x8ac>
 800445a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800445c:	2a00      	cmp	r2, #0
 800445e:	f000 80c1 	beq.w	80045e4 <_dtoa_r+0x89c>
 8004462:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004466:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004468:	9e04      	ldr	r6, [sp, #16]
 800446a:	9a04      	ldr	r2, [sp, #16]
 800446c:	2101      	movs	r1, #1
 800446e:	441a      	add	r2, r3
 8004470:	9204      	str	r2, [sp, #16]
 8004472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004474:	4648      	mov	r0, r9
 8004476:	441a      	add	r2, r3
 8004478:	9209      	str	r2, [sp, #36]	@ 0x24
 800447a:	f000 fc2b 	bl	8004cd4 <__i2b>
 800447e:	4605      	mov	r5, r0
 8004480:	b166      	cbz	r6, 800449c <_dtoa_r+0x754>
 8004482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	dd09      	ble.n	800449c <_dtoa_r+0x754>
 8004488:	42b3      	cmp	r3, r6
 800448a:	bfa8      	it	ge
 800448c:	4633      	movge	r3, r6
 800448e:	9a04      	ldr	r2, [sp, #16]
 8004490:	1af6      	subs	r6, r6, r3
 8004492:	1ad2      	subs	r2, r2, r3
 8004494:	9204      	str	r2, [sp, #16]
 8004496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	9309      	str	r3, [sp, #36]	@ 0x24
 800449c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800449e:	b30b      	cbz	r3, 80044e4 <_dtoa_r+0x79c>
 80044a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80c6 	beq.w	8004634 <_dtoa_r+0x8ec>
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	f000 80c0 	beq.w	800462e <_dtoa_r+0x8e6>
 80044ae:	4629      	mov	r1, r5
 80044b0:	4622      	mov	r2, r4
 80044b2:	4648      	mov	r0, r9
 80044b4:	f000 fcc6 	bl	8004e44 <__pow5mult>
 80044b8:	9a03      	ldr	r2, [sp, #12]
 80044ba:	4601      	mov	r1, r0
 80044bc:	4605      	mov	r5, r0
 80044be:	4648      	mov	r0, r9
 80044c0:	f000 fc1e 	bl	8004d00 <__multiply>
 80044c4:	9903      	ldr	r1, [sp, #12]
 80044c6:	4680      	mov	r8, r0
 80044c8:	4648      	mov	r0, r9
 80044ca:	f000 fb4f 	bl	8004b6c <_Bfree>
 80044ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044d0:	1b1b      	subs	r3, r3, r4
 80044d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80044d4:	f000 80b1 	beq.w	800463a <_dtoa_r+0x8f2>
 80044d8:	4641      	mov	r1, r8
 80044da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044dc:	4648      	mov	r0, r9
 80044de:	f000 fcb1 	bl	8004e44 <__pow5mult>
 80044e2:	9003      	str	r0, [sp, #12]
 80044e4:	2101      	movs	r1, #1
 80044e6:	4648      	mov	r0, r9
 80044e8:	f000 fbf4 	bl	8004cd4 <__i2b>
 80044ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044ee:	4604      	mov	r4, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 81d8 	beq.w	80048a6 <_dtoa_r+0xb5e>
 80044f6:	461a      	mov	r2, r3
 80044f8:	4601      	mov	r1, r0
 80044fa:	4648      	mov	r0, r9
 80044fc:	f000 fca2 	bl	8004e44 <__pow5mult>
 8004500:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004502:	4604      	mov	r4, r0
 8004504:	2b01      	cmp	r3, #1
 8004506:	f300 809f 	bgt.w	8004648 <_dtoa_r+0x900>
 800450a:	9b06      	ldr	r3, [sp, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 8097 	bne.w	8004640 <_dtoa_r+0x8f8>
 8004512:	9b07      	ldr	r3, [sp, #28]
 8004514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 8093 	bne.w	8004644 <_dtoa_r+0x8fc>
 800451e:	9b07      	ldr	r3, [sp, #28]
 8004520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004524:	0d1b      	lsrs	r3, r3, #20
 8004526:	051b      	lsls	r3, r3, #20
 8004528:	b133      	cbz	r3, 8004538 <_dtoa_r+0x7f0>
 800452a:	9b04      	ldr	r3, [sp, #16]
 800452c:	3301      	adds	r3, #1
 800452e:	9304      	str	r3, [sp, #16]
 8004530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004532:	3301      	adds	r3, #1
 8004534:	9309      	str	r3, [sp, #36]	@ 0x24
 8004536:	2301      	movs	r3, #1
 8004538:	930a      	str	r3, [sp, #40]	@ 0x28
 800453a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 81b8 	beq.w	80048b2 <_dtoa_r+0xb6a>
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004548:	6918      	ldr	r0, [r3, #16]
 800454a:	f000 fb77 	bl	8004c3c <__hi0bits>
 800454e:	f1c0 0020 	rsb	r0, r0, #32
 8004552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004554:	4418      	add	r0, r3
 8004556:	f010 001f 	ands.w	r0, r0, #31
 800455a:	f000 8082 	beq.w	8004662 <_dtoa_r+0x91a>
 800455e:	f1c0 0320 	rsb	r3, r0, #32
 8004562:	2b04      	cmp	r3, #4
 8004564:	dd73      	ble.n	800464e <_dtoa_r+0x906>
 8004566:	9b04      	ldr	r3, [sp, #16]
 8004568:	f1c0 001c 	rsb	r0, r0, #28
 800456c:	4403      	add	r3, r0
 800456e:	9304      	str	r3, [sp, #16]
 8004570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004572:	4406      	add	r6, r0
 8004574:	4403      	add	r3, r0
 8004576:	9309      	str	r3, [sp, #36]	@ 0x24
 8004578:	9b04      	ldr	r3, [sp, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dd05      	ble.n	800458a <_dtoa_r+0x842>
 800457e:	461a      	mov	r2, r3
 8004580:	4648      	mov	r0, r9
 8004582:	9903      	ldr	r1, [sp, #12]
 8004584:	f000 fcb8 	bl	8004ef8 <__lshift>
 8004588:	9003      	str	r0, [sp, #12]
 800458a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	dd05      	ble.n	800459c <_dtoa_r+0x854>
 8004590:	4621      	mov	r1, r4
 8004592:	461a      	mov	r2, r3
 8004594:	4648      	mov	r0, r9
 8004596:	f000 fcaf 	bl	8004ef8 <__lshift>
 800459a:	4604      	mov	r4, r0
 800459c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d061      	beq.n	8004666 <_dtoa_r+0x91e>
 80045a2:	4621      	mov	r1, r4
 80045a4:	9803      	ldr	r0, [sp, #12]
 80045a6:	f000 fd13 	bl	8004fd0 <__mcmp>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	da5b      	bge.n	8004666 <_dtoa_r+0x91e>
 80045ae:	2300      	movs	r3, #0
 80045b0:	220a      	movs	r2, #10
 80045b2:	4648      	mov	r0, r9
 80045b4:	9903      	ldr	r1, [sp, #12]
 80045b6:	f000 fafb 	bl	8004bb0 <__multadd>
 80045ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80045c0:	9003      	str	r0, [sp, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8177 	beq.w	80048b6 <_dtoa_r+0xb6e>
 80045c8:	4629      	mov	r1, r5
 80045ca:	2300      	movs	r3, #0
 80045cc:	220a      	movs	r2, #10
 80045ce:	4648      	mov	r0, r9
 80045d0:	f000 faee 	bl	8004bb0 <__multadd>
 80045d4:	f1bb 0f00 	cmp.w	fp, #0
 80045d8:	4605      	mov	r5, r0
 80045da:	dc6f      	bgt.n	80046bc <_dtoa_r+0x974>
 80045dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045de:	2b02      	cmp	r3, #2
 80045e0:	dc49      	bgt.n	8004676 <_dtoa_r+0x92e>
 80045e2:	e06b      	b.n	80046bc <_dtoa_r+0x974>
 80045e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045ea:	e73c      	b.n	8004466 <_dtoa_r+0x71e>
 80045ec:	3fe00000 	.word	0x3fe00000
 80045f0:	40240000 	.word	0x40240000
 80045f4:	9b08      	ldr	r3, [sp, #32]
 80045f6:	1e5c      	subs	r4, r3, #1
 80045f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	db09      	blt.n	8004612 <_dtoa_r+0x8ca>
 80045fe:	1b1c      	subs	r4, r3, r4
 8004600:	9b08      	ldr	r3, [sp, #32]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f6bf af30 	bge.w	8004468 <_dtoa_r+0x720>
 8004608:	9b04      	ldr	r3, [sp, #16]
 800460a:	9a08      	ldr	r2, [sp, #32]
 800460c:	1a9e      	subs	r6, r3, r2
 800460e:	2300      	movs	r3, #0
 8004610:	e72b      	b.n	800446a <_dtoa_r+0x722>
 8004612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004616:	1ae3      	subs	r3, r4, r3
 8004618:	441a      	add	r2, r3
 800461a:	940a      	str	r4, [sp, #40]	@ 0x28
 800461c:	9e04      	ldr	r6, [sp, #16]
 800461e:	2400      	movs	r4, #0
 8004620:	9b08      	ldr	r3, [sp, #32]
 8004622:	920e      	str	r2, [sp, #56]	@ 0x38
 8004624:	e721      	b.n	800446a <_dtoa_r+0x722>
 8004626:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004628:	9e04      	ldr	r6, [sp, #16]
 800462a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800462c:	e728      	b.n	8004480 <_dtoa_r+0x738>
 800462e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004632:	e751      	b.n	80044d8 <_dtoa_r+0x790>
 8004634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004636:	9903      	ldr	r1, [sp, #12]
 8004638:	e750      	b.n	80044dc <_dtoa_r+0x794>
 800463a:	f8cd 800c 	str.w	r8, [sp, #12]
 800463e:	e751      	b.n	80044e4 <_dtoa_r+0x79c>
 8004640:	2300      	movs	r3, #0
 8004642:	e779      	b.n	8004538 <_dtoa_r+0x7f0>
 8004644:	9b06      	ldr	r3, [sp, #24]
 8004646:	e777      	b.n	8004538 <_dtoa_r+0x7f0>
 8004648:	2300      	movs	r3, #0
 800464a:	930a      	str	r3, [sp, #40]	@ 0x28
 800464c:	e779      	b.n	8004542 <_dtoa_r+0x7fa>
 800464e:	d093      	beq.n	8004578 <_dtoa_r+0x830>
 8004650:	9a04      	ldr	r2, [sp, #16]
 8004652:	331c      	adds	r3, #28
 8004654:	441a      	add	r2, r3
 8004656:	9204      	str	r2, [sp, #16]
 8004658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800465a:	441e      	add	r6, r3
 800465c:	441a      	add	r2, r3
 800465e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004660:	e78a      	b.n	8004578 <_dtoa_r+0x830>
 8004662:	4603      	mov	r3, r0
 8004664:	e7f4      	b.n	8004650 <_dtoa_r+0x908>
 8004666:	9b08      	ldr	r3, [sp, #32]
 8004668:	46b8      	mov	r8, r7
 800466a:	2b00      	cmp	r3, #0
 800466c:	dc20      	bgt.n	80046b0 <_dtoa_r+0x968>
 800466e:	469b      	mov	fp, r3
 8004670:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004672:	2b02      	cmp	r3, #2
 8004674:	dd1e      	ble.n	80046b4 <_dtoa_r+0x96c>
 8004676:	f1bb 0f00 	cmp.w	fp, #0
 800467a:	f47f adb1 	bne.w	80041e0 <_dtoa_r+0x498>
 800467e:	4621      	mov	r1, r4
 8004680:	465b      	mov	r3, fp
 8004682:	2205      	movs	r2, #5
 8004684:	4648      	mov	r0, r9
 8004686:	f000 fa93 	bl	8004bb0 <__multadd>
 800468a:	4601      	mov	r1, r0
 800468c:	4604      	mov	r4, r0
 800468e:	9803      	ldr	r0, [sp, #12]
 8004690:	f000 fc9e 	bl	8004fd0 <__mcmp>
 8004694:	2800      	cmp	r0, #0
 8004696:	f77f ada3 	ble.w	80041e0 <_dtoa_r+0x498>
 800469a:	4656      	mov	r6, sl
 800469c:	2331      	movs	r3, #49	@ 0x31
 800469e:	f108 0801 	add.w	r8, r8, #1
 80046a2:	f806 3b01 	strb.w	r3, [r6], #1
 80046a6:	e59f      	b.n	80041e8 <_dtoa_r+0x4a0>
 80046a8:	46b8      	mov	r8, r7
 80046aa:	9c08      	ldr	r4, [sp, #32]
 80046ac:	4625      	mov	r5, r4
 80046ae:	e7f4      	b.n	800469a <_dtoa_r+0x952>
 80046b0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80046b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8101 	beq.w	80048be <_dtoa_r+0xb76>
 80046bc:	2e00      	cmp	r6, #0
 80046be:	dd05      	ble.n	80046cc <_dtoa_r+0x984>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4632      	mov	r2, r6
 80046c4:	4648      	mov	r0, r9
 80046c6:	f000 fc17 	bl	8004ef8 <__lshift>
 80046ca:	4605      	mov	r5, r0
 80046cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d05c      	beq.n	800478c <_dtoa_r+0xa44>
 80046d2:	4648      	mov	r0, r9
 80046d4:	6869      	ldr	r1, [r5, #4]
 80046d6:	f000 fa09 	bl	8004aec <_Balloc>
 80046da:	4606      	mov	r6, r0
 80046dc:	b928      	cbnz	r0, 80046ea <_dtoa_r+0x9a2>
 80046de:	4602      	mov	r2, r0
 80046e0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046e4:	4b80      	ldr	r3, [pc, #512]	@ (80048e8 <_dtoa_r+0xba0>)
 80046e6:	f7ff bb43 	b.w	8003d70 <_dtoa_r+0x28>
 80046ea:	692a      	ldr	r2, [r5, #16]
 80046ec:	f105 010c 	add.w	r1, r5, #12
 80046f0:	3202      	adds	r2, #2
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	300c      	adds	r0, #12
 80046f6:	f000 ff9d 	bl	8005634 <memcpy>
 80046fa:	2201      	movs	r2, #1
 80046fc:	4631      	mov	r1, r6
 80046fe:	4648      	mov	r0, r9
 8004700:	f000 fbfa 	bl	8004ef8 <__lshift>
 8004704:	462f      	mov	r7, r5
 8004706:	4605      	mov	r5, r0
 8004708:	f10a 0301 	add.w	r3, sl, #1
 800470c:	9304      	str	r3, [sp, #16]
 800470e:	eb0a 030b 	add.w	r3, sl, fp
 8004712:	930a      	str	r3, [sp, #40]	@ 0x28
 8004714:	9b06      	ldr	r3, [sp, #24]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	9309      	str	r3, [sp, #36]	@ 0x24
 800471c:	9b04      	ldr	r3, [sp, #16]
 800471e:	4621      	mov	r1, r4
 8004720:	9803      	ldr	r0, [sp, #12]
 8004722:	f103 3bff 	add.w	fp, r3, #4294967295
 8004726:	f7ff fa84 	bl	8003c32 <quorem>
 800472a:	4603      	mov	r3, r0
 800472c:	4639      	mov	r1, r7
 800472e:	3330      	adds	r3, #48	@ 0x30
 8004730:	9006      	str	r0, [sp, #24]
 8004732:	9803      	ldr	r0, [sp, #12]
 8004734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004736:	f000 fc4b 	bl	8004fd0 <__mcmp>
 800473a:	462a      	mov	r2, r5
 800473c:	9008      	str	r0, [sp, #32]
 800473e:	4621      	mov	r1, r4
 8004740:	4648      	mov	r0, r9
 8004742:	f000 fc61 	bl	8005008 <__mdiff>
 8004746:	68c2      	ldr	r2, [r0, #12]
 8004748:	4606      	mov	r6, r0
 800474a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800474c:	bb02      	cbnz	r2, 8004790 <_dtoa_r+0xa48>
 800474e:	4601      	mov	r1, r0
 8004750:	9803      	ldr	r0, [sp, #12]
 8004752:	f000 fc3d 	bl	8004fd0 <__mcmp>
 8004756:	4602      	mov	r2, r0
 8004758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800475a:	4631      	mov	r1, r6
 800475c:	4648      	mov	r0, r9
 800475e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004762:	f000 fa03 	bl	8004b6c <_Bfree>
 8004766:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800476a:	9e04      	ldr	r6, [sp, #16]
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004772:	4319      	orrs	r1, r3
 8004774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004776:	d10d      	bne.n	8004794 <_dtoa_r+0xa4c>
 8004778:	2b39      	cmp	r3, #57	@ 0x39
 800477a:	d027      	beq.n	80047cc <_dtoa_r+0xa84>
 800477c:	9a08      	ldr	r2, [sp, #32]
 800477e:	2a00      	cmp	r2, #0
 8004780:	dd01      	ble.n	8004786 <_dtoa_r+0xa3e>
 8004782:	9b06      	ldr	r3, [sp, #24]
 8004784:	3331      	adds	r3, #49	@ 0x31
 8004786:	f88b 3000 	strb.w	r3, [fp]
 800478a:	e52e      	b.n	80041ea <_dtoa_r+0x4a2>
 800478c:	4628      	mov	r0, r5
 800478e:	e7b9      	b.n	8004704 <_dtoa_r+0x9bc>
 8004790:	2201      	movs	r2, #1
 8004792:	e7e2      	b.n	800475a <_dtoa_r+0xa12>
 8004794:	9908      	ldr	r1, [sp, #32]
 8004796:	2900      	cmp	r1, #0
 8004798:	db04      	blt.n	80047a4 <_dtoa_r+0xa5c>
 800479a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800479c:	4301      	orrs	r1, r0
 800479e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047a0:	4301      	orrs	r1, r0
 80047a2:	d120      	bne.n	80047e6 <_dtoa_r+0xa9e>
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	ddee      	ble.n	8004786 <_dtoa_r+0xa3e>
 80047a8:	2201      	movs	r2, #1
 80047aa:	9903      	ldr	r1, [sp, #12]
 80047ac:	4648      	mov	r0, r9
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	f000 fba2 	bl	8004ef8 <__lshift>
 80047b4:	4621      	mov	r1, r4
 80047b6:	9003      	str	r0, [sp, #12]
 80047b8:	f000 fc0a 	bl	8004fd0 <__mcmp>
 80047bc:	2800      	cmp	r0, #0
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	dc02      	bgt.n	80047c8 <_dtoa_r+0xa80>
 80047c2:	d1e0      	bne.n	8004786 <_dtoa_r+0xa3e>
 80047c4:	07da      	lsls	r2, r3, #31
 80047c6:	d5de      	bpl.n	8004786 <_dtoa_r+0xa3e>
 80047c8:	2b39      	cmp	r3, #57	@ 0x39
 80047ca:	d1da      	bne.n	8004782 <_dtoa_r+0xa3a>
 80047cc:	2339      	movs	r3, #57	@ 0x39
 80047ce:	f88b 3000 	strb.w	r3, [fp]
 80047d2:	4633      	mov	r3, r6
 80047d4:	461e      	mov	r6, r3
 80047d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047da:	3b01      	subs	r3, #1
 80047dc:	2a39      	cmp	r2, #57	@ 0x39
 80047de:	d04e      	beq.n	800487e <_dtoa_r+0xb36>
 80047e0:	3201      	adds	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e501      	b.n	80041ea <_dtoa_r+0x4a2>
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	dd03      	ble.n	80047f2 <_dtoa_r+0xaaa>
 80047ea:	2b39      	cmp	r3, #57	@ 0x39
 80047ec:	d0ee      	beq.n	80047cc <_dtoa_r+0xa84>
 80047ee:	3301      	adds	r3, #1
 80047f0:	e7c9      	b.n	8004786 <_dtoa_r+0xa3e>
 80047f2:	9a04      	ldr	r2, [sp, #16]
 80047f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047fa:	428a      	cmp	r2, r1
 80047fc:	d028      	beq.n	8004850 <_dtoa_r+0xb08>
 80047fe:	2300      	movs	r3, #0
 8004800:	220a      	movs	r2, #10
 8004802:	9903      	ldr	r1, [sp, #12]
 8004804:	4648      	mov	r0, r9
 8004806:	f000 f9d3 	bl	8004bb0 <__multadd>
 800480a:	42af      	cmp	r7, r5
 800480c:	9003      	str	r0, [sp, #12]
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f04f 020a 	mov.w	r2, #10
 8004816:	4639      	mov	r1, r7
 8004818:	4648      	mov	r0, r9
 800481a:	d107      	bne.n	800482c <_dtoa_r+0xae4>
 800481c:	f000 f9c8 	bl	8004bb0 <__multadd>
 8004820:	4607      	mov	r7, r0
 8004822:	4605      	mov	r5, r0
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	3301      	adds	r3, #1
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	e777      	b.n	800471c <_dtoa_r+0x9d4>
 800482c:	f000 f9c0 	bl	8004bb0 <__multadd>
 8004830:	4629      	mov	r1, r5
 8004832:	4607      	mov	r7, r0
 8004834:	2300      	movs	r3, #0
 8004836:	220a      	movs	r2, #10
 8004838:	4648      	mov	r0, r9
 800483a:	f000 f9b9 	bl	8004bb0 <__multadd>
 800483e:	4605      	mov	r5, r0
 8004840:	e7f0      	b.n	8004824 <_dtoa_r+0xadc>
 8004842:	f1bb 0f00 	cmp.w	fp, #0
 8004846:	bfcc      	ite	gt
 8004848:	465e      	movgt	r6, fp
 800484a:	2601      	movle	r6, #1
 800484c:	2700      	movs	r7, #0
 800484e:	4456      	add	r6, sl
 8004850:	2201      	movs	r2, #1
 8004852:	9903      	ldr	r1, [sp, #12]
 8004854:	4648      	mov	r0, r9
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	f000 fb4e 	bl	8004ef8 <__lshift>
 800485c:	4621      	mov	r1, r4
 800485e:	9003      	str	r0, [sp, #12]
 8004860:	f000 fbb6 	bl	8004fd0 <__mcmp>
 8004864:	2800      	cmp	r0, #0
 8004866:	dcb4      	bgt.n	80047d2 <_dtoa_r+0xa8a>
 8004868:	d102      	bne.n	8004870 <_dtoa_r+0xb28>
 800486a:	9b04      	ldr	r3, [sp, #16]
 800486c:	07db      	lsls	r3, r3, #31
 800486e:	d4b0      	bmi.n	80047d2 <_dtoa_r+0xa8a>
 8004870:	4633      	mov	r3, r6
 8004872:	461e      	mov	r6, r3
 8004874:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004878:	2a30      	cmp	r2, #48	@ 0x30
 800487a:	d0fa      	beq.n	8004872 <_dtoa_r+0xb2a>
 800487c:	e4b5      	b.n	80041ea <_dtoa_r+0x4a2>
 800487e:	459a      	cmp	sl, r3
 8004880:	d1a8      	bne.n	80047d4 <_dtoa_r+0xa8c>
 8004882:	2331      	movs	r3, #49	@ 0x31
 8004884:	f108 0801 	add.w	r8, r8, #1
 8004888:	f88a 3000 	strb.w	r3, [sl]
 800488c:	e4ad      	b.n	80041ea <_dtoa_r+0x4a2>
 800488e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004890:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80048ec <_dtoa_r+0xba4>
 8004894:	b11b      	cbz	r3, 800489e <_dtoa_r+0xb56>
 8004896:	f10a 0308 	add.w	r3, sl, #8
 800489a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4650      	mov	r0, sl
 80048a0:	b017      	add	sp, #92	@ 0x5c
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	f77f ae2e 	ble.w	800450a <_dtoa_r+0x7c2>
 80048ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b2:	2001      	movs	r0, #1
 80048b4:	e64d      	b.n	8004552 <_dtoa_r+0x80a>
 80048b6:	f1bb 0f00 	cmp.w	fp, #0
 80048ba:	f77f aed9 	ble.w	8004670 <_dtoa_r+0x928>
 80048be:	4656      	mov	r6, sl
 80048c0:	4621      	mov	r1, r4
 80048c2:	9803      	ldr	r0, [sp, #12]
 80048c4:	f7ff f9b5 	bl	8003c32 <quorem>
 80048c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80048cc:	f806 3b01 	strb.w	r3, [r6], #1
 80048d0:	eba6 020a 	sub.w	r2, r6, sl
 80048d4:	4593      	cmp	fp, r2
 80048d6:	ddb4      	ble.n	8004842 <_dtoa_r+0xafa>
 80048d8:	2300      	movs	r3, #0
 80048da:	220a      	movs	r2, #10
 80048dc:	4648      	mov	r0, r9
 80048de:	9903      	ldr	r1, [sp, #12]
 80048e0:	f000 f966 	bl	8004bb0 <__multadd>
 80048e4:	9003      	str	r0, [sp, #12]
 80048e6:	e7eb      	b.n	80048c0 <_dtoa_r+0xb78>
 80048e8:	08005de6 	.word	0x08005de6
 80048ec:	08005d6a 	.word	0x08005d6a

080048f0 <_free_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4605      	mov	r5, r0
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d040      	beq.n	800497a <_free_r+0x8a>
 80048f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fc:	1f0c      	subs	r4, r1, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfb8      	it	lt
 8004902:	18e4      	addlt	r4, r4, r3
 8004904:	f000 f8e6 	bl	8004ad4 <__malloc_lock>
 8004908:	4a1c      	ldr	r2, [pc, #112]	@ (800497c <_free_r+0x8c>)
 800490a:	6813      	ldr	r3, [r2, #0]
 800490c:	b933      	cbnz	r3, 800491c <_free_r+0x2c>
 800490e:	6063      	str	r3, [r4, #4]
 8004910:	6014      	str	r4, [r2, #0]
 8004912:	4628      	mov	r0, r5
 8004914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004918:	f000 b8e2 	b.w	8004ae0 <__malloc_unlock>
 800491c:	42a3      	cmp	r3, r4
 800491e:	d908      	bls.n	8004932 <_free_r+0x42>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	1821      	adds	r1, r4, r0
 8004924:	428b      	cmp	r3, r1
 8004926:	bf01      	itttt	eq
 8004928:	6819      	ldreq	r1, [r3, #0]
 800492a:	685b      	ldreq	r3, [r3, #4]
 800492c:	1809      	addeq	r1, r1, r0
 800492e:	6021      	streq	r1, [r4, #0]
 8004930:	e7ed      	b.n	800490e <_free_r+0x1e>
 8004932:	461a      	mov	r2, r3
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	b10b      	cbz	r3, 800493c <_free_r+0x4c>
 8004938:	42a3      	cmp	r3, r4
 800493a:	d9fa      	bls.n	8004932 <_free_r+0x42>
 800493c:	6811      	ldr	r1, [r2, #0]
 800493e:	1850      	adds	r0, r2, r1
 8004940:	42a0      	cmp	r0, r4
 8004942:	d10b      	bne.n	800495c <_free_r+0x6c>
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	4401      	add	r1, r0
 8004948:	1850      	adds	r0, r2, r1
 800494a:	4283      	cmp	r3, r0
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	d1e0      	bne.n	8004912 <_free_r+0x22>
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4408      	add	r0, r1
 8004956:	6010      	str	r0, [r2, #0]
 8004958:	6053      	str	r3, [r2, #4]
 800495a:	e7da      	b.n	8004912 <_free_r+0x22>
 800495c:	d902      	bls.n	8004964 <_free_r+0x74>
 800495e:	230c      	movs	r3, #12
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	e7d6      	b.n	8004912 <_free_r+0x22>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf01      	itttt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	1809      	addeq	r1, r1, r0
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	6054      	str	r4, [r2, #4]
 8004978:	e7cb      	b.n	8004912 <_free_r+0x22>
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	200003b8 	.word	0x200003b8

08004980 <malloc>:
 8004980:	4b02      	ldr	r3, [pc, #8]	@ (800498c <malloc+0xc>)
 8004982:	4601      	mov	r1, r0
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	f000 b825 	b.w	80049d4 <_malloc_r>
 800498a:	bf00      	nop
 800498c:	20000018 	.word	0x20000018

08004990 <sbrk_aligned>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4e0f      	ldr	r6, [pc, #60]	@ (80049d0 <sbrk_aligned+0x40>)
 8004994:	460c      	mov	r4, r1
 8004996:	6831      	ldr	r1, [r6, #0]
 8004998:	4605      	mov	r5, r0
 800499a:	b911      	cbnz	r1, 80049a2 <sbrk_aligned+0x12>
 800499c:	f000 fe3a 	bl	8005614 <_sbrk_r>
 80049a0:	6030      	str	r0, [r6, #0]
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 fe35 	bl	8005614 <_sbrk_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d103      	bne.n	80049b6 <sbrk_aligned+0x26>
 80049ae:	f04f 34ff 	mov.w	r4, #4294967295
 80049b2:	4620      	mov	r0, r4
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
 80049b6:	1cc4      	adds	r4, r0, #3
 80049b8:	f024 0403 	bic.w	r4, r4, #3
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d0f8      	beq.n	80049b2 <sbrk_aligned+0x22>
 80049c0:	1a21      	subs	r1, r4, r0
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 fe26 	bl	8005614 <_sbrk_r>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d1f2      	bne.n	80049b2 <sbrk_aligned+0x22>
 80049cc:	e7ef      	b.n	80049ae <sbrk_aligned+0x1e>
 80049ce:	bf00      	nop
 80049d0:	200003b4 	.word	0x200003b4

080049d4 <_malloc_r>:
 80049d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049d8:	1ccd      	adds	r5, r1, #3
 80049da:	f025 0503 	bic.w	r5, r5, #3
 80049de:	3508      	adds	r5, #8
 80049e0:	2d0c      	cmp	r5, #12
 80049e2:	bf38      	it	cc
 80049e4:	250c      	movcc	r5, #12
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	4606      	mov	r6, r0
 80049ea:	db01      	blt.n	80049f0 <_malloc_r+0x1c>
 80049ec:	42a9      	cmp	r1, r5
 80049ee:	d904      	bls.n	80049fa <_malloc_r+0x26>
 80049f0:	230c      	movs	r3, #12
 80049f2:	6033      	str	r3, [r6, #0]
 80049f4:	2000      	movs	r0, #0
 80049f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ad0 <_malloc_r+0xfc>
 80049fe:	f000 f869 	bl	8004ad4 <__malloc_lock>
 8004a02:	f8d8 3000 	ldr.w	r3, [r8]
 8004a06:	461c      	mov	r4, r3
 8004a08:	bb44      	cbnz	r4, 8004a5c <_malloc_r+0x88>
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f7ff ffbf 	bl	8004990 <sbrk_aligned>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	4604      	mov	r4, r0
 8004a16:	d158      	bne.n	8004aca <_malloc_r+0xf6>
 8004a18:	f8d8 4000 	ldr.w	r4, [r8]
 8004a1c:	4627      	mov	r7, r4
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	d143      	bne.n	8004aaa <_malloc_r+0xd6>
 8004a22:	2c00      	cmp	r4, #0
 8004a24:	d04b      	beq.n	8004abe <_malloc_r+0xea>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	4639      	mov	r1, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	eb04 0903 	add.w	r9, r4, r3
 8004a30:	f000 fdf0 	bl	8005614 <_sbrk_r>
 8004a34:	4581      	cmp	r9, r0
 8004a36:	d142      	bne.n	8004abe <_malloc_r+0xea>
 8004a38:	6821      	ldr	r1, [r4, #0]
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	1a6d      	subs	r5, r5, r1
 8004a3e:	4629      	mov	r1, r5
 8004a40:	f7ff ffa6 	bl	8004990 <sbrk_aligned>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d03a      	beq.n	8004abe <_malloc_r+0xea>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	442b      	add	r3, r5
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	bb62      	cbnz	r2, 8004ab0 <_malloc_r+0xdc>
 8004a56:	f8c8 7000 	str.w	r7, [r8]
 8004a5a:	e00f      	b.n	8004a7c <_malloc_r+0xa8>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	1b52      	subs	r2, r2, r5
 8004a60:	d420      	bmi.n	8004aa4 <_malloc_r+0xd0>
 8004a62:	2a0b      	cmp	r2, #11
 8004a64:	d917      	bls.n	8004a96 <_malloc_r+0xc2>
 8004a66:	1961      	adds	r1, r4, r5
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	6025      	str	r5, [r4, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	6059      	strne	r1, [r3, #4]
 8004a70:	6863      	ldr	r3, [r4, #4]
 8004a72:	bf08      	it	eq
 8004a74:	f8c8 1000 	streq.w	r1, [r8]
 8004a78:	5162      	str	r2, [r4, r5]
 8004a7a:	604b      	str	r3, [r1, #4]
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 f82f 	bl	8004ae0 <__malloc_unlock>
 8004a82:	f104 000b 	add.w	r0, r4, #11
 8004a86:	1d23      	adds	r3, r4, #4
 8004a88:	f020 0007 	bic.w	r0, r0, #7
 8004a8c:	1ac2      	subs	r2, r0, r3
 8004a8e:	bf1c      	itt	ne
 8004a90:	1a1b      	subne	r3, r3, r0
 8004a92:	50a3      	strne	r3, [r4, r2]
 8004a94:	e7af      	b.n	80049f6 <_malloc_r+0x22>
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	42a3      	cmp	r3, r4
 8004a9a:	bf0c      	ite	eq
 8004a9c:	f8c8 2000 	streq.w	r2, [r8]
 8004aa0:	605a      	strne	r2, [r3, #4]
 8004aa2:	e7eb      	b.n	8004a7c <_malloc_r+0xa8>
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	6864      	ldr	r4, [r4, #4]
 8004aa8:	e7ae      	b.n	8004a08 <_malloc_r+0x34>
 8004aaa:	463c      	mov	r4, r7
 8004aac:	687f      	ldr	r7, [r7, #4]
 8004aae:	e7b6      	b.n	8004a1e <_malloc_r+0x4a>
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d1fb      	bne.n	8004ab0 <_malloc_r+0xdc>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6053      	str	r3, [r2, #4]
 8004abc:	e7de      	b.n	8004a7c <_malloc_r+0xa8>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	6033      	str	r3, [r6, #0]
 8004ac4:	f000 f80c 	bl	8004ae0 <__malloc_unlock>
 8004ac8:	e794      	b.n	80049f4 <_malloc_r+0x20>
 8004aca:	6005      	str	r5, [r0, #0]
 8004acc:	e7d6      	b.n	8004a7c <_malloc_r+0xa8>
 8004ace:	bf00      	nop
 8004ad0:	200003b8 	.word	0x200003b8

08004ad4 <__malloc_lock>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	@ (8004adc <__malloc_lock+0x8>)
 8004ad6:	f7ff b89c 	b.w	8003c12 <__retarget_lock_acquire_recursive>
 8004ada:	bf00      	nop
 8004adc:	200003b0 	.word	0x200003b0

08004ae0 <__malloc_unlock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	@ (8004ae8 <__malloc_unlock+0x8>)
 8004ae2:	f7ff b897 	b.w	8003c14 <__retarget_lock_release_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	200003b0 	.word	0x200003b0

08004aec <_Balloc>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	69c6      	ldr	r6, [r0, #28]
 8004af0:	4604      	mov	r4, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	b976      	cbnz	r6, 8004b14 <_Balloc+0x28>
 8004af6:	2010      	movs	r0, #16
 8004af8:	f7ff ff42 	bl	8004980 <malloc>
 8004afc:	4602      	mov	r2, r0
 8004afe:	61e0      	str	r0, [r4, #28]
 8004b00:	b920      	cbnz	r0, 8004b0c <_Balloc+0x20>
 8004b02:	216b      	movs	r1, #107	@ 0x6b
 8004b04:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <_Balloc+0x78>)
 8004b06:	4818      	ldr	r0, [pc, #96]	@ (8004b68 <_Balloc+0x7c>)
 8004b08:	f000 fda2 	bl	8005650 <__assert_func>
 8004b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b10:	6006      	str	r6, [r0, #0]
 8004b12:	60c6      	str	r6, [r0, #12]
 8004b14:	69e6      	ldr	r6, [r4, #28]
 8004b16:	68f3      	ldr	r3, [r6, #12]
 8004b18:	b183      	cbz	r3, 8004b3c <_Balloc+0x50>
 8004b1a:	69e3      	ldr	r3, [r4, #28]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b22:	b9b8      	cbnz	r0, 8004b54 <_Balloc+0x68>
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f605 	lsl.w	r6, r1, r5
 8004b2a:	1d72      	adds	r2, r6, #5
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	f000 fdac 	bl	800568c <_calloc_r>
 8004b34:	b160      	cbz	r0, 8004b50 <_Balloc+0x64>
 8004b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b3a:	e00e      	b.n	8004b5a <_Balloc+0x6e>
 8004b3c:	2221      	movs	r2, #33	@ 0x21
 8004b3e:	2104      	movs	r1, #4
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fda3 	bl	800568c <_calloc_r>
 8004b46:	69e3      	ldr	r3, [r4, #28]
 8004b48:	60f0      	str	r0, [r6, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e4      	bne.n	8004b1a <_Balloc+0x2e>
 8004b50:	2000      	movs	r0, #0
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	6802      	ldr	r2, [r0, #0]
 8004b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b60:	e7f7      	b.n	8004b52 <_Balloc+0x66>
 8004b62:	bf00      	nop
 8004b64:	08005d77 	.word	0x08005d77
 8004b68:	08005df7 	.word	0x08005df7

08004b6c <_Bfree>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	69c6      	ldr	r6, [r0, #28]
 8004b70:	4605      	mov	r5, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	b976      	cbnz	r6, 8004b94 <_Bfree+0x28>
 8004b76:	2010      	movs	r0, #16
 8004b78:	f7ff ff02 	bl	8004980 <malloc>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	61e8      	str	r0, [r5, #28]
 8004b80:	b920      	cbnz	r0, 8004b8c <_Bfree+0x20>
 8004b82:	218f      	movs	r1, #143	@ 0x8f
 8004b84:	4b08      	ldr	r3, [pc, #32]	@ (8004ba8 <_Bfree+0x3c>)
 8004b86:	4809      	ldr	r0, [pc, #36]	@ (8004bac <_Bfree+0x40>)
 8004b88:	f000 fd62 	bl	8005650 <__assert_func>
 8004b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b90:	6006      	str	r6, [r0, #0]
 8004b92:	60c6      	str	r6, [r0, #12]
 8004b94:	b13c      	cbz	r4, 8004ba6 <_Bfree+0x3a>
 8004b96:	69eb      	ldr	r3, [r5, #28]
 8004b98:	6862      	ldr	r2, [r4, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ba0:	6021      	str	r1, [r4, #0]
 8004ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	08005d77 	.word	0x08005d77
 8004bac:	08005df7 	.word	0x08005df7

08004bb0 <__multadd>:
 8004bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb4:	4607      	mov	r7, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	461e      	mov	r6, r3
 8004bba:	2000      	movs	r0, #0
 8004bbc:	690d      	ldr	r5, [r1, #16]
 8004bbe:	f101 0c14 	add.w	ip, r1, #20
 8004bc2:	f8dc 3000 	ldr.w	r3, [ip]
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	b299      	uxth	r1, r3
 8004bca:	fb02 6101 	mla	r1, r2, r1, r6
 8004bce:	0c1e      	lsrs	r6, r3, #16
 8004bd0:	0c0b      	lsrs	r3, r1, #16
 8004bd2:	fb02 3306 	mla	r3, r2, r6, r3
 8004bd6:	b289      	uxth	r1, r1
 8004bd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004bdc:	4285      	cmp	r5, r0
 8004bde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004be2:	f84c 1b04 	str.w	r1, [ip], #4
 8004be6:	dcec      	bgt.n	8004bc2 <__multadd+0x12>
 8004be8:	b30e      	cbz	r6, 8004c2e <__multadd+0x7e>
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dc19      	bgt.n	8004c24 <__multadd+0x74>
 8004bf0:	6861      	ldr	r1, [r4, #4]
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	3101      	adds	r1, #1
 8004bf6:	f7ff ff79 	bl	8004aec <_Balloc>
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	b928      	cbnz	r0, 8004c0a <__multadd+0x5a>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	21ba      	movs	r1, #186	@ 0xba
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <__multadd+0x84>)
 8004c04:	480c      	ldr	r0, [pc, #48]	@ (8004c38 <__multadd+0x88>)
 8004c06:	f000 fd23 	bl	8005650 <__assert_func>
 8004c0a:	6922      	ldr	r2, [r4, #16]
 8004c0c:	f104 010c 	add.w	r1, r4, #12
 8004c10:	3202      	adds	r2, #2
 8004c12:	0092      	lsls	r2, r2, #2
 8004c14:	300c      	adds	r0, #12
 8004c16:	f000 fd0d 	bl	8005634 <memcpy>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff ffa5 	bl	8004b6c <_Bfree>
 8004c22:	4644      	mov	r4, r8
 8004c24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c28:	3501      	adds	r5, #1
 8004c2a:	615e      	str	r6, [r3, #20]
 8004c2c:	6125      	str	r5, [r4, #16]
 8004c2e:	4620      	mov	r0, r4
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c34:	08005de6 	.word	0x08005de6
 8004c38:	08005df7 	.word	0x08005df7

08004c3c <__hi0bits>:
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c42:	bf3a      	itte	cc
 8004c44:	0403      	lslcc	r3, r0, #16
 8004c46:	2010      	movcc	r0, #16
 8004c48:	2000      	movcs	r0, #0
 8004c4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c4e:	bf3c      	itt	cc
 8004c50:	021b      	lslcc	r3, r3, #8
 8004c52:	3008      	addcc	r0, #8
 8004c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c58:	bf3c      	itt	cc
 8004c5a:	011b      	lslcc	r3, r3, #4
 8004c5c:	3004      	addcc	r0, #4
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c62:	bf3c      	itt	cc
 8004c64:	009b      	lslcc	r3, r3, #2
 8004c66:	3002      	addcc	r0, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	db05      	blt.n	8004c78 <__hi0bits+0x3c>
 8004c6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c70:	f100 0001 	add.w	r0, r0, #1
 8004c74:	bf08      	it	eq
 8004c76:	2020      	moveq	r0, #32
 8004c78:	4770      	bx	lr

08004c7a <__lo0bits>:
 8004c7a:	6803      	ldr	r3, [r0, #0]
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f013 0007 	ands.w	r0, r3, #7
 8004c82:	d00b      	beq.n	8004c9c <__lo0bits+0x22>
 8004c84:	07d9      	lsls	r1, r3, #31
 8004c86:	d421      	bmi.n	8004ccc <__lo0bits+0x52>
 8004c88:	0798      	lsls	r0, r3, #30
 8004c8a:	bf49      	itett	mi
 8004c8c:	085b      	lsrmi	r3, r3, #1
 8004c8e:	089b      	lsrpl	r3, r3, #2
 8004c90:	2001      	movmi	r0, #1
 8004c92:	6013      	strmi	r3, [r2, #0]
 8004c94:	bf5c      	itt	pl
 8004c96:	2002      	movpl	r0, #2
 8004c98:	6013      	strpl	r3, [r2, #0]
 8004c9a:	4770      	bx	lr
 8004c9c:	b299      	uxth	r1, r3
 8004c9e:	b909      	cbnz	r1, 8004ca4 <__lo0bits+0x2a>
 8004ca0:	2010      	movs	r0, #16
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	b2d9      	uxtb	r1, r3
 8004ca6:	b909      	cbnz	r1, 8004cac <__lo0bits+0x32>
 8004ca8:	3008      	adds	r0, #8
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	0719      	lsls	r1, r3, #28
 8004cae:	bf04      	itt	eq
 8004cb0:	091b      	lsreq	r3, r3, #4
 8004cb2:	3004      	addeq	r0, #4
 8004cb4:	0799      	lsls	r1, r3, #30
 8004cb6:	bf04      	itt	eq
 8004cb8:	089b      	lsreq	r3, r3, #2
 8004cba:	3002      	addeq	r0, #2
 8004cbc:	07d9      	lsls	r1, r3, #31
 8004cbe:	d403      	bmi.n	8004cc8 <__lo0bits+0x4e>
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	f100 0001 	add.w	r0, r0, #1
 8004cc6:	d003      	beq.n	8004cd0 <__lo0bits+0x56>
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4770      	bx	lr
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4770      	bx	lr
 8004cd0:	2020      	movs	r0, #32
 8004cd2:	4770      	bx	lr

08004cd4 <__i2b>:
 8004cd4:	b510      	push	{r4, lr}
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	2101      	movs	r1, #1
 8004cda:	f7ff ff07 	bl	8004aec <_Balloc>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	b928      	cbnz	r0, 8004cee <__i2b+0x1a>
 8004ce2:	f240 1145 	movw	r1, #325	@ 0x145
 8004ce6:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <__i2b+0x24>)
 8004ce8:	4804      	ldr	r0, [pc, #16]	@ (8004cfc <__i2b+0x28>)
 8004cea:	f000 fcb1 	bl	8005650 <__assert_func>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6144      	str	r4, [r0, #20]
 8004cf2:	6103      	str	r3, [r0, #16]
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08005de6 	.word	0x08005de6
 8004cfc:	08005df7 	.word	0x08005df7

08004d00 <__multiply>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	4617      	mov	r7, r2
 8004d06:	690a      	ldr	r2, [r1, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4689      	mov	r9, r1
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bfa2      	ittt	ge
 8004d10:	463b      	movge	r3, r7
 8004d12:	460f      	movge	r7, r1
 8004d14:	4699      	movge	r9, r3
 8004d16:	693d      	ldr	r5, [r7, #16]
 8004d18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	eb05 060a 	add.w	r6, r5, sl
 8004d24:	42b3      	cmp	r3, r6
 8004d26:	b085      	sub	sp, #20
 8004d28:	bfb8      	it	lt
 8004d2a:	3101      	addlt	r1, #1
 8004d2c:	f7ff fede 	bl	8004aec <_Balloc>
 8004d30:	b930      	cbnz	r0, 8004d40 <__multiply+0x40>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d38:	4b40      	ldr	r3, [pc, #256]	@ (8004e3c <__multiply+0x13c>)
 8004d3a:	4841      	ldr	r0, [pc, #260]	@ (8004e40 <__multiply+0x140>)
 8004d3c:	f000 fc88 	bl	8005650 <__assert_func>
 8004d40:	f100 0414 	add.w	r4, r0, #20
 8004d44:	4623      	mov	r3, r4
 8004d46:	2200      	movs	r2, #0
 8004d48:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004d4c:	4573      	cmp	r3, lr
 8004d4e:	d320      	bcc.n	8004d92 <__multiply+0x92>
 8004d50:	f107 0814 	add.w	r8, r7, #20
 8004d54:	f109 0114 	add.w	r1, r9, #20
 8004d58:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004d5c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	1beb      	subs	r3, r5, r7
 8004d64:	3b15      	subs	r3, #21
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	3715      	adds	r7, #21
 8004d6e:	42bd      	cmp	r5, r7
 8004d70:	bf38      	it	cc
 8004d72:	2304      	movcc	r3, #4
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	9b02      	ldr	r3, [sp, #8]
 8004d78:	9103      	str	r1, [sp, #12]
 8004d7a:	428b      	cmp	r3, r1
 8004d7c:	d80c      	bhi.n	8004d98 <__multiply+0x98>
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	dd03      	ble.n	8004d8a <__multiply+0x8a>
 8004d82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d055      	beq.n	8004e36 <__multiply+0x136>
 8004d8a:	6106      	str	r6, [r0, #16]
 8004d8c:	b005      	add	sp, #20
 8004d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d92:	f843 2b04 	str.w	r2, [r3], #4
 8004d96:	e7d9      	b.n	8004d4c <__multiply+0x4c>
 8004d98:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d9c:	f1ba 0f00 	cmp.w	sl, #0
 8004da0:	d01f      	beq.n	8004de2 <__multiply+0xe2>
 8004da2:	46c4      	mov	ip, r8
 8004da4:	46a1      	mov	r9, r4
 8004da6:	2700      	movs	r7, #0
 8004da8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004dac:	f8d9 3000 	ldr.w	r3, [r9]
 8004db0:	fa1f fb82 	uxth.w	fp, r2
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	fb0a 330b 	mla	r3, sl, fp, r3
 8004dba:	443b      	add	r3, r7
 8004dbc:	f8d9 7000 	ldr.w	r7, [r9]
 8004dc0:	0c12      	lsrs	r2, r2, #16
 8004dc2:	0c3f      	lsrs	r7, r7, #16
 8004dc4:	fb0a 7202 	mla	r2, sl, r2, r7
 8004dc8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dd2:	4565      	cmp	r5, ip
 8004dd4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004dd8:	f849 3b04 	str.w	r3, [r9], #4
 8004ddc:	d8e4      	bhi.n	8004da8 <__multiply+0xa8>
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	50e7      	str	r7, [r4, r3]
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	3104      	adds	r1, #4
 8004de6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004dea:	f1b9 0f00 	cmp.w	r9, #0
 8004dee:	d020      	beq.n	8004e32 <__multiply+0x132>
 8004df0:	4647      	mov	r7, r8
 8004df2:	46a4      	mov	ip, r4
 8004df4:	f04f 0a00 	mov.w	sl, #0
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f8b7 b000 	ldrh.w	fp, [r7]
 8004dfe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	fb09 220b 	mla	r2, r9, fp, r2
 8004e08:	4452      	add	r2, sl
 8004e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8004e12:	f857 3b04 	ldr.w	r3, [r7], #4
 8004e16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e1a:	f8bc 3000 	ldrh.w	r3, [ip]
 8004e1e:	42bd      	cmp	r5, r7
 8004e20:	fb09 330a 	mla	r3, r9, sl, r3
 8004e24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004e28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e2c:	d8e5      	bhi.n	8004dfa <__multiply+0xfa>
 8004e2e:	9a01      	ldr	r2, [sp, #4]
 8004e30:	50a3      	str	r3, [r4, r2]
 8004e32:	3404      	adds	r4, #4
 8004e34:	e79f      	b.n	8004d76 <__multiply+0x76>
 8004e36:	3e01      	subs	r6, #1
 8004e38:	e7a1      	b.n	8004d7e <__multiply+0x7e>
 8004e3a:	bf00      	nop
 8004e3c:	08005de6 	.word	0x08005de6
 8004e40:	08005df7 	.word	0x08005df7

08004e44 <__pow5mult>:
 8004e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e48:	4615      	mov	r5, r2
 8004e4a:	f012 0203 	ands.w	r2, r2, #3
 8004e4e:	4607      	mov	r7, r0
 8004e50:	460e      	mov	r6, r1
 8004e52:	d007      	beq.n	8004e64 <__pow5mult+0x20>
 8004e54:	4c25      	ldr	r4, [pc, #148]	@ (8004eec <__pow5mult+0xa8>)
 8004e56:	3a01      	subs	r2, #1
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e5e:	f7ff fea7 	bl	8004bb0 <__multadd>
 8004e62:	4606      	mov	r6, r0
 8004e64:	10ad      	asrs	r5, r5, #2
 8004e66:	d03d      	beq.n	8004ee4 <__pow5mult+0xa0>
 8004e68:	69fc      	ldr	r4, [r7, #28]
 8004e6a:	b97c      	cbnz	r4, 8004e8c <__pow5mult+0x48>
 8004e6c:	2010      	movs	r0, #16
 8004e6e:	f7ff fd87 	bl	8004980 <malloc>
 8004e72:	4602      	mov	r2, r0
 8004e74:	61f8      	str	r0, [r7, #28]
 8004e76:	b928      	cbnz	r0, 8004e84 <__pow5mult+0x40>
 8004e78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef0 <__pow5mult+0xac>)
 8004e7e:	481d      	ldr	r0, [pc, #116]	@ (8004ef4 <__pow5mult+0xb0>)
 8004e80:	f000 fbe6 	bl	8005650 <__assert_func>
 8004e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e88:	6004      	str	r4, [r0, #0]
 8004e8a:	60c4      	str	r4, [r0, #12]
 8004e8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e94:	b94c      	cbnz	r4, 8004eaa <__pow5mult+0x66>
 8004e96:	f240 2171 	movw	r1, #625	@ 0x271
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f7ff ff1a 	bl	8004cd4 <__i2b>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	f04f 0900 	mov.w	r9, #0
 8004eae:	07eb      	lsls	r3, r5, #31
 8004eb0:	d50a      	bpl.n	8004ec8 <__pow5mult+0x84>
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ff22 	bl	8004d00 <__multiply>
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f7ff fe53 	bl	8004b6c <_Bfree>
 8004ec6:	4646      	mov	r6, r8
 8004ec8:	106d      	asrs	r5, r5, #1
 8004eca:	d00b      	beq.n	8004ee4 <__pow5mult+0xa0>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	b938      	cbnz	r0, 8004ee0 <__pow5mult+0x9c>
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	f7ff ff13 	bl	8004d00 <__multiply>
 8004eda:	6020      	str	r0, [r4, #0]
 8004edc:	f8c0 9000 	str.w	r9, [r0]
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e7e4      	b.n	8004eae <__pow5mult+0x6a>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eea:	bf00      	nop
 8004eec:	08005ea8 	.word	0x08005ea8
 8004ef0:	08005d77 	.word	0x08005d77
 8004ef4:	08005df7 	.word	0x08005df7

08004ef8 <__lshift>:
 8004ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	460c      	mov	r4, r1
 8004efe:	4607      	mov	r7, r0
 8004f00:	4691      	mov	r9, r2
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	6849      	ldr	r1, [r1, #4]
 8004f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f10:	f108 0601 	add.w	r6, r8, #1
 8004f14:	42b3      	cmp	r3, r6
 8004f16:	db0b      	blt.n	8004f30 <__lshift+0x38>
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f7ff fde7 	bl	8004aec <_Balloc>
 8004f1e:	4605      	mov	r5, r0
 8004f20:	b948      	cbnz	r0, 8004f36 <__lshift+0x3e>
 8004f22:	4602      	mov	r2, r0
 8004f24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f28:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <__lshift+0xd0>)
 8004f2a:	4828      	ldr	r0, [pc, #160]	@ (8004fcc <__lshift+0xd4>)
 8004f2c:	f000 fb90 	bl	8005650 <__assert_func>
 8004f30:	3101      	adds	r1, #1
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	e7ee      	b.n	8004f14 <__lshift+0x1c>
 8004f36:	2300      	movs	r3, #0
 8004f38:	f100 0114 	add.w	r1, r0, #20
 8004f3c:	f100 0210 	add.w	r2, r0, #16
 8004f40:	4618      	mov	r0, r3
 8004f42:	4553      	cmp	r3, sl
 8004f44:	db33      	blt.n	8004fae <__lshift+0xb6>
 8004f46:	6920      	ldr	r0, [r4, #16]
 8004f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f4c:	f104 0314 	add.w	r3, r4, #20
 8004f50:	f019 091f 	ands.w	r9, r9, #31
 8004f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f5c:	d02b      	beq.n	8004fb6 <__lshift+0xbe>
 8004f5e:	468a      	mov	sl, r1
 8004f60:	2200      	movs	r2, #0
 8004f62:	f1c9 0e20 	rsb	lr, r9, #32
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	fa00 f009 	lsl.w	r0, r0, r9
 8004f6c:	4310      	orrs	r0, r2
 8004f6e:	f84a 0b04 	str.w	r0, [sl], #4
 8004f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f76:	459c      	cmp	ip, r3
 8004f78:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f7c:	d8f3      	bhi.n	8004f66 <__lshift+0x6e>
 8004f7e:	ebac 0304 	sub.w	r3, ip, r4
 8004f82:	3b15      	subs	r3, #21
 8004f84:	f023 0303 	bic.w	r3, r3, #3
 8004f88:	3304      	adds	r3, #4
 8004f8a:	f104 0015 	add.w	r0, r4, #21
 8004f8e:	4560      	cmp	r0, ip
 8004f90:	bf88      	it	hi
 8004f92:	2304      	movhi	r3, #4
 8004f94:	50ca      	str	r2, [r1, r3]
 8004f96:	b10a      	cbz	r2, 8004f9c <__lshift+0xa4>
 8004f98:	f108 0602 	add.w	r6, r8, #2
 8004f9c:	3e01      	subs	r6, #1
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	612e      	str	r6, [r5, #16]
 8004fa4:	f7ff fde2 	bl	8004b6c <_Bfree>
 8004fa8:	4628      	mov	r0, r5
 8004faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	e7c5      	b.n	8004f42 <__lshift+0x4a>
 8004fb6:	3904      	subs	r1, #4
 8004fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fbc:	459c      	cmp	ip, r3
 8004fbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8004fc2:	d8f9      	bhi.n	8004fb8 <__lshift+0xc0>
 8004fc4:	e7ea      	b.n	8004f9c <__lshift+0xa4>
 8004fc6:	bf00      	nop
 8004fc8:	08005de6 	.word	0x08005de6
 8004fcc:	08005df7 	.word	0x08005df7

08004fd0 <__mcmp>:
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	690a      	ldr	r2, [r1, #16]
 8004fd4:	6900      	ldr	r0, [r0, #16]
 8004fd6:	b530      	push	{r4, r5, lr}
 8004fd8:	1a80      	subs	r0, r0, r2
 8004fda:	d10e      	bne.n	8004ffa <__mcmp+0x2a>
 8004fdc:	3314      	adds	r3, #20
 8004fde:	3114      	adds	r1, #20
 8004fe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004ff0:	4295      	cmp	r5, r2
 8004ff2:	d003      	beq.n	8004ffc <__mcmp+0x2c>
 8004ff4:	d205      	bcs.n	8005002 <__mcmp+0x32>
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	bd30      	pop	{r4, r5, pc}
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d3f3      	bcc.n	8004fe8 <__mcmp+0x18>
 8005000:	e7fb      	b.n	8004ffa <__mcmp+0x2a>
 8005002:	2001      	movs	r0, #1
 8005004:	e7f9      	b.n	8004ffa <__mcmp+0x2a>
	...

08005008 <__mdiff>:
 8005008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4689      	mov	r9, r1
 800500e:	4606      	mov	r6, r0
 8005010:	4611      	mov	r1, r2
 8005012:	4648      	mov	r0, r9
 8005014:	4614      	mov	r4, r2
 8005016:	f7ff ffdb 	bl	8004fd0 <__mcmp>
 800501a:	1e05      	subs	r5, r0, #0
 800501c:	d112      	bne.n	8005044 <__mdiff+0x3c>
 800501e:	4629      	mov	r1, r5
 8005020:	4630      	mov	r0, r6
 8005022:	f7ff fd63 	bl	8004aec <_Balloc>
 8005026:	4602      	mov	r2, r0
 8005028:	b928      	cbnz	r0, 8005036 <__mdiff+0x2e>
 800502a:	f240 2137 	movw	r1, #567	@ 0x237
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <__mdiff+0x120>)
 8005030:	483e      	ldr	r0, [pc, #248]	@ (800512c <__mdiff+0x124>)
 8005032:	f000 fb0d 	bl	8005650 <__assert_func>
 8005036:	2301      	movs	r3, #1
 8005038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800503c:	4610      	mov	r0, r2
 800503e:	b003      	add	sp, #12
 8005040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005044:	bfbc      	itt	lt
 8005046:	464b      	movlt	r3, r9
 8005048:	46a1      	movlt	r9, r4
 800504a:	4630      	mov	r0, r6
 800504c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005050:	bfba      	itte	lt
 8005052:	461c      	movlt	r4, r3
 8005054:	2501      	movlt	r5, #1
 8005056:	2500      	movge	r5, #0
 8005058:	f7ff fd48 	bl	8004aec <_Balloc>
 800505c:	4602      	mov	r2, r0
 800505e:	b918      	cbnz	r0, 8005068 <__mdiff+0x60>
 8005060:	f240 2145 	movw	r1, #581	@ 0x245
 8005064:	4b30      	ldr	r3, [pc, #192]	@ (8005128 <__mdiff+0x120>)
 8005066:	e7e3      	b.n	8005030 <__mdiff+0x28>
 8005068:	f100 0b14 	add.w	fp, r0, #20
 800506c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005070:	f109 0310 	add.w	r3, r9, #16
 8005074:	60c5      	str	r5, [r0, #12]
 8005076:	f04f 0c00 	mov.w	ip, #0
 800507a:	f109 0514 	add.w	r5, r9, #20
 800507e:	46d9      	mov	r9, fp
 8005080:	6926      	ldr	r6, [r4, #16]
 8005082:	f104 0e14 	add.w	lr, r4, #20
 8005086:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800508a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	9b01      	ldr	r3, [sp, #4]
 8005092:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005096:	f853 af04 	ldr.w	sl, [r3, #4]!
 800509a:	b281      	uxth	r1, r0
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	fa1f f38a 	uxth.w	r3, sl
 80050a2:	1a5b      	subs	r3, r3, r1
 80050a4:	0c00      	lsrs	r0, r0, #16
 80050a6:	4463      	add	r3, ip
 80050a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80050ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050b6:	4576      	cmp	r6, lr
 80050b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050bc:	f849 3b04 	str.w	r3, [r9], #4
 80050c0:	d8e6      	bhi.n	8005090 <__mdiff+0x88>
 80050c2:	1b33      	subs	r3, r6, r4
 80050c4:	3b15      	subs	r3, #21
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	3415      	adds	r4, #21
 80050cc:	3304      	adds	r3, #4
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	bf38      	it	cc
 80050d2:	2304      	movcc	r3, #4
 80050d4:	441d      	add	r5, r3
 80050d6:	445b      	add	r3, fp
 80050d8:	461e      	mov	r6, r3
 80050da:	462c      	mov	r4, r5
 80050dc:	4544      	cmp	r4, r8
 80050de:	d30e      	bcc.n	80050fe <__mdiff+0xf6>
 80050e0:	f108 0103 	add.w	r1, r8, #3
 80050e4:	1b49      	subs	r1, r1, r5
 80050e6:	f021 0103 	bic.w	r1, r1, #3
 80050ea:	3d03      	subs	r5, #3
 80050ec:	45a8      	cmp	r8, r5
 80050ee:	bf38      	it	cc
 80050f0:	2100      	movcc	r1, #0
 80050f2:	440b      	add	r3, r1
 80050f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050f8:	b199      	cbz	r1, 8005122 <__mdiff+0x11a>
 80050fa:	6117      	str	r7, [r2, #16]
 80050fc:	e79e      	b.n	800503c <__mdiff+0x34>
 80050fe:	46e6      	mov	lr, ip
 8005100:	f854 1b04 	ldr.w	r1, [r4], #4
 8005104:	fa1f fc81 	uxth.w	ip, r1
 8005108:	44f4      	add	ip, lr
 800510a:	0c08      	lsrs	r0, r1, #16
 800510c:	4471      	add	r1, lr
 800510e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005112:	b289      	uxth	r1, r1
 8005114:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005118:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800511c:	f846 1b04 	str.w	r1, [r6], #4
 8005120:	e7dc      	b.n	80050dc <__mdiff+0xd4>
 8005122:	3f01      	subs	r7, #1
 8005124:	e7e6      	b.n	80050f4 <__mdiff+0xec>
 8005126:	bf00      	nop
 8005128:	08005de6 	.word	0x08005de6
 800512c:	08005df7 	.word	0x08005df7

08005130 <__d2b>:
 8005130:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005134:	2101      	movs	r1, #1
 8005136:	4690      	mov	r8, r2
 8005138:	4699      	mov	r9, r3
 800513a:	9e08      	ldr	r6, [sp, #32]
 800513c:	f7ff fcd6 	bl	8004aec <_Balloc>
 8005140:	4604      	mov	r4, r0
 8005142:	b930      	cbnz	r0, 8005152 <__d2b+0x22>
 8005144:	4602      	mov	r2, r0
 8005146:	f240 310f 	movw	r1, #783	@ 0x30f
 800514a:	4b23      	ldr	r3, [pc, #140]	@ (80051d8 <__d2b+0xa8>)
 800514c:	4823      	ldr	r0, [pc, #140]	@ (80051dc <__d2b+0xac>)
 800514e:	f000 fa7f 	bl	8005650 <__assert_func>
 8005152:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005156:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800515a:	b10d      	cbz	r5, 8005160 <__d2b+0x30>
 800515c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	f1b8 0300 	subs.w	r3, r8, #0
 8005166:	d024      	beq.n	80051b2 <__d2b+0x82>
 8005168:	4668      	mov	r0, sp
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	f7ff fd85 	bl	8004c7a <__lo0bits>
 8005170:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005174:	b1d8      	cbz	r0, 80051ae <__d2b+0x7e>
 8005176:	f1c0 0320 	rsb	r3, r0, #32
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	430b      	orrs	r3, r1
 8005180:	40c2      	lsrs	r2, r0
 8005182:	6163      	str	r3, [r4, #20]
 8005184:	9201      	str	r2, [sp, #4]
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2201      	moveq	r2, #1
 800518e:	2202      	movne	r2, #2
 8005190:	61a3      	str	r3, [r4, #24]
 8005192:	6122      	str	r2, [r4, #16]
 8005194:	b1ad      	cbz	r5, 80051c2 <__d2b+0x92>
 8005196:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800519a:	4405      	add	r5, r0
 800519c:	6035      	str	r5, [r6, #0]
 800519e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	6018      	str	r0, [r3, #0]
 80051a6:	4620      	mov	r0, r4
 80051a8:	b002      	add	sp, #8
 80051aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80051ae:	6161      	str	r1, [r4, #20]
 80051b0:	e7e9      	b.n	8005186 <__d2b+0x56>
 80051b2:	a801      	add	r0, sp, #4
 80051b4:	f7ff fd61 	bl	8004c7a <__lo0bits>
 80051b8:	9b01      	ldr	r3, [sp, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	6163      	str	r3, [r4, #20]
 80051be:	3020      	adds	r0, #32
 80051c0:	e7e7      	b.n	8005192 <__d2b+0x62>
 80051c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051ca:	6030      	str	r0, [r6, #0]
 80051cc:	6918      	ldr	r0, [r3, #16]
 80051ce:	f7ff fd35 	bl	8004c3c <__hi0bits>
 80051d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051d6:	e7e4      	b.n	80051a2 <__d2b+0x72>
 80051d8:	08005de6 	.word	0x08005de6
 80051dc:	08005df7 	.word	0x08005df7

080051e0 <__ssputs_r>:
 80051e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	461f      	mov	r7, r3
 80051e6:	688e      	ldr	r6, [r1, #8]
 80051e8:	4682      	mov	sl, r0
 80051ea:	42be      	cmp	r6, r7
 80051ec:	460c      	mov	r4, r1
 80051ee:	4690      	mov	r8, r2
 80051f0:	680b      	ldr	r3, [r1, #0]
 80051f2:	d82d      	bhi.n	8005250 <__ssputs_r+0x70>
 80051f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051fc:	d026      	beq.n	800524c <__ssputs_r+0x6c>
 80051fe:	6965      	ldr	r5, [r4, #20]
 8005200:	6909      	ldr	r1, [r1, #16]
 8005202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005206:	eba3 0901 	sub.w	r9, r3, r1
 800520a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800520e:	1c7b      	adds	r3, r7, #1
 8005210:	444b      	add	r3, r9
 8005212:	106d      	asrs	r5, r5, #1
 8005214:	429d      	cmp	r5, r3
 8005216:	bf38      	it	cc
 8005218:	461d      	movcc	r5, r3
 800521a:	0553      	lsls	r3, r2, #21
 800521c:	d527      	bpl.n	800526e <__ssputs_r+0x8e>
 800521e:	4629      	mov	r1, r5
 8005220:	f7ff fbd8 	bl	80049d4 <_malloc_r>
 8005224:	4606      	mov	r6, r0
 8005226:	b360      	cbz	r0, 8005282 <__ssputs_r+0xa2>
 8005228:	464a      	mov	r2, r9
 800522a:	6921      	ldr	r1, [r4, #16]
 800522c:	f000 fa02 	bl	8005634 <memcpy>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	6126      	str	r6, [r4, #16]
 800523e:	444e      	add	r6, r9
 8005240:	6026      	str	r6, [r4, #0]
 8005242:	463e      	mov	r6, r7
 8005244:	6165      	str	r5, [r4, #20]
 8005246:	eba5 0509 	sub.w	r5, r5, r9
 800524a:	60a5      	str	r5, [r4, #8]
 800524c:	42be      	cmp	r6, r7
 800524e:	d900      	bls.n	8005252 <__ssputs_r+0x72>
 8005250:	463e      	mov	r6, r7
 8005252:	4632      	mov	r2, r6
 8005254:	4641      	mov	r1, r8
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	f000 f9c2 	bl	80055e0 <memmove>
 800525c:	2000      	movs	r0, #0
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	1b9b      	subs	r3, r3, r6
 8005262:	60a3      	str	r3, [r4, #8]
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	4433      	add	r3, r6
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	462a      	mov	r2, r5
 8005270:	f000 fa32 	bl	80056d8 <_realloc_r>
 8005274:	4606      	mov	r6, r0
 8005276:	2800      	cmp	r0, #0
 8005278:	d1e0      	bne.n	800523c <__ssputs_r+0x5c>
 800527a:	4650      	mov	r0, sl
 800527c:	6921      	ldr	r1, [r4, #16]
 800527e:	f7ff fb37 	bl	80048f0 <_free_r>
 8005282:	230c      	movs	r3, #12
 8005284:	f8ca 3000 	str.w	r3, [sl]
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f04f 30ff 	mov.w	r0, #4294967295
 800528e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	e7e9      	b.n	800526a <__ssputs_r+0x8a>
	...

08005298 <_svfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	4698      	mov	r8, r3
 800529e:	898b      	ldrh	r3, [r1, #12]
 80052a0:	4607      	mov	r7, r0
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	460d      	mov	r5, r1
 80052a6:	4614      	mov	r4, r2
 80052a8:	b09d      	sub	sp, #116	@ 0x74
 80052aa:	d510      	bpl.n	80052ce <_svfiprintf_r+0x36>
 80052ac:	690b      	ldr	r3, [r1, #16]
 80052ae:	b973      	cbnz	r3, 80052ce <_svfiprintf_r+0x36>
 80052b0:	2140      	movs	r1, #64	@ 0x40
 80052b2:	f7ff fb8f 	bl	80049d4 <_malloc_r>
 80052b6:	6028      	str	r0, [r5, #0]
 80052b8:	6128      	str	r0, [r5, #16]
 80052ba:	b930      	cbnz	r0, 80052ca <_svfiprintf_r+0x32>
 80052bc:	230c      	movs	r3, #12
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	b01d      	add	sp, #116	@ 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	2340      	movs	r3, #64	@ 0x40
 80052cc:	616b      	str	r3, [r5, #20]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052d2:	2320      	movs	r3, #32
 80052d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052d8:	2330      	movs	r3, #48	@ 0x30
 80052da:	f04f 0901 	mov.w	r9, #1
 80052de:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800547c <_svfiprintf_r+0x1e4>
 80052e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052ea:	4623      	mov	r3, r4
 80052ec:	469a      	mov	sl, r3
 80052ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f2:	b10a      	cbz	r2, 80052f8 <_svfiprintf_r+0x60>
 80052f4:	2a25      	cmp	r2, #37	@ 0x25
 80052f6:	d1f9      	bne.n	80052ec <_svfiprintf_r+0x54>
 80052f8:	ebba 0b04 	subs.w	fp, sl, r4
 80052fc:	d00b      	beq.n	8005316 <_svfiprintf_r+0x7e>
 80052fe:	465b      	mov	r3, fp
 8005300:	4622      	mov	r2, r4
 8005302:	4629      	mov	r1, r5
 8005304:	4638      	mov	r0, r7
 8005306:	f7ff ff6b 	bl	80051e0 <__ssputs_r>
 800530a:	3001      	adds	r0, #1
 800530c:	f000 80a7 	beq.w	800545e <_svfiprintf_r+0x1c6>
 8005310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005312:	445a      	add	r2, fp
 8005314:	9209      	str	r2, [sp, #36]	@ 0x24
 8005316:	f89a 3000 	ldrb.w	r3, [sl]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 809f 	beq.w	800545e <_svfiprintf_r+0x1c6>
 8005320:	2300      	movs	r3, #0
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532a:	f10a 0a01 	add.w	sl, sl, #1
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005336:	931a      	str	r3, [sp, #104]	@ 0x68
 8005338:	4654      	mov	r4, sl
 800533a:	2205      	movs	r2, #5
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	484e      	ldr	r0, [pc, #312]	@ (800547c <_svfiprintf_r+0x1e4>)
 8005342:	f7fe fc68 	bl	8003c16 <memchr>
 8005346:	9a04      	ldr	r2, [sp, #16]
 8005348:	b9d8      	cbnz	r0, 8005382 <_svfiprintf_r+0xea>
 800534a:	06d0      	lsls	r0, r2, #27
 800534c:	bf44      	itt	mi
 800534e:	2320      	movmi	r3, #32
 8005350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005354:	0711      	lsls	r1, r2, #28
 8005356:	bf44      	itt	mi
 8005358:	232b      	movmi	r3, #43	@ 0x2b
 800535a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800535e:	f89a 3000 	ldrb.w	r3, [sl]
 8005362:	2b2a      	cmp	r3, #42	@ 0x2a
 8005364:	d015      	beq.n	8005392 <_svfiprintf_r+0xfa>
 8005366:	4654      	mov	r4, sl
 8005368:	2000      	movs	r0, #0
 800536a:	f04f 0c0a 	mov.w	ip, #10
 800536e:	9a07      	ldr	r2, [sp, #28]
 8005370:	4621      	mov	r1, r4
 8005372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005376:	3b30      	subs	r3, #48	@ 0x30
 8005378:	2b09      	cmp	r3, #9
 800537a:	d94b      	bls.n	8005414 <_svfiprintf_r+0x17c>
 800537c:	b1b0      	cbz	r0, 80053ac <_svfiprintf_r+0x114>
 800537e:	9207      	str	r2, [sp, #28]
 8005380:	e014      	b.n	80053ac <_svfiprintf_r+0x114>
 8005382:	eba0 0308 	sub.w	r3, r0, r8
 8005386:	fa09 f303 	lsl.w	r3, r9, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	46a2      	mov	sl, r4
 800538e:	9304      	str	r3, [sp, #16]
 8005390:	e7d2      	b.n	8005338 <_svfiprintf_r+0xa0>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	1d19      	adds	r1, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9103      	str	r1, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfbb      	ittet	lt
 800539e:	425b      	neglt	r3, r3
 80053a0:	f042 0202 	orrlt.w	r2, r2, #2
 80053a4:	9307      	strge	r3, [sp, #28]
 80053a6:	9307      	strlt	r3, [sp, #28]
 80053a8:	bfb8      	it	lt
 80053aa:	9204      	strlt	r2, [sp, #16]
 80053ac:	7823      	ldrb	r3, [r4, #0]
 80053ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80053b0:	d10a      	bne.n	80053c8 <_svfiprintf_r+0x130>
 80053b2:	7863      	ldrb	r3, [r4, #1]
 80053b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b6:	d132      	bne.n	800541e <_svfiprintf_r+0x186>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	3402      	adds	r4, #2
 80053bc:	1d1a      	adds	r2, r3, #4
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	9203      	str	r2, [sp, #12]
 80053c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005480 <_svfiprintf_r+0x1e8>
 80053cc:	2203      	movs	r2, #3
 80053ce:	4650      	mov	r0, sl
 80053d0:	7821      	ldrb	r1, [r4, #0]
 80053d2:	f7fe fc20 	bl	8003c16 <memchr>
 80053d6:	b138      	cbz	r0, 80053e8 <_svfiprintf_r+0x150>
 80053d8:	2240      	movs	r2, #64	@ 0x40
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	eba0 000a 	sub.w	r0, r0, sl
 80053e0:	4082      	lsls	r2, r0
 80053e2:	4313      	orrs	r3, r2
 80053e4:	3401      	adds	r4, #1
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ec:	2206      	movs	r2, #6
 80053ee:	4825      	ldr	r0, [pc, #148]	@ (8005484 <_svfiprintf_r+0x1ec>)
 80053f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053f4:	f7fe fc0f 	bl	8003c16 <memchr>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d036      	beq.n	800546a <_svfiprintf_r+0x1d2>
 80053fc:	4b22      	ldr	r3, [pc, #136]	@ (8005488 <_svfiprintf_r+0x1f0>)
 80053fe:	bb1b      	cbnz	r3, 8005448 <_svfiprintf_r+0x1b0>
 8005400:	9b03      	ldr	r3, [sp, #12]
 8005402:	3307      	adds	r3, #7
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	3308      	adds	r3, #8
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800540e:	4433      	add	r3, r6
 8005410:	9309      	str	r3, [sp, #36]	@ 0x24
 8005412:	e76a      	b.n	80052ea <_svfiprintf_r+0x52>
 8005414:	460c      	mov	r4, r1
 8005416:	2001      	movs	r0, #1
 8005418:	fb0c 3202 	mla	r2, ip, r2, r3
 800541c:	e7a8      	b.n	8005370 <_svfiprintf_r+0xd8>
 800541e:	2300      	movs	r3, #0
 8005420:	f04f 0c0a 	mov.w	ip, #10
 8005424:	4619      	mov	r1, r3
 8005426:	3401      	adds	r4, #1
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	4620      	mov	r0, r4
 800542c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005430:	3a30      	subs	r2, #48	@ 0x30
 8005432:	2a09      	cmp	r2, #9
 8005434:	d903      	bls.n	800543e <_svfiprintf_r+0x1a6>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0c6      	beq.n	80053c8 <_svfiprintf_r+0x130>
 800543a:	9105      	str	r1, [sp, #20]
 800543c:	e7c4      	b.n	80053c8 <_svfiprintf_r+0x130>
 800543e:	4604      	mov	r4, r0
 8005440:	2301      	movs	r3, #1
 8005442:	fb0c 2101 	mla	r1, ip, r1, r2
 8005446:	e7f0      	b.n	800542a <_svfiprintf_r+0x192>
 8005448:	ab03      	add	r3, sp, #12
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	462a      	mov	r2, r5
 800544e:	4638      	mov	r0, r7
 8005450:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <_svfiprintf_r+0x1f4>)
 8005452:	a904      	add	r1, sp, #16
 8005454:	f7fd fe7c 	bl	8003150 <_printf_float>
 8005458:	1c42      	adds	r2, r0, #1
 800545a:	4606      	mov	r6, r0
 800545c:	d1d6      	bne.n	800540c <_svfiprintf_r+0x174>
 800545e:	89ab      	ldrh	r3, [r5, #12]
 8005460:	065b      	lsls	r3, r3, #25
 8005462:	f53f af2d 	bmi.w	80052c0 <_svfiprintf_r+0x28>
 8005466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005468:	e72c      	b.n	80052c4 <_svfiprintf_r+0x2c>
 800546a:	ab03      	add	r3, sp, #12
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	462a      	mov	r2, r5
 8005470:	4638      	mov	r0, r7
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <_svfiprintf_r+0x1f4>)
 8005474:	a904      	add	r1, sp, #16
 8005476:	f7fe f909 	bl	800368c <_printf_i>
 800547a:	e7ed      	b.n	8005458 <_svfiprintf_r+0x1c0>
 800547c:	08005e50 	.word	0x08005e50
 8005480:	08005e56 	.word	0x08005e56
 8005484:	08005e5a 	.word	0x08005e5a
 8005488:	08003151 	.word	0x08003151
 800548c:	080051e1 	.word	0x080051e1

08005490 <__sflush_r>:
 8005490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	0716      	lsls	r6, r2, #28
 8005498:	4605      	mov	r5, r0
 800549a:	460c      	mov	r4, r1
 800549c:	d454      	bmi.n	8005548 <__sflush_r+0xb8>
 800549e:	684b      	ldr	r3, [r1, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc02      	bgt.n	80054aa <__sflush_r+0x1a>
 80054a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dd48      	ble.n	800553c <__sflush_r+0xac>
 80054aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	d045      	beq.n	800553c <__sflush_r+0xac>
 80054b0:	2300      	movs	r3, #0
 80054b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80054b6:	682f      	ldr	r7, [r5, #0]
 80054b8:	6a21      	ldr	r1, [r4, #32]
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	d030      	beq.n	8005520 <__sflush_r+0x90>
 80054be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	0759      	lsls	r1, r3, #29
 80054c4:	d505      	bpl.n	80054d2 <__sflush_r+0x42>
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054cc:	b10b      	cbz	r3, 80054d2 <__sflush_r+0x42>
 80054ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054d0:	1ad2      	subs	r2, r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	4628      	mov	r0, r5
 80054d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054d8:	6a21      	ldr	r1, [r4, #32]
 80054da:	47b0      	blx	r6
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	d106      	bne.n	80054f0 <__sflush_r+0x60>
 80054e2:	6829      	ldr	r1, [r5, #0]
 80054e4:	291d      	cmp	r1, #29
 80054e6:	d82b      	bhi.n	8005540 <__sflush_r+0xb0>
 80054e8:	4a28      	ldr	r2, [pc, #160]	@ (800558c <__sflush_r+0xfc>)
 80054ea:	40ca      	lsrs	r2, r1
 80054ec:	07d6      	lsls	r6, r2, #31
 80054ee:	d527      	bpl.n	8005540 <__sflush_r+0xb0>
 80054f0:	2200      	movs	r2, #0
 80054f2:	6062      	str	r2, [r4, #4]
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	04d9      	lsls	r1, r3, #19
 80054f8:	6022      	str	r2, [r4, #0]
 80054fa:	d504      	bpl.n	8005506 <__sflush_r+0x76>
 80054fc:	1c42      	adds	r2, r0, #1
 80054fe:	d101      	bne.n	8005504 <__sflush_r+0x74>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b903      	cbnz	r3, 8005506 <__sflush_r+0x76>
 8005504:	6560      	str	r0, [r4, #84]	@ 0x54
 8005506:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005508:	602f      	str	r7, [r5, #0]
 800550a:	b1b9      	cbz	r1, 800553c <__sflush_r+0xac>
 800550c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <__sflush_r+0x8a>
 8005514:	4628      	mov	r0, r5
 8005516:	f7ff f9eb 	bl	80048f0 <_free_r>
 800551a:	2300      	movs	r3, #0
 800551c:	6363      	str	r3, [r4, #52]	@ 0x34
 800551e:	e00d      	b.n	800553c <__sflush_r+0xac>
 8005520:	2301      	movs	r3, #1
 8005522:	4628      	mov	r0, r5
 8005524:	47b0      	blx	r6
 8005526:	4602      	mov	r2, r0
 8005528:	1c50      	adds	r0, r2, #1
 800552a:	d1c9      	bne.n	80054c0 <__sflush_r+0x30>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0c6      	beq.n	80054c0 <__sflush_r+0x30>
 8005532:	2b1d      	cmp	r3, #29
 8005534:	d001      	beq.n	800553a <__sflush_r+0xaa>
 8005536:	2b16      	cmp	r3, #22
 8005538:	d11d      	bne.n	8005576 <__sflush_r+0xe6>
 800553a:	602f      	str	r7, [r5, #0]
 800553c:	2000      	movs	r0, #0
 800553e:	e021      	b.n	8005584 <__sflush_r+0xf4>
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	b21b      	sxth	r3, r3
 8005546:	e01a      	b.n	800557e <__sflush_r+0xee>
 8005548:	690f      	ldr	r7, [r1, #16]
 800554a:	2f00      	cmp	r7, #0
 800554c:	d0f6      	beq.n	800553c <__sflush_r+0xac>
 800554e:	0793      	lsls	r3, r2, #30
 8005550:	bf18      	it	ne
 8005552:	2300      	movne	r3, #0
 8005554:	680e      	ldr	r6, [r1, #0]
 8005556:	bf08      	it	eq
 8005558:	694b      	ldreq	r3, [r1, #20]
 800555a:	1bf6      	subs	r6, r6, r7
 800555c:	600f      	str	r7, [r1, #0]
 800555e:	608b      	str	r3, [r1, #8]
 8005560:	2e00      	cmp	r6, #0
 8005562:	ddeb      	ble.n	800553c <__sflush_r+0xac>
 8005564:	4633      	mov	r3, r6
 8005566:	463a      	mov	r2, r7
 8005568:	4628      	mov	r0, r5
 800556a:	6a21      	ldr	r1, [r4, #32]
 800556c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005570:	47e0      	blx	ip
 8005572:	2800      	cmp	r0, #0
 8005574:	dc07      	bgt.n	8005586 <__sflush_r+0xf6>
 8005576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005586:	4407      	add	r7, r0
 8005588:	1a36      	subs	r6, r6, r0
 800558a:	e7e9      	b.n	8005560 <__sflush_r+0xd0>
 800558c:	20400001 	.word	0x20400001

08005590 <_fflush_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	690b      	ldr	r3, [r1, #16]
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
 8005598:	b913      	cbnz	r3, 80055a0 <_fflush_r+0x10>
 800559a:	2500      	movs	r5, #0
 800559c:	4628      	mov	r0, r5
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	b118      	cbz	r0, 80055aa <_fflush_r+0x1a>
 80055a2:	6a03      	ldr	r3, [r0, #32]
 80055a4:	b90b      	cbnz	r3, 80055aa <_fflush_r+0x1a>
 80055a6:	f7fe fa1b 	bl	80039e0 <__sinit>
 80055aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f3      	beq.n	800559a <_fflush_r+0xa>
 80055b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80055b4:	07d0      	lsls	r0, r2, #31
 80055b6:	d404      	bmi.n	80055c2 <_fflush_r+0x32>
 80055b8:	0599      	lsls	r1, r3, #22
 80055ba:	d402      	bmi.n	80055c2 <_fflush_r+0x32>
 80055bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055be:	f7fe fb28 	bl	8003c12 <__retarget_lock_acquire_recursive>
 80055c2:	4628      	mov	r0, r5
 80055c4:	4621      	mov	r1, r4
 80055c6:	f7ff ff63 	bl	8005490 <__sflush_r>
 80055ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055cc:	4605      	mov	r5, r0
 80055ce:	07da      	lsls	r2, r3, #31
 80055d0:	d4e4      	bmi.n	800559c <_fflush_r+0xc>
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	059b      	lsls	r3, r3, #22
 80055d6:	d4e1      	bmi.n	800559c <_fflush_r+0xc>
 80055d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055da:	f7fe fb1b 	bl	8003c14 <__retarget_lock_release_recursive>
 80055de:	e7dd      	b.n	800559c <_fflush_r+0xc>

080055e0 <memmove>:
 80055e0:	4288      	cmp	r0, r1
 80055e2:	b510      	push	{r4, lr}
 80055e4:	eb01 0402 	add.w	r4, r1, r2
 80055e8:	d902      	bls.n	80055f0 <memmove+0x10>
 80055ea:	4284      	cmp	r4, r0
 80055ec:	4623      	mov	r3, r4
 80055ee:	d807      	bhi.n	8005600 <memmove+0x20>
 80055f0:	1e43      	subs	r3, r0, #1
 80055f2:	42a1      	cmp	r1, r4
 80055f4:	d008      	beq.n	8005608 <memmove+0x28>
 80055f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055fe:	e7f8      	b.n	80055f2 <memmove+0x12>
 8005600:	4601      	mov	r1, r0
 8005602:	4402      	add	r2, r0
 8005604:	428a      	cmp	r2, r1
 8005606:	d100      	bne.n	800560a <memmove+0x2a>
 8005608:	bd10      	pop	{r4, pc}
 800560a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800560e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005612:	e7f7      	b.n	8005604 <memmove+0x24>

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	2300      	movs	r3, #0
 8005618:	4d05      	ldr	r5, [pc, #20]	@ (8005630 <_sbrk_r+0x1c>)
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb fd66 	bl	80010f0 <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	200003ac 	.word	0x200003ac

08005634 <memcpy>:
 8005634:	440a      	add	r2, r1
 8005636:	4291      	cmp	r1, r2
 8005638:	f100 33ff 	add.w	r3, r0, #4294967295
 800563c:	d100      	bne.n	8005640 <memcpy+0xc>
 800563e:	4770      	bx	lr
 8005640:	b510      	push	{r4, lr}
 8005642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005646:	4291      	cmp	r1, r2
 8005648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564c:	d1f9      	bne.n	8005642 <memcpy+0xe>
 800564e:	bd10      	pop	{r4, pc}

08005650 <__assert_func>:
 8005650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005652:	4614      	mov	r4, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <__assert_func+0x2c>)
 8005658:	4605      	mov	r5, r0
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68d8      	ldr	r0, [r3, #12]
 800565e:	b14c      	cbz	r4, 8005674 <__assert_func+0x24>
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <__assert_func+0x30>)
 8005662:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005666:	9100      	str	r1, [sp, #0]
 8005668:	462b      	mov	r3, r5
 800566a:	4906      	ldr	r1, [pc, #24]	@ (8005684 <__assert_func+0x34>)
 800566c:	f000 f870 	bl	8005750 <fiprintf>
 8005670:	f000 f880 	bl	8005774 <abort>
 8005674:	4b04      	ldr	r3, [pc, #16]	@ (8005688 <__assert_func+0x38>)
 8005676:	461c      	mov	r4, r3
 8005678:	e7f3      	b.n	8005662 <__assert_func+0x12>
 800567a:	bf00      	nop
 800567c:	20000018 	.word	0x20000018
 8005680:	08005e6b 	.word	0x08005e6b
 8005684:	08005e78 	.word	0x08005e78
 8005688:	08005ea6 	.word	0x08005ea6

0800568c <_calloc_r>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	fba1 5402 	umull	r5, r4, r1, r2
 8005692:	b934      	cbnz	r4, 80056a2 <_calloc_r+0x16>
 8005694:	4629      	mov	r1, r5
 8005696:	f7ff f99d 	bl	80049d4 <_malloc_r>
 800569a:	4606      	mov	r6, r0
 800569c:	b928      	cbnz	r0, 80056aa <_calloc_r+0x1e>
 800569e:	4630      	mov	r0, r6
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	220c      	movs	r2, #12
 80056a4:	2600      	movs	r6, #0
 80056a6:	6002      	str	r2, [r0, #0]
 80056a8:	e7f9      	b.n	800569e <_calloc_r+0x12>
 80056aa:	462a      	mov	r2, r5
 80056ac:	4621      	mov	r1, r4
 80056ae:	f7fe fa32 	bl	8003b16 <memset>
 80056b2:	e7f4      	b.n	800569e <_calloc_r+0x12>

080056b4 <__ascii_mbtowc>:
 80056b4:	b082      	sub	sp, #8
 80056b6:	b901      	cbnz	r1, 80056ba <__ascii_mbtowc+0x6>
 80056b8:	a901      	add	r1, sp, #4
 80056ba:	b142      	cbz	r2, 80056ce <__ascii_mbtowc+0x1a>
 80056bc:	b14b      	cbz	r3, 80056d2 <__ascii_mbtowc+0x1e>
 80056be:	7813      	ldrb	r3, [r2, #0]
 80056c0:	600b      	str	r3, [r1, #0]
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	1e10      	subs	r0, r2, #0
 80056c6:	bf18      	it	ne
 80056c8:	2001      	movne	r0, #1
 80056ca:	b002      	add	sp, #8
 80056cc:	4770      	bx	lr
 80056ce:	4610      	mov	r0, r2
 80056d0:	e7fb      	b.n	80056ca <__ascii_mbtowc+0x16>
 80056d2:	f06f 0001 	mvn.w	r0, #1
 80056d6:	e7f8      	b.n	80056ca <__ascii_mbtowc+0x16>

080056d8 <_realloc_r>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	4607      	mov	r7, r0
 80056de:	4614      	mov	r4, r2
 80056e0:	460d      	mov	r5, r1
 80056e2:	b921      	cbnz	r1, 80056ee <_realloc_r+0x16>
 80056e4:	4611      	mov	r1, r2
 80056e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ea:	f7ff b973 	b.w	80049d4 <_malloc_r>
 80056ee:	b92a      	cbnz	r2, 80056fc <_realloc_r+0x24>
 80056f0:	f7ff f8fe 	bl	80048f0 <_free_r>
 80056f4:	4625      	mov	r5, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056fc:	f000 f841 	bl	8005782 <_malloc_usable_size_r>
 8005700:	4284      	cmp	r4, r0
 8005702:	4606      	mov	r6, r0
 8005704:	d802      	bhi.n	800570c <_realloc_r+0x34>
 8005706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800570a:	d8f4      	bhi.n	80056f6 <_realloc_r+0x1e>
 800570c:	4621      	mov	r1, r4
 800570e:	4638      	mov	r0, r7
 8005710:	f7ff f960 	bl	80049d4 <_malloc_r>
 8005714:	4680      	mov	r8, r0
 8005716:	b908      	cbnz	r0, 800571c <_realloc_r+0x44>
 8005718:	4645      	mov	r5, r8
 800571a:	e7ec      	b.n	80056f6 <_realloc_r+0x1e>
 800571c:	42b4      	cmp	r4, r6
 800571e:	4622      	mov	r2, r4
 8005720:	4629      	mov	r1, r5
 8005722:	bf28      	it	cs
 8005724:	4632      	movcs	r2, r6
 8005726:	f7ff ff85 	bl	8005634 <memcpy>
 800572a:	4629      	mov	r1, r5
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff f8df 	bl	80048f0 <_free_r>
 8005732:	e7f1      	b.n	8005718 <_realloc_r+0x40>

08005734 <__ascii_wctomb>:
 8005734:	4603      	mov	r3, r0
 8005736:	4608      	mov	r0, r1
 8005738:	b141      	cbz	r1, 800574c <__ascii_wctomb+0x18>
 800573a:	2aff      	cmp	r2, #255	@ 0xff
 800573c:	d904      	bls.n	8005748 <__ascii_wctomb+0x14>
 800573e:	228a      	movs	r2, #138	@ 0x8a
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	4770      	bx	lr
 8005748:	2001      	movs	r0, #1
 800574a:	700a      	strb	r2, [r1, #0]
 800574c:	4770      	bx	lr
	...

08005750 <fiprintf>:
 8005750:	b40e      	push	{r1, r2, r3}
 8005752:	b503      	push	{r0, r1, lr}
 8005754:	4601      	mov	r1, r0
 8005756:	ab03      	add	r3, sp, #12
 8005758:	4805      	ldr	r0, [pc, #20]	@ (8005770 <fiprintf+0x20>)
 800575a:	f853 2b04 	ldr.w	r2, [r3], #4
 800575e:	6800      	ldr	r0, [r0, #0]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	f000 f83d 	bl	80057e0 <_vfiprintf_r>
 8005766:	b002      	add	sp, #8
 8005768:	f85d eb04 	ldr.w	lr, [sp], #4
 800576c:	b003      	add	sp, #12
 800576e:	4770      	bx	lr
 8005770:	20000018 	.word	0x20000018

08005774 <abort>:
 8005774:	2006      	movs	r0, #6
 8005776:	b508      	push	{r3, lr}
 8005778:	f000 fa06 	bl	8005b88 <raise>
 800577c:	2001      	movs	r0, #1
 800577e:	f7fb fc42 	bl	8001006 <_exit>

08005782 <_malloc_usable_size_r>:
 8005782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005786:	1f18      	subs	r0, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	bfbc      	itt	lt
 800578c:	580b      	ldrlt	r3, [r1, r0]
 800578e:	18c0      	addlt	r0, r0, r3
 8005790:	4770      	bx	lr

08005792 <__sfputc_r>:
 8005792:	6893      	ldr	r3, [r2, #8]
 8005794:	b410      	push	{r4}
 8005796:	3b01      	subs	r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	6093      	str	r3, [r2, #8]
 800579c:	da07      	bge.n	80057ae <__sfputc_r+0x1c>
 800579e:	6994      	ldr	r4, [r2, #24]
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	db01      	blt.n	80057a8 <__sfputc_r+0x16>
 80057a4:	290a      	cmp	r1, #10
 80057a6:	d102      	bne.n	80057ae <__sfputc_r+0x1c>
 80057a8:	bc10      	pop	{r4}
 80057aa:	f000 b931 	b.w	8005a10 <__swbuf_r>
 80057ae:	6813      	ldr	r3, [r2, #0]
 80057b0:	1c58      	adds	r0, r3, #1
 80057b2:	6010      	str	r0, [r2, #0]
 80057b4:	7019      	strb	r1, [r3, #0]
 80057b6:	4608      	mov	r0, r1
 80057b8:	bc10      	pop	{r4}
 80057ba:	4770      	bx	lr

080057bc <__sfputs_r>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	4606      	mov	r6, r0
 80057c0:	460f      	mov	r7, r1
 80057c2:	4614      	mov	r4, r2
 80057c4:	18d5      	adds	r5, r2, r3
 80057c6:	42ac      	cmp	r4, r5
 80057c8:	d101      	bne.n	80057ce <__sfputs_r+0x12>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e007      	b.n	80057de <__sfputs_r+0x22>
 80057ce:	463a      	mov	r2, r7
 80057d0:	4630      	mov	r0, r6
 80057d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d6:	f7ff ffdc 	bl	8005792 <__sfputc_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	d1f3      	bne.n	80057c6 <__sfputs_r+0xa>
 80057de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057e0 <_vfiprintf_r>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	460d      	mov	r5, r1
 80057e6:	4614      	mov	r4, r2
 80057e8:	4698      	mov	r8, r3
 80057ea:	4606      	mov	r6, r0
 80057ec:	b09d      	sub	sp, #116	@ 0x74
 80057ee:	b118      	cbz	r0, 80057f8 <_vfiprintf_r+0x18>
 80057f0:	6a03      	ldr	r3, [r0, #32]
 80057f2:	b90b      	cbnz	r3, 80057f8 <_vfiprintf_r+0x18>
 80057f4:	f7fe f8f4 	bl	80039e0 <__sinit>
 80057f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057fa:	07d9      	lsls	r1, r3, #31
 80057fc:	d405      	bmi.n	800580a <_vfiprintf_r+0x2a>
 80057fe:	89ab      	ldrh	r3, [r5, #12]
 8005800:	059a      	lsls	r2, r3, #22
 8005802:	d402      	bmi.n	800580a <_vfiprintf_r+0x2a>
 8005804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005806:	f7fe fa04 	bl	8003c12 <__retarget_lock_acquire_recursive>
 800580a:	89ab      	ldrh	r3, [r5, #12]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	d501      	bpl.n	8005814 <_vfiprintf_r+0x34>
 8005810:	692b      	ldr	r3, [r5, #16]
 8005812:	b99b      	cbnz	r3, 800583c <_vfiprintf_r+0x5c>
 8005814:	4629      	mov	r1, r5
 8005816:	4630      	mov	r0, r6
 8005818:	f000 f938 	bl	8005a8c <__swsetup_r>
 800581c:	b170      	cbz	r0, 800583c <_vfiprintf_r+0x5c>
 800581e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005820:	07dc      	lsls	r4, r3, #31
 8005822:	d504      	bpl.n	800582e <_vfiprintf_r+0x4e>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b01d      	add	sp, #116	@ 0x74
 800582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	0598      	lsls	r0, r3, #22
 8005832:	d4f7      	bmi.n	8005824 <_vfiprintf_r+0x44>
 8005834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005836:	f7fe f9ed 	bl	8003c14 <__retarget_lock_release_recursive>
 800583a:	e7f3      	b.n	8005824 <_vfiprintf_r+0x44>
 800583c:	2300      	movs	r3, #0
 800583e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005840:	2320      	movs	r3, #32
 8005842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005846:	2330      	movs	r3, #48	@ 0x30
 8005848:	f04f 0901 	mov.w	r9, #1
 800584c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005850:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80059fc <_vfiprintf_r+0x21c>
 8005854:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005858:	4623      	mov	r3, r4
 800585a:	469a      	mov	sl, r3
 800585c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005860:	b10a      	cbz	r2, 8005866 <_vfiprintf_r+0x86>
 8005862:	2a25      	cmp	r2, #37	@ 0x25
 8005864:	d1f9      	bne.n	800585a <_vfiprintf_r+0x7a>
 8005866:	ebba 0b04 	subs.w	fp, sl, r4
 800586a:	d00b      	beq.n	8005884 <_vfiprintf_r+0xa4>
 800586c:	465b      	mov	r3, fp
 800586e:	4622      	mov	r2, r4
 8005870:	4629      	mov	r1, r5
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff ffa2 	bl	80057bc <__sfputs_r>
 8005878:	3001      	adds	r0, #1
 800587a:	f000 80a7 	beq.w	80059cc <_vfiprintf_r+0x1ec>
 800587e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005880:	445a      	add	r2, fp
 8005882:	9209      	str	r2, [sp, #36]	@ 0x24
 8005884:	f89a 3000 	ldrb.w	r3, [sl]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 809f 	beq.w	80059cc <_vfiprintf_r+0x1ec>
 800588e:	2300      	movs	r3, #0
 8005890:	f04f 32ff 	mov.w	r2, #4294967295
 8005894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005898:	f10a 0a01 	add.w	sl, sl, #1
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	9307      	str	r3, [sp, #28]
 80058a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80058a6:	4654      	mov	r4, sl
 80058a8:	2205      	movs	r2, #5
 80058aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ae:	4853      	ldr	r0, [pc, #332]	@ (80059fc <_vfiprintf_r+0x21c>)
 80058b0:	f7fe f9b1 	bl	8003c16 <memchr>
 80058b4:	9a04      	ldr	r2, [sp, #16]
 80058b6:	b9d8      	cbnz	r0, 80058f0 <_vfiprintf_r+0x110>
 80058b8:	06d1      	lsls	r1, r2, #27
 80058ba:	bf44      	itt	mi
 80058bc:	2320      	movmi	r3, #32
 80058be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c2:	0713      	lsls	r3, r2, #28
 80058c4:	bf44      	itt	mi
 80058c6:	232b      	movmi	r3, #43	@ 0x2b
 80058c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058cc:	f89a 3000 	ldrb.w	r3, [sl]
 80058d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d2:	d015      	beq.n	8005900 <_vfiprintf_r+0x120>
 80058d4:	4654      	mov	r4, sl
 80058d6:	2000      	movs	r0, #0
 80058d8:	f04f 0c0a 	mov.w	ip, #10
 80058dc:	9a07      	ldr	r2, [sp, #28]
 80058de:	4621      	mov	r1, r4
 80058e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058e4:	3b30      	subs	r3, #48	@ 0x30
 80058e6:	2b09      	cmp	r3, #9
 80058e8:	d94b      	bls.n	8005982 <_vfiprintf_r+0x1a2>
 80058ea:	b1b0      	cbz	r0, 800591a <_vfiprintf_r+0x13a>
 80058ec:	9207      	str	r2, [sp, #28]
 80058ee:	e014      	b.n	800591a <_vfiprintf_r+0x13a>
 80058f0:	eba0 0308 	sub.w	r3, r0, r8
 80058f4:	fa09 f303 	lsl.w	r3, r9, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	46a2      	mov	sl, r4
 80058fc:	9304      	str	r3, [sp, #16]
 80058fe:	e7d2      	b.n	80058a6 <_vfiprintf_r+0xc6>
 8005900:	9b03      	ldr	r3, [sp, #12]
 8005902:	1d19      	adds	r1, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	9103      	str	r1, [sp, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	bfbb      	ittet	lt
 800590c:	425b      	neglt	r3, r3
 800590e:	f042 0202 	orrlt.w	r2, r2, #2
 8005912:	9307      	strge	r3, [sp, #28]
 8005914:	9307      	strlt	r3, [sp, #28]
 8005916:	bfb8      	it	lt
 8005918:	9204      	strlt	r2, [sp, #16]
 800591a:	7823      	ldrb	r3, [r4, #0]
 800591c:	2b2e      	cmp	r3, #46	@ 0x2e
 800591e:	d10a      	bne.n	8005936 <_vfiprintf_r+0x156>
 8005920:	7863      	ldrb	r3, [r4, #1]
 8005922:	2b2a      	cmp	r3, #42	@ 0x2a
 8005924:	d132      	bne.n	800598c <_vfiprintf_r+0x1ac>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	3402      	adds	r4, #2
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	9203      	str	r2, [sp, #12]
 8005930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005934:	9305      	str	r3, [sp, #20]
 8005936:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005a00 <_vfiprintf_r+0x220>
 800593a:	2203      	movs	r2, #3
 800593c:	4650      	mov	r0, sl
 800593e:	7821      	ldrb	r1, [r4, #0]
 8005940:	f7fe f969 	bl	8003c16 <memchr>
 8005944:	b138      	cbz	r0, 8005956 <_vfiprintf_r+0x176>
 8005946:	2240      	movs	r2, #64	@ 0x40
 8005948:	9b04      	ldr	r3, [sp, #16]
 800594a:	eba0 000a 	sub.w	r0, r0, sl
 800594e:	4082      	lsls	r2, r0
 8005950:	4313      	orrs	r3, r2
 8005952:	3401      	adds	r4, #1
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595a:	2206      	movs	r2, #6
 800595c:	4829      	ldr	r0, [pc, #164]	@ (8005a04 <_vfiprintf_r+0x224>)
 800595e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005962:	f7fe f958 	bl	8003c16 <memchr>
 8005966:	2800      	cmp	r0, #0
 8005968:	d03f      	beq.n	80059ea <_vfiprintf_r+0x20a>
 800596a:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <_vfiprintf_r+0x228>)
 800596c:	bb1b      	cbnz	r3, 80059b6 <_vfiprintf_r+0x1d6>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	3307      	adds	r3, #7
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	3308      	adds	r3, #8
 8005978:	9303      	str	r3, [sp, #12]
 800597a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800597c:	443b      	add	r3, r7
 800597e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005980:	e76a      	b.n	8005858 <_vfiprintf_r+0x78>
 8005982:	460c      	mov	r4, r1
 8005984:	2001      	movs	r0, #1
 8005986:	fb0c 3202 	mla	r2, ip, r2, r3
 800598a:	e7a8      	b.n	80058de <_vfiprintf_r+0xfe>
 800598c:	2300      	movs	r3, #0
 800598e:	f04f 0c0a 	mov.w	ip, #10
 8005992:	4619      	mov	r1, r3
 8005994:	3401      	adds	r4, #1
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	4620      	mov	r0, r4
 800599a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800599e:	3a30      	subs	r2, #48	@ 0x30
 80059a0:	2a09      	cmp	r2, #9
 80059a2:	d903      	bls.n	80059ac <_vfiprintf_r+0x1cc>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0c6      	beq.n	8005936 <_vfiprintf_r+0x156>
 80059a8:	9105      	str	r1, [sp, #20]
 80059aa:	e7c4      	b.n	8005936 <_vfiprintf_r+0x156>
 80059ac:	4604      	mov	r4, r0
 80059ae:	2301      	movs	r3, #1
 80059b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059b4:	e7f0      	b.n	8005998 <_vfiprintf_r+0x1b8>
 80059b6:	ab03      	add	r3, sp, #12
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	462a      	mov	r2, r5
 80059bc:	4630      	mov	r0, r6
 80059be:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <_vfiprintf_r+0x22c>)
 80059c0:	a904      	add	r1, sp, #16
 80059c2:	f7fd fbc5 	bl	8003150 <_printf_float>
 80059c6:	4607      	mov	r7, r0
 80059c8:	1c78      	adds	r0, r7, #1
 80059ca:	d1d6      	bne.n	800597a <_vfiprintf_r+0x19a>
 80059cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059ce:	07d9      	lsls	r1, r3, #31
 80059d0:	d405      	bmi.n	80059de <_vfiprintf_r+0x1fe>
 80059d2:	89ab      	ldrh	r3, [r5, #12]
 80059d4:	059a      	lsls	r2, r3, #22
 80059d6:	d402      	bmi.n	80059de <_vfiprintf_r+0x1fe>
 80059d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059da:	f7fe f91b 	bl	8003c14 <__retarget_lock_release_recursive>
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	065b      	lsls	r3, r3, #25
 80059e2:	f53f af1f 	bmi.w	8005824 <_vfiprintf_r+0x44>
 80059e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059e8:	e71e      	b.n	8005828 <_vfiprintf_r+0x48>
 80059ea:	ab03      	add	r3, sp, #12
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	462a      	mov	r2, r5
 80059f0:	4630      	mov	r0, r6
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <_vfiprintf_r+0x22c>)
 80059f4:	a904      	add	r1, sp, #16
 80059f6:	f7fd fe49 	bl	800368c <_printf_i>
 80059fa:	e7e4      	b.n	80059c6 <_vfiprintf_r+0x1e6>
 80059fc:	08005e50 	.word	0x08005e50
 8005a00:	08005e56 	.word	0x08005e56
 8005a04:	08005e5a 	.word	0x08005e5a
 8005a08:	08003151 	.word	0x08003151
 8005a0c:	080057bd 	.word	0x080057bd

08005a10 <__swbuf_r>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	460e      	mov	r6, r1
 8005a14:	4614      	mov	r4, r2
 8005a16:	4605      	mov	r5, r0
 8005a18:	b118      	cbz	r0, 8005a22 <__swbuf_r+0x12>
 8005a1a:	6a03      	ldr	r3, [r0, #32]
 8005a1c:	b90b      	cbnz	r3, 8005a22 <__swbuf_r+0x12>
 8005a1e:	f7fd ffdf 	bl	80039e0 <__sinit>
 8005a22:	69a3      	ldr	r3, [r4, #24]
 8005a24:	60a3      	str	r3, [r4, #8]
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	071a      	lsls	r2, r3, #28
 8005a2a:	d501      	bpl.n	8005a30 <__swbuf_r+0x20>
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	b943      	cbnz	r3, 8005a42 <__swbuf_r+0x32>
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f82a 	bl	8005a8c <__swsetup_r>
 8005a38:	b118      	cbz	r0, 8005a42 <__swbuf_r+0x32>
 8005a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8005a3e:	4638      	mov	r0, r7
 8005a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	b2f6      	uxtb	r6, r6
 8005a48:	1a98      	subs	r0, r3, r2
 8005a4a:	6963      	ldr	r3, [r4, #20]
 8005a4c:	4637      	mov	r7, r6
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	dc05      	bgt.n	8005a5e <__swbuf_r+0x4e>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fd9b 	bl	8005590 <_fflush_r>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d1ed      	bne.n	8005a3a <__swbuf_r+0x2a>
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60a3      	str	r3, [r4, #8]
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	701e      	strb	r6, [r3, #0]
 8005a6c:	6962      	ldr	r2, [r4, #20]
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d004      	beq.n	8005a7e <__swbuf_r+0x6e>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	07db      	lsls	r3, r3, #31
 8005a78:	d5e1      	bpl.n	8005a3e <__swbuf_r+0x2e>
 8005a7a:	2e0a      	cmp	r6, #10
 8005a7c:	d1df      	bne.n	8005a3e <__swbuf_r+0x2e>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7ff fd85 	bl	8005590 <_fflush_r>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d0d9      	beq.n	8005a3e <__swbuf_r+0x2e>
 8005a8a:	e7d6      	b.n	8005a3a <__swbuf_r+0x2a>

08005a8c <__swsetup_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4b29      	ldr	r3, [pc, #164]	@ (8005b34 <__swsetup_r+0xa8>)
 8005a90:	4605      	mov	r5, r0
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	460c      	mov	r4, r1
 8005a96:	b118      	cbz	r0, 8005aa0 <__swsetup_r+0x14>
 8005a98:	6a03      	ldr	r3, [r0, #32]
 8005a9a:	b90b      	cbnz	r3, 8005aa0 <__swsetup_r+0x14>
 8005a9c:	f7fd ffa0 	bl	80039e0 <__sinit>
 8005aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa4:	0719      	lsls	r1, r3, #28
 8005aa6:	d422      	bmi.n	8005aee <__swsetup_r+0x62>
 8005aa8:	06da      	lsls	r2, r3, #27
 8005aaa:	d407      	bmi.n	8005abc <__swsetup_r+0x30>
 8005aac:	2209      	movs	r2, #9
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	e033      	b.n	8005b24 <__swsetup_r+0x98>
 8005abc:	0758      	lsls	r0, r3, #29
 8005abe:	d512      	bpl.n	8005ae6 <__swsetup_r+0x5a>
 8005ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ac2:	b141      	cbz	r1, 8005ad6 <__swsetup_r+0x4a>
 8005ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <__swsetup_r+0x46>
 8005acc:	4628      	mov	r0, r5
 8005ace:	f7fe ff0f 	bl	80048f0 <_free_r>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0308 	orr.w	r3, r3, #8
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b94b      	cbnz	r3, 8005b06 <__swsetup_r+0x7a>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afc:	d003      	beq.n	8005b06 <__swsetup_r+0x7a>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 f882 	bl	8005c0a <__smakebuf_r>
 8005b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0a:	f013 0201 	ands.w	r2, r3, #1
 8005b0e:	d00a      	beq.n	8005b26 <__swsetup_r+0x9a>
 8005b10:	2200      	movs	r2, #0
 8005b12:	60a2      	str	r2, [r4, #8]
 8005b14:	6962      	ldr	r2, [r4, #20]
 8005b16:	4252      	negs	r2, r2
 8005b18:	61a2      	str	r2, [r4, #24]
 8005b1a:	6922      	ldr	r2, [r4, #16]
 8005b1c:	b942      	cbnz	r2, 8005b30 <__swsetup_r+0xa4>
 8005b1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b22:	d1c5      	bne.n	8005ab0 <__swsetup_r+0x24>
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	0799      	lsls	r1, r3, #30
 8005b28:	bf58      	it	pl
 8005b2a:	6962      	ldrpl	r2, [r4, #20]
 8005b2c:	60a2      	str	r2, [r4, #8]
 8005b2e:	e7f4      	b.n	8005b1a <__swsetup_r+0x8e>
 8005b30:	2000      	movs	r0, #0
 8005b32:	e7f7      	b.n	8005b24 <__swsetup_r+0x98>
 8005b34:	20000018 	.word	0x20000018

08005b38 <_raise_r>:
 8005b38:	291f      	cmp	r1, #31
 8005b3a:	b538      	push	{r3, r4, r5, lr}
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	d904      	bls.n	8005b4c <_raise_r+0x14>
 8005b42:	2316      	movs	r3, #22
 8005b44:	6003      	str	r3, [r0, #0]
 8005b46:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b4e:	b112      	cbz	r2, 8005b56 <_raise_r+0x1e>
 8005b50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b54:	b94b      	cbnz	r3, 8005b6a <_raise_r+0x32>
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f830 	bl	8005bbc <_getpid_r>
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b66:	f000 b817 	b.w	8005b98 <_kill_r>
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d00a      	beq.n	8005b84 <_raise_r+0x4c>
 8005b6e:	1c59      	adds	r1, r3, #1
 8005b70:	d103      	bne.n	8005b7a <_raise_r+0x42>
 8005b72:	2316      	movs	r3, #22
 8005b74:	6003      	str	r3, [r0, #0]
 8005b76:	2001      	movs	r0, #1
 8005b78:	e7e7      	b.n	8005b4a <_raise_r+0x12>
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b82:	4798      	blx	r3
 8005b84:	2000      	movs	r0, #0
 8005b86:	e7e0      	b.n	8005b4a <_raise_r+0x12>

08005b88 <raise>:
 8005b88:	4b02      	ldr	r3, [pc, #8]	@ (8005b94 <raise+0xc>)
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f7ff bfd3 	b.w	8005b38 <_raise_r>
 8005b92:	bf00      	nop
 8005b94:	20000018 	.word	0x20000018

08005b98 <_kill_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4d06      	ldr	r5, [pc, #24]	@ (8005bb8 <_kill_r+0x20>)
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fb fa1e 	bl	8000fe6 <_kill>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_kill_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_kill_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200003ac 	.word	0x200003ac

08005bbc <_getpid_r>:
 8005bbc:	f7fb ba0c 	b.w	8000fd8 <_getpid>

08005bc0 <__swhatbuf_r>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc8:	4615      	mov	r5, r2
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	461e      	mov	r6, r3
 8005bce:	b096      	sub	sp, #88	@ 0x58
 8005bd0:	da0c      	bge.n	8005bec <__swhatbuf_r+0x2c>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bda:	bf14      	ite	ne
 8005bdc:	2340      	movne	r3, #64	@ 0x40
 8005bde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005be2:	2000      	movs	r0, #0
 8005be4:	6031      	str	r1, [r6, #0]
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	b016      	add	sp, #88	@ 0x58
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	466a      	mov	r2, sp
 8005bee:	f000 f849 	bl	8005c84 <_fstat_r>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	dbed      	blt.n	8005bd2 <__swhatbuf_r+0x12>
 8005bf6:	9901      	ldr	r1, [sp, #4]
 8005bf8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c00:	4259      	negs	r1, r3
 8005c02:	4159      	adcs	r1, r3
 8005c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c08:	e7eb      	b.n	8005be2 <__swhatbuf_r+0x22>

08005c0a <__smakebuf_r>:
 8005c0a:	898b      	ldrh	r3, [r1, #12]
 8005c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0e:	079d      	lsls	r5, r3, #30
 8005c10:	4606      	mov	r6, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	d507      	bpl.n	8005c26 <__smakebuf_r+0x1c>
 8005c16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c1a:	6023      	str	r3, [r4, #0]
 8005c1c:	6123      	str	r3, [r4, #16]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	6163      	str	r3, [r4, #20]
 8005c22:	b003      	add	sp, #12
 8005c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c26:	466a      	mov	r2, sp
 8005c28:	ab01      	add	r3, sp, #4
 8005c2a:	f7ff ffc9 	bl	8005bc0 <__swhatbuf_r>
 8005c2e:	9f00      	ldr	r7, [sp, #0]
 8005c30:	4605      	mov	r5, r0
 8005c32:	4639      	mov	r1, r7
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7fe fecd 	bl	80049d4 <_malloc_r>
 8005c3a:	b948      	cbnz	r0, 8005c50 <__smakebuf_r+0x46>
 8005c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d4ee      	bmi.n	8005c22 <__smakebuf_r+0x18>
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e7e2      	b.n	8005c16 <__smakebuf_r+0xc>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	6020      	str	r0, [r4, #0]
 8005c60:	b15b      	cbz	r3, 8005c7a <__smakebuf_r+0x70>
 8005c62:	4630      	mov	r0, r6
 8005c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c68:	f000 f81e 	bl	8005ca8 <_isatty_r>
 8005c6c:	b128      	cbz	r0, 8005c7a <__smakebuf_r+0x70>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	431d      	orrs	r5, r3
 8005c7e:	81a5      	strh	r5, [r4, #12]
 8005c80:	e7cf      	b.n	8005c22 <__smakebuf_r+0x18>
	...

08005c84 <_fstat_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	2300      	movs	r3, #0
 8005c88:	4d06      	ldr	r5, [pc, #24]	@ (8005ca4 <_fstat_r+0x20>)
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	f7fb fa07 	bl	80010a4 <_fstat>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	d102      	bne.n	8005ca0 <_fstat_r+0x1c>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	b103      	cbz	r3, 8005ca0 <_fstat_r+0x1c>
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200003ac 	.word	0x200003ac

08005ca8 <_isatty_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	2300      	movs	r3, #0
 8005cac:	4d05      	ldr	r5, [pc, #20]	@ (8005cc4 <_isatty_r+0x1c>)
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	f7fb fa05 	bl	80010c2 <_isatty>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_isatty_r+0x1a>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_isatty_r+0x1a>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	200003ac 	.word	0x200003ac

08005cc8 <_init>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	bf00      	nop
 8005ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cce:	bc08      	pop	{r3}
 8005cd0:	469e      	mov	lr, r3
 8005cd2:	4770      	bx	lr

08005cd4 <_fini>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	bf00      	nop
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr
