
stm32f103c8t6-task-monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003f24  08003f24  00004f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c4  080040c4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080040cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  20000060  0800412c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001214  0800412c  00006214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b5d  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  00017be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0001a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d85  00000000  00000000  0001ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019733  00000000  00000000  0001c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ea  00000000  00000000  00035f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009343d  00000000  00000000  000480fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  000db57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e02cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f0c 	.word	0x08003f0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003f0c 	.word	0x08003f0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	200000d0 	.word	0x200000d0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b0a4      	sub	sp, #144	@ 0x90
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb35 	bl	8000804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f899 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8fd 	bl	800039c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f8d1 	bl	8000348 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // get total heap size
  char t[50];
  sprintf(t, "Total heap, (using heap 4): %ul \r\n", configTOTAL_HEAP_SIZE);
 80001a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80001aa:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80001ae:	493d      	ldr	r1, [pc, #244]	@ (80002a4 <main+0x114>)
 80001b0:	4618      	mov	r0, r3
 80001b2:	f003 f9fb 	bl	80035ac <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)t, strlen(t), HAL_MAX_DELAY);
 80001b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80001ba:	4618      	mov	r0, r3
 80001bc:	f7ff ffc8 	bl	8000150 <strlen>
 80001c0:	4603      	mov	r3, r0
 80001c2:	b29a      	uxth	r2, r3
 80001c4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80001c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001cc:	4836      	ldr	r0, [pc, #216]	@ (80002a8 <main+0x118>)
 80001ce:	f001 fcaf 	bl	8001b30 <HAL_UART_Transmit>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  serial_queue = xQueueCreate(5, sizeof(size_t));
 80001d2:	2200      	movs	r2, #0
 80001d4:	2104      	movs	r1, #4
 80001d6:	2005      	movs	r0, #5
 80001d8:	f002 f816 	bl	8002208 <xQueueGenericCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a33      	ldr	r2, [pc, #204]	@ (80002ac <main+0x11c>)
 80001e0:	6013      	str	r3, [r2, #0]
  if(serial_queue == 0) {
 80001e2:	4b32      	ldr	r3, [pc, #200]	@ (80002ac <main+0x11c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d110      	bne.n	800020c <main+0x7c>
	  char* str = "Serial queue not created\r\n";
 80001ea:	4b31      	ldr	r3, [pc, #196]	@ (80002b0 <main+0x120>)
 80001ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80001f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80001f4:	f7ff ffac 	bl	8000150 <strlen>
 80001f8:	4603      	mov	r3, r0
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000200:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000204:	4828      	ldr	r0, [pc, #160]	@ (80002a8 <main+0x118>)
 8000206:	f001 fc93 	bl	8001b30 <HAL_UART_Transmit>
 800020a:	e00f      	b.n	800022c <main+0x9c>
  } else {
	  char* str = "Serial queue created successfully\r\n";
 800020c:	4b29      	ldr	r3, [pc, #164]	@ (80002b4 <main+0x124>)
 800020e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000212:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000216:	f7ff ff9b 	bl	8000150 <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	b29a      	uxth	r2, r3
 800021e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000222:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000226:	4820      	ldr	r0, [pc, #128]	@ (80002a8 <main+0x118>)
 8000228:	f001 fc82 	bl	8001b30 <HAL_UART_Transmit>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800022c:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <main+0x128>)
 800022e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000232:	461d      	mov	r5, r3
 8000234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800023c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000240:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fe64 	bl	8001f14 <osThreadCreate>
 800024c:	4603      	mov	r3, r0
 800024e:	4a1b      	ldr	r2, [pc, #108]	@ (80002bc <main+0x12c>)
 8000250:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  osThreadDef(onboard_blink_task, x_task_onboard_led_blink, osPriorityNormal, 0, 128);
 8000252:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <main+0x130>)
 8000254:	f107 041c 	add.w	r4, r7, #28
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink_task_handle = osThreadCreate(osThread(onboard_blink_task), NULL);
 8000266:	f107 031c 	add.w	r3, r7, #28
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fe51 	bl	8001f14 <osThreadCreate>
 8000272:	4603      	mov	r3, r0
 8000274:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <main+0x134>)
 8000276:	6013      	str	r3, [r2, #0]

  osThreadDef(monitor_heap_task, x_task_monitor_heap, osPriorityNormal, 0, 128);
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <main+0x138>)
 800027a:	463c      	mov	r4, r7
 800027c:	461d      	mov	r5, r3
 800027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  monitor_heap_task_handle = osThreadCreate(osThread(monitor_heap_task), NULL);
 800028a:	463b      	mov	r3, r7
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fe40 	bl	8001f14 <osThreadCreate>
 8000294:	4603      	mov	r3, r0
 8000296:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <main+0x13c>)
 8000298:	6013      	str	r3, [r2, #0]
#endif

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800029a:	f001 fe34 	bl	8001f06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029e:	bf00      	nop
 80002a0:	e7fd      	b.n	800029e <main+0x10e>
 80002a2:	bf00      	nop
 80002a4:	08003f24 	.word	0x08003f24
 80002a8:	200002d0 	.word	0x200002d0
 80002ac:	20000324 	.word	0x20000324
 80002b0:	08003f48 	.word	0x08003f48
 80002b4:	08003f64 	.word	0x08003f64
 80002b8:	08003f94 	.word	0x08003f94
 80002bc:	20000318 	.word	0x20000318
 80002c0:	08003fc4 	.word	0x08003fc4
 80002c4:	2000031c 	.word	0x2000031c
 80002c8:	08003ff4 	.word	0x08003ff4
 80002cc:	20000320 	.word	0x20000320

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 f986 	bl	80035f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	2310      	movs	r3, #16
 80002fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000302:	f107 0318 	add.w	r3, r7, #24
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fd44 	bl	8000d94 <HAL_RCC_OscConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000312:	f000 f8f5 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	230f      	movs	r3, #15
 8000318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f000 ffb2 	bl	8001298 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800033a:	f000 f8e1 	bl	8000500 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	@ 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 800034e:	4a12      	ldr	r2, [pc, #72]	@ (8000398 <MX_USART1_UART_Init+0x50>)
 8000350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000352:	4b10      	ldr	r3, [pc, #64]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 8000354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	@ (8000394 <MX_USART1_UART_Init+0x4c>)
 8000380:	f001 fb86 	bl	8001a90 <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038a:	f000 f8b9 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200002d0 	.word	0x200002d0
 8000398:	40013800 	.word	0x40013800

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b18      	ldr	r3, [pc, #96]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a17      	ldr	r2, [pc, #92]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a11      	ldr	r2, [pc, #68]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <MX_GPIO_Init+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e6:	480c      	ldr	r0, [pc, #48]	@ (8000418 <MX_GPIO_Init+0x7c>)
 80003e8:	f000 fca2 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80003ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2302      	movs	r3, #2
 80003fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_GPIO_Init+0x7c>)
 8000406:	f000 fb0f 	bl	8000a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40011000 	.word	0x40011000

0800041c <x_task_onboard_led_blink>:

/* USER CODE BEGIN 4 */

void x_task_onboard_led_blink(void const* arg) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	size_t free_heap;
	char t[20];

	for(;;) {

		free_heap = xPortGetFreeHeapSize();
 8000424:	f002 fffe 	bl	8003424 <xPortGetFreeHeapSize>
 8000428:	61f8      	str	r0, [r7, #28]

		sprintf(t, "x_OL: %ul\r\n", free_heap);
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	69fa      	ldr	r2, [r7, #28]
 8000430:	490e      	ldr	r1, [pc, #56]	@ (800046c <x_task_onboard_led_blink+0x50>)
 8000432:	4618      	mov	r0, r3
 8000434:	f003 f8ba 	bl	80035ac <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)t, strlen(t), HAL_MAX_DELAY);
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe87 	bl	8000150 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	b29a      	uxth	r2, r3
 8000446:	f107 0108 	add.w	r1, r7, #8
 800044a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800044e:	4808      	ldr	r0, [pc, #32]	@ (8000470 <x_task_onboard_led_blink+0x54>)
 8000450:	f001 fb6e 	bl	8001b30 <HAL_UART_Transmit>

		HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000454:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000458:	4806      	ldr	r0, [pc, #24]	@ (8000474 <x_task_onboard_led_blink+0x58>)
 800045a:	f000 fc81 	bl	8000d60 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800045e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000462:	f002 f8cb 	bl	80025fc <vTaskDelay>
		free_heap = xPortGetFreeHeapSize();
 8000466:	bf00      	nop
 8000468:	e7dc      	b.n	8000424 <x_task_onboard_led_blink+0x8>
 800046a:	bf00      	nop
 800046c:	08004010 	.word	0x08004010
 8000470:	200002d0 	.word	0x200002d0
 8000474:	40011000 	.word	0x40011000

08000478 <x_task_monitor_heap>:
	}

}

void x_task_monitor_heap(void const* arg) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	UBaseType_t high_wm; // minimum amount of stack in words that has remained since the task started
	char t[20];

	for(;;) {

		free_heap = xPortGetFreeHeapSize(); // get global free heap
 8000480:	f002 ffd0 	bl	8003424 <xPortGetFreeHeapSize>
 8000484:	6278      	str	r0, [r7, #36]	@ 0x24

		high_wm = uxTaskGetStackHighWaterMark(NULL); // null -> this task add "#define INCLUDE_uxTaskGetStackHighWaterMark   1"  in FreeRTOScONFIG.H
 8000486:	2000      	movs	r0, #0
 8000488:	f002 fc18 	bl	8002cbc <uxTaskGetStackHighWaterMark>
 800048c:	6238      	str	r0, [r7, #32]

		//sprintf(t, "x_MH: %ul\r\n", free_heap);
		//HAL_UART_Transmit(&huart1, (uint8_t*)t, strlen(t), HAL_MAX_DELAY);

		sprintf(t, "HighWM: %lu\r\n", high_wm);
 800048e:	f107 030c 	add.w	r3, r7, #12
 8000492:	6a3a      	ldr	r2, [r7, #32]
 8000494:	490b      	ldr	r1, [pc, #44]	@ (80004c4 <x_task_monitor_heap+0x4c>)
 8000496:	4618      	mov	r0, r3
 8000498:	f003 f888 	bl	80035ac <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)t, strlen(t), HAL_MAX_DELAY);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe55 	bl	8000150 <strlen>
 80004a6:	4603      	mov	r3, r0
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	f107 010c 	add.w	r1, r7, #12
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <x_task_monitor_heap+0x50>)
 80004b4:	f001 fb3c 	bl	8001b30 <HAL_UART_Transmit>
//		if(xQueueSend(serial_queue, &free_heap, portMAX_DELAY) != pdPASS) {
//			char* str = "Could not send to queue\n\n";
//			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
//		}

		vTaskDelay(pdMS_TO_TICKS(200));
 80004b8:	20c8      	movs	r0, #200	@ 0xc8
 80004ba:	f002 f89f 	bl	80025fc <vTaskDelay>
		free_heap = xPortGetFreeHeapSize(); // get global free heap
 80004be:	bf00      	nop
 80004c0:	e7de      	b.n	8000480 <x_task_monitor_heap+0x8>
 80004c2:	bf00      	nop
 80004c4:	0800401c 	.word	0x0800401c
 80004c8:	200002d0 	.word	0x200002d0

080004cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f001 fd69 	bl	8001fac <osDelay>
 80004da:	e7fb      	b.n	80004d4 <StartDefaultTask+0x8>

080004dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d101      	bne.n	80004f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80004ee:	f000 f99f 	bl	8000830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40012c00 	.word	0x40012c00

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b18      	ldr	r3, [pc, #96]	@ (8000574 <HAL_MspInit+0x68>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <HAL_MspInit+0x68>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <HAL_MspInit+0x68>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_MspInit+0x68>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <HAL_MspInit+0x68>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <HAL_MspInit+0x68>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	210f      	movs	r1, #15
 8000546:	f06f 0001 	mvn.w	r0, #1
 800054a:	f000 fa42 	bl	80009d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_MspInit+0x6c>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <HAL_MspInit+0x6c>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	40010000 	.word	0x40010000

0800057c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1c      	ldr	r2, [pc, #112]	@ (8000608 <HAL_UART_MspInit+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d131      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1b      	ldr	r3, [pc, #108]	@ (800060c <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <HAL_UART_MspInit+0x94>)
 80005e2:	f000 fa21 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <HAL_UART_MspInit+0x94>)
 80005fc:	f000 fa14 	bl	8000a28 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800062a:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <HAL_InitTick+0xd0>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a2d      	ldr	r2, [pc, #180]	@ (80006e4 <HAL_InitTick+0xd0>)
 8000630:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <HAL_InitTick+0xd0>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff93 	bl	8001578 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000652:	f000 ff7d 	bl	8001550 <HAL_RCC_GetPCLK2Freq>
 8000656:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800065a:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <HAL_InitTick+0xd4>)
 800065c:	fba2 2303 	umull	r2, r3, r2, r3
 8000660:	0c9b      	lsrs	r3, r3, #18
 8000662:	3b01      	subs	r3, #1
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <HAL_InitTick+0xd8>)
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <HAL_InitTick+0xdc>)
 800066a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <HAL_InitTick+0xd8>)
 800066e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000672:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <HAL_InitTick+0xd8>)
 8000676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000678:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <HAL_InitTick+0xd8>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <HAL_InitTick+0xd8>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <HAL_InitTick+0xd8>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800068c:	4817      	ldr	r0, [pc, #92]	@ (80006ec <HAL_InitTick+0xd8>)
 800068e:	f000 ffc1 	bl	8001614 <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800069c:	2b00      	cmp	r3, #0
 800069e:	d11b      	bne.n	80006d8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	4812      	ldr	r0, [pc, #72]	@ (80006ec <HAL_InitTick+0xd8>)
 80006a2:	f001 f80f 	bl	80016c4 <HAL_TIM_Base_Start_IT>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80006ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d111      	bne.n	80006d8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006b4:	2019      	movs	r0, #25
 80006b6:	f000 f9a8 	bl	8000a0a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d808      	bhi.n	80006d2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	2019      	movs	r0, #25
 80006c6:	f000 f984 	bl	80009d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_InitTick+0xe0>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	e002      	b.n	80006d8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3730      	adds	r7, #48	@ 0x30
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	431bde83 	.word	0x431bde83
 80006ec:	20000328 	.word	0x20000328
 80006f0:	40012c00 	.word	0x40012c00
 80006f4:	20000004 	.word	0x20000004

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000730:	4802      	ldr	r0, [pc, #8]	@ (800073c <TIM1_UP_IRQHandler+0x10>)
 8000732:	f001 f819 	bl	8001768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000328 	.word	0x20000328

08000740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000748:	4a14      	ldr	r2, [pc, #80]	@ (800079c <_sbrk+0x5c>)
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <_sbrk+0x60>)
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <_sbrk+0x64>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <_sbrk+0x64>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <_sbrk+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <_sbrk+0x64>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4413      	add	r3, r2
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	429a      	cmp	r2, r3
 800076e:	d207      	bcs.n	8000780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000770:	f002 ff46 	bl	8003600 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	220c      	movs	r2, #12
 8000778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800077e:	e009      	b.n	8000794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <_sbrk+0x64>)
 8000790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20005000 	.word	0x20005000
 80007a0:	00000400 	.word	0x00000400
 80007a4:	20000370 	.word	0x20000370
 80007a8:	20001218 	.word	0x20001218

080007ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff fff8 	bl	80007ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007be:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007c0:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007d4:	4c09      	ldr	r4, [pc, #36]	@ (80007fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f002 ff13 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e6:	f7ff fcd3 	bl	8000190 <main>
  bx lr
 80007ea:	4770      	bx	lr
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007f4:	080040cc 	.word	0x080040cc
  ldr r2, =_sbss
 80007f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007fc:	20001214 	.word	0x20001214

08000800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC1_2_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_Init+0x28>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a07      	ldr	r2, [pc, #28]	@ (800082c <HAL_Init+0x28>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f8d1 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800081a:	200f      	movs	r0, #15
 800081c:	f7ff fefa 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000820:	f7ff fe74 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	20000374 	.word	0x20000374

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000374 	.word	0x20000374

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4906      	ldr	r1, [pc, #24]	@ (8000900 <__NVIC_EnableIRQ+0x34>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	@ (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	@ 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff4f 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff64 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ffb2 	bl	8000958 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff81 	bl	8000904 <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff57 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b08b      	sub	sp, #44	@ 0x2c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e169      	b.n	8000d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	f040 8158 	bne.w	8000d0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a9a      	ldr	r2, [pc, #616]	@ (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d05e      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a64:	4a98      	ldr	r2, [pc, #608]	@ (8000cc8 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d875      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a6a:	4a98      	ldr	r2, [pc, #608]	@ (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d058      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a70:	4a96      	ldr	r2, [pc, #600]	@ (8000ccc <HAL_GPIO_Init+0x2a4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d86f      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a76:	4a96      	ldr	r2, [pc, #600]	@ (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d052      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a7c:	4a94      	ldr	r2, [pc, #592]	@ (8000cd0 <HAL_GPIO_Init+0x2a8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d869      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a82:	4a94      	ldr	r2, [pc, #592]	@ (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d04c      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a88:	4a92      	ldr	r2, [pc, #584]	@ (8000cd4 <HAL_GPIO_Init+0x2ac>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d863      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a8e:	4a92      	ldr	r2, [pc, #584]	@ (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d046      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
 8000a94:	4a90      	ldr	r2, [pc, #576]	@ (8000cd8 <HAL_GPIO_Init+0x2b0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d85d      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d82a      	bhi.n	8000af4 <HAL_GPIO_Init+0xcc>
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	d859      	bhi.n	8000b56 <HAL_GPIO_Init+0x12e>
 8000aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa8 <HAL_GPIO_Init+0x80>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000b23 	.word	0x08000b23
 8000aac:	08000afd 	.word	0x08000afd
 8000ab0:	08000b0f 	.word	0x08000b0f
 8000ab4:	08000b51 	.word	0x08000b51
 8000ab8:	08000b57 	.word	0x08000b57
 8000abc:	08000b57 	.word	0x08000b57
 8000ac0:	08000b57 	.word	0x08000b57
 8000ac4:	08000b57 	.word	0x08000b57
 8000ac8:	08000b57 	.word	0x08000b57
 8000acc:	08000b57 	.word	0x08000b57
 8000ad0:	08000b57 	.word	0x08000b57
 8000ad4:	08000b57 	.word	0x08000b57
 8000ad8:	08000b57 	.word	0x08000b57
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b57 	.word	0x08000b57
 8000ae4:	08000b57 	.word	0x08000b57
 8000ae8:	08000b57 	.word	0x08000b57
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b19 	.word	0x08000b19
 8000af4:	4a79      	ldr	r2, [pc, #484]	@ (8000cdc <HAL_GPIO_Init+0x2b4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d013      	beq.n	8000b22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000afa:	e02c      	b.n	8000b56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e029      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e024      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	3308      	adds	r3, #8
 8000b14:	623b      	str	r3, [r7, #32]
          break;
 8000b16:	e01f      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	330c      	adds	r3, #12
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	e01a      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d102      	bne.n	8000b30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e013      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69fa      	ldr	r2, [r7, #28]
 8000b40:	611a      	str	r2, [r3, #16]
          break;
 8000b42:	e009      	b.n	8000b58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b44:	2308      	movs	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	615a      	str	r2, [r3, #20]
          break;
 8000b4e:	e003      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x130>
          break;
 8000b56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	2bff      	cmp	r3, #255	@ 0xff
 8000b5c:	d801      	bhi.n	8000b62 <HAL_GPIO_Init+0x13a>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	e001      	b.n	8000b66 <HAL_GPIO_Init+0x13e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3304      	adds	r3, #4
 8000b66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2bff      	cmp	r3, #255	@ 0xff
 8000b6c:	d802      	bhi.n	8000b74 <HAL_GPIO_Init+0x14c>
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_Init+0x152>
 8000b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b76:	3b08      	subs	r3, #8
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	210f      	movs	r1, #15
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	6a39      	ldr	r1, [r7, #32]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	431a      	orrs	r2, r3
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80b1 	beq.w	8000d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a4c      	ldr	r2, [pc, #304]	@ (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce0 <HAL_GPIO_Init+0x2b8>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bc0:	4a48      	ldr	r2, [pc, #288]	@ (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a40      	ldr	r2, [pc, #256]	@ (8000ce8 <HAL_GPIO_Init+0x2c0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d013      	beq.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3f      	ldr	r2, [pc, #252]	@ (8000cec <HAL_GPIO_Init+0x2c4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d00d      	beq.n	8000c10 <HAL_GPIO_Init+0x1e8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8000cf0 <HAL_GPIO_Init+0x2c8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x1e4>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf4 <HAL_GPIO_Init+0x2cc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_GPIO_Init+0x1e0>
 8000c04:	2303      	movs	r3, #3
 8000c06:	e006      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000c14:	2300      	movs	r3, #0
 8000c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c26:	492f      	ldr	r1, [pc, #188]	@ (8000ce4 <HAL_GPIO_Init+0x2bc>)
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	492c      	ldr	r1, [pc, #176]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	608b      	str	r3, [r1, #8]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4928      	ldr	r1, [pc, #160]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	4922      	ldr	r1, [pc, #136]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60cb      	str	r3, [r1, #12]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	491e      	ldr	r1, [pc, #120]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4918      	ldr	r1, [pc, #96]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4914      	ldr	r1, [pc, #80]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d021      	beq.n	8000cfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	490e      	ldr	r1, [pc, #56]	@ (8000cf8 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	600b      	str	r3, [r1, #0]
 8000cc4:	e021      	b.n	8000d0a <HAL_GPIO_Init+0x2e2>
 8000cc6:	bf00      	nop
 8000cc8:	10320000 	.word	0x10320000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10220000 	.word	0x10220000
 8000cd4:	10210000 	.word	0x10210000
 8000cd8:	10120000 	.word	0x10120000
 8000cdc:	10110000 	.word	0x10110000
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40011400 	.word	0x40011400
 8000cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_GPIO_Init+0x304>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4909      	ldr	r1, [pc, #36]	@ (8000d2c <HAL_GPIO_Init+0x304>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f47f ae8e 	bne.w	8000a3c <HAL_GPIO_Init+0x14>
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	372c      	adds	r7, #44	@ 0x2c
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d4c:	e003      	b.n	8000d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4013      	ands	r3, r2
 8000d78:	041a      	lsls	r2, r3, #16
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43d9      	mvns	r1, r3
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	400b      	ands	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e272      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8087 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db4:	4b92      	ldr	r3, [pc, #584]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d00c      	beq.n	8000dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d112      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
 8000dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dda:	4b89      	ldr	r3, [pc, #548]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d06c      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d168      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e24c      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x76>
 8000dfc:	4b80      	ldr	r3, [pc, #512]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a7f      	ldr	r2, [pc, #508]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e02e      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x98>
 8000e12:	4b7b      	ldr	r3, [pc, #492]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a7a      	ldr	r2, [pc, #488]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b78      	ldr	r3, [pc, #480]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a77      	ldr	r2, [pc, #476]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01d      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0xbc>
 8000e36:	4b72      	ldr	r3, [pc, #456]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a71      	ldr	r2, [pc, #452]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b6f      	ldr	r3, [pc, #444]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a6e      	ldr	r2, [pc, #440]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e00b      	b.n	8000e68 <HAL_RCC_OscConfig+0xd4>
 8000e50:	4b6b      	ldr	r3, [pc, #428]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a6a      	ldr	r2, [pc, #424]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b68      	ldr	r3, [pc, #416]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a67      	ldr	r2, [pc, #412]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d013      	beq.n	8000e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fcf0 	bl	8000854 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fcec 	bl	8000854 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	@ 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e200      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f0      	beq.n	8000e78 <HAL_RCC_OscConfig+0xe4>
 8000e96:	e014      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff fcdc 	bl	8000854 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9e:	e008      	b.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fcd8 	bl	8000854 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b64      	cmp	r3, #100	@ 0x64
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e1ec      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	4b53      	ldr	r3, [pc, #332]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f0      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x10c>
 8000ebe:	e000      	b.n	8000ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d063      	beq.n	8000f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ece:	4b4c      	ldr	r3, [pc, #304]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eda:	4b49      	ldr	r3, [pc, #292]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d11c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
 8000ee6:	4b46      	ldr	r3, [pc, #280]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d116      	bne.n	8000f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef2:	4b43      	ldr	r3, [pc, #268]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e1c0      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4939      	ldr	r1, [pc, #228]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1e:	e03a      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d020      	beq.n	8000f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fc91 	bl	8000854 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc8d 	bl	8000854 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1a1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f54:	4b2a      	ldr	r3, [pc, #168]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4927      	ldr	r1, [pc, #156]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc70 	bl	8000854 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc6c 	bl	8000854 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e180      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03a      	beq.n	8001018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d019      	beq.n	8000fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb0:	f7ff fc50 	bl	8000854 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fc4c 	bl	8000854 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e160      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f0      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 fafe 	bl	80015d8 <RCC_Delay>
 8000fdc:	e01c      	b.n	8001018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_RCC_OscConfig+0x274>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fc36 	bl	8000854 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	e00f      	b.n	800100c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc32 	bl	8000854 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d908      	bls.n	800100c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e146      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	42420000 	.word	0x42420000
 8001008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100c:	4b92      	ldr	r3, [pc, #584]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e9      	bne.n	8000fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a6 	beq.w	8001172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102a:	4b8b      	ldr	r3, [pc, #556]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10d      	bne.n	8001052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b88      	ldr	r3, [pc, #544]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a87      	ldr	r2, [pc, #540]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b85      	ldr	r3, [pc, #532]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104e:	2301      	movs	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001052:	4b82      	ldr	r3, [pc, #520]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105e:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7e      	ldr	r2, [pc, #504]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fbf3 	bl	8000854 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001072:	f7ff fbef 	bl	8000854 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	@ 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e103      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001084:	4b75      	ldr	r3, [pc, #468]	@ (800125c <HAL_RCC_OscConfig+0x4c8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x312>
 8001098:	4b6f      	ldr	r3, [pc, #444]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a6e      	ldr	r2, [pc, #440]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e02d      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x334>
 80010ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a69      	ldr	r2, [pc, #420]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b67      	ldr	r3, [pc, #412]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a66      	ldr	r2, [pc, #408]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	e01c      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x356>
 80010d0:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a60      	ldr	r2, [pc, #384]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0x36e>
 80010ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	4b58      	ldr	r3, [pc, #352]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a57      	ldr	r2, [pc, #348]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d015      	beq.n	8001136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110a:	f7ff fba3 	bl	8000854 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001112:	f7ff fb9f 	bl	8000854 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e0b1      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	4b4b      	ldr	r3, [pc, #300]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0ee      	beq.n	8001112 <HAL_RCC_OscConfig+0x37e>
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001136:	f7ff fb8d 	bl	8000854 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113e:	f7ff fb89 	bl	8000854 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800114c:	4293      	cmp	r3, r2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e09b      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	4b40      	ldr	r3, [pc, #256]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ee      	bne.n	800113e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d105      	bne.n	8001172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b3c      	ldr	r3, [pc, #240]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a3b      	ldr	r2, [pc, #236]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117c:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d061      	beq.n	800124c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d146      	bne.n	800121e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fb5d 	bl	8000854 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff fb59 	bl	8000854 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e06d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c4:	d108      	bne.n	80011d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c6:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	4921      	ldr	r1, [pc, #132]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a19      	ldr	r1, [r3, #32]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e8:	430b      	orrs	r3, r1
 80011ea:	491b      	ldr	r1, [pc, #108]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fb2d 	bl	8000854 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fe:	f7ff fb29 	bl	8000854 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e03d      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x46a>
 800121c:	e035      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_RCC_OscConfig+0x4cc>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fb16 	bl	8000854 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fb12 	bl	8000854 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e026      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x498>
 800124a:	e01e      	b.n	800128a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d107      	bne.n	8001264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e019      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
 8001258:	40021000 	.word	0x40021000
 800125c:	40007000 	.word	0x40007000
 8001260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_OscConfig+0x500>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	429a      	cmp	r2, r3
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa64 	bl	8000854 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa60 	bl	8000854 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	@ (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f8e4 	bl	8000614 <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	0800405c 	.word	0x0800405c
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001486:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x94>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d002      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x30>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x36>
 800149a:	e027      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	613b      	str	r3, [r7, #16]
      break;
 80014a0:	e027      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <HAL_RCC_GetSysClockFreq+0x94>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	0c5b      	lsrs	r3, r3, #17
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ce:	fb03 f202 	mul.w	r2, r3, r2
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e004      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0c      	ldr	r2, [pc, #48]	@ (8001510 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	613b      	str	r3, [r7, #16]
      break;
 80014ea:	e002      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ee:	613b      	str	r3, [r7, #16]
      break;
 80014f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014f2:	693b      	ldr	r3, [r7, #16]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	007a1200 	.word	0x007a1200
 8001508:	08004074 	.word	0x08004074
 800150c:	08004084 	.word	0x08004084
 8001510:	003d0900 	.word	0x003d0900

08001514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001518:	4b02      	ldr	r3, [pc, #8]	@ (8001524 <HAL_RCC_GetHCLKFreq+0x10>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	20000000 	.word	0x20000000

08001528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800152c:	f7ff fff2 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001530:	4602      	mov	r2, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4903      	ldr	r1, [pc, #12]	@ (800154c <HAL_RCC_GetPCLK1Freq+0x24>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	0800406c 	.word	0x0800406c

08001550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001554:	f7ff ffde 	bl	8001514 <HAL_RCC_GetHCLKFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0adb      	lsrs	r3, r3, #11
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	4903      	ldr	r1, [pc, #12]	@ (8001574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000
 8001574:	0800406c 	.word	0x0800406c

08001578 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	220f      	movs	r2, #15
 8001586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_RCC_GetClockConfig+0x58>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0203 	and.w	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001594:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <HAL_RCC_GetClockConfig+0x58>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_RCC_GetClockConfig+0x58>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_RCC_GetClockConfig+0x58>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_RCC_GetClockConfig+0x5c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0207 	and.w	r2, r3, #7
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40022000 	.word	0x40022000

080015d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <RCC_Delay+0x34>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <RCC_Delay+0x38>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0a5b      	lsrs	r3, r3, #9
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015f4:	bf00      	nop
  }
  while (Delay --);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	60fa      	str	r2, [r7, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <RCC_Delay+0x1c>
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000000 	.word	0x20000000
 8001610:	10624dd3 	.word	0x10624dd3

08001614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e041      	b.n	80016aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f839 	bl	80016b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f000 f99c 	bl	8001990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d001      	beq.n	80016dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e03a      	b.n	8001752 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_TIM_Base_Start_IT+0x98>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00e      	beq.n	800171c <HAL_TIM_Base_Start_IT+0x58>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001706:	d009      	beq.n	800171c <HAL_TIM_Base_Start_IT+0x58>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <HAL_TIM_Base_Start_IT+0x9c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d004      	beq.n	800171c <HAL_TIM_Base_Start_IT+0x58>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <HAL_TIM_Base_Start_IT+0xa0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d111      	bne.n	8001740 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b06      	cmp	r3, #6
 800172c:	d010      	beq.n	8001750 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800173e:	e007      	b.n	8001750 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40000400 	.word	0x40000400
 8001764:	40000800 	.word	0x40000800

08001768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d020      	beq.n	80017cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0202 	mvn.w	r2, #2
 800179c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8d1 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8c4 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8d3 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d020      	beq.n	8001818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01b      	beq.n	8001818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0204 	mvn.w	r2, #4
 80017e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2202      	movs	r2, #2
 80017ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f8ab 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001804:	e005      	b.n	8001812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f89e 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f8ad 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0208 	mvn.w	r2, #8
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2204      	movs	r2, #4
 800183a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f885 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001850:	e005      	b.n	800185e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f878 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f887 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d020      	beq.n	80018b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01b      	beq.n	80018b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0210 	mvn.w	r2, #16
 8001880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2208      	movs	r2, #8
 8001886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f85f 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 800189c:	e005      	b.n	80018aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f852 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f861 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0201 	mvn.w	r2, #1
 80018cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7fe fe04 	bl	80004dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00c      	beq.n	80018f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8c3 	bl	8001a7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00c      	beq.n	800191c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f831 	bl	800197e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f896 	bl	8001a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <TIM_Base_SetConfig+0xd0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a64 <TIM_Base_SetConfig+0xd4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001a68 <TIM_Base_SetConfig+0xd8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d108      	bne.n	80019d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <TIM_Base_SetConfig+0xd0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a64 <TIM_Base_SetConfig+0xd4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <TIM_Base_SetConfig+0xd8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <TIM_Base_SetConfig+0xd0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f023 0201 	bic.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
  }
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800

08001a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e042      	b.n	8001b28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fd60 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	@ 0x24
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f971 	bl	8001dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d175      	bne.n	8001c3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_UART_Transmit+0x2c>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e06e      	b.n	8001c3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2221      	movs	r2, #33	@ 0x21
 8001b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b6e:	f7fe fe71 	bl	8000854 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b88:	d108      	bne.n	8001b9c <HAL_UART_Transmit+0x6c>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e003      	b.n	8001ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ba4:	e02e      	b.n	8001c04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2180      	movs	r1, #128	@ 0x80
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f848 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e03a      	b.n	8001c3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10b      	bne.n	8001be6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3302      	adds	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e007      	b.n	8001bf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1cb      	bne.n	8001ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2140      	movs	r1, #64	@ 0x40
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f814 	bl	8001c46 <UART_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e006      	b.n	8001c3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c3c:	2302      	movs	r3, #2
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c56:	e03b      	b.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c5e:	d037      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c60:	f7fe fdf8 	bl	8000854 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	6a3a      	ldr	r2, [r7, #32]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d302      	bcc.n	8001c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e03a      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b80      	cmp	r3, #128	@ 0x80
 8001c8c:	d020      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b40      	cmp	r3, #64	@ 0x40
 8001c92:	d01d      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d116      	bne.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f81d 	bl	8001cf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e00f      	b.n	8001cf0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d0b4      	beq.n	8001c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b095      	sub	sp, #84	@ 0x54
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	330c      	adds	r3, #12
 8001d06:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d0a:	e853 3f00 	ldrex	r3, [r3]
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d20:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d28:	e841 2300 	strex	r3, r2, [r1]
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e5      	bne.n	8001d00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3314      	adds	r3, #20
 8001d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	e853 3f00 	ldrex	r3, [r3]
 8001d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3314      	adds	r3, #20
 8001d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d5c:	e841 2300 	strex	r3, r2, [r1]
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e5      	bne.n	8001d34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d119      	bne.n	8001da4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	330c      	adds	r3, #12
 8001d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	e853 3f00 	ldrex	r3, [r3]
 8001d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f023 0310 	bic.w	r3, r3, #16
 8001d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	330c      	adds	r3, #12
 8001d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d90:	61ba      	str	r2, [r7, #24]
 8001d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d94:	6979      	ldr	r1, [r7, #20]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	e841 2300 	strex	r3, r2, [r1]
 8001d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e5      	bne.n	8001d70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001db2:	bf00      	nop
 8001db4:	3754      	adds	r7, #84	@ 0x54
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001df6:	f023 030c 	bic.w	r3, r3, #12
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed0 <UART_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d103      	bne.n	8001e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e24:	f7ff fb94 	bl	8001550 <HAL_RCC_GetPCLK2Freq>
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	e002      	b.n	8001e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e2c:	f7ff fb7c 	bl	8001528 <HAL_RCC_GetPCLK1Freq>
 8001e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009a      	lsls	r2, r3, #2
 8001e3c:	441a      	add	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <UART_SetConfig+0x118>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	0119      	lsls	r1, r3, #4
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <UART_SetConfig+0x118>)
 8001e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2064      	movs	r0, #100	@ 0x64
 8001e72:	fb00 f303 	mul.w	r3, r0, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	3332      	adds	r3, #50	@ 0x32
 8001e7c:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <UART_SetConfig+0x118>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e88:	4419      	add	r1, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009a      	lsls	r2, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <UART_SetConfig+0x118>)
 8001ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2064      	movs	r0, #100	@ 0x64
 8001eaa:	fb00 f303 	mul.w	r3, r0, r3
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	3332      	adds	r3, #50	@ 0x32
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <UART_SetConfig+0x118>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	f003 020f 	and.w	r2, r3, #15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	51eb851f 	.word	0x51eb851f

08001ed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eea:	2b84      	cmp	r3, #132	@ 0x84
 8001eec:	d005      	beq.n	8001efa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f0a:	f000 fbad 	bl	8002668 <vTaskStartScheduler>
  
  return osOK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af04      	add	r7, sp, #16
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d020      	beq.n	8001f68 <osThreadCreate+0x54>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01c      	beq.n	8001f68 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685c      	ldr	r4, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691e      	ldr	r6, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ffc9 	bl	8001ed8 <makeFreeRtosPriority>
 8001f46:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f50:	9202      	str	r2, [sp, #8]
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	9100      	str	r1, [sp, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4632      	mov	r2, r6
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f000 f9ad 	bl	80022bc <xTaskCreateStatic>
 8001f62:	4603      	mov	r3, r0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e01c      	b.n	8001fa2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685c      	ldr	r4, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f74:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ffab 	bl	8001ed8 <makeFreeRtosPriority>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	9200      	str	r2, [sp, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4632      	mov	r2, r6
 8001f90:	4629      	mov	r1, r5
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 f9f2 	bl	800237c <xTaskCreate>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <osDelay+0x16>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	e000      	b.n	8001fc4 <osDelay+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fb19 	bl	80025fc <vTaskDelay>
  
  return osOK;
 8001fca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0208 	add.w	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f103 0208 	add.w	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0208 	add.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002086:	d103      	bne.n	8002090 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e00c      	b.n	80020aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3308      	adds	r3, #8
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e002      	b.n	800209e <vListInsert+0x2e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d2f6      	bcs.n	8002098 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6852      	ldr	r2, [r2, #4]
 8002100:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d103      	bne.n	8002114 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
	...

08002134 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002160:	f000 ff6c 	bl	800303c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	441a      	add	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	3b01      	subs	r3, #1
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	441a      	add	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	22ff      	movs	r2, #255	@ 0xff
 80021a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	22ff      	movs	r2, #255	@ 0xff
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3310      	adds	r3, #16
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fc74 	bl	8002ab0 <xTaskRemoveFromEventList>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d012      	beq.n	80021f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <xQueueGenericReset+0xd0>)
 80021d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	e009      	b.n	80021f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3310      	adds	r3, #16
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fef5 	bl	8001fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3324      	adds	r3, #36	@ 0x24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fef0 	bl	8001fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021f4:	f000 ff52 	bl	800309c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000ed04 	.word	0xe000ed04

08002208 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	4613      	mov	r3, r2
 8002214:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <xQueueGenericCreate+0x2c>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	613b      	str	r3, [r7, #16]
}
 800222e:	bf00      	nop
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3348      	adds	r3, #72	@ 0x48
 8002242:	4618      	mov	r0, r3
 8002244:	f000 ffbc 	bl	80031c0 <pvPortMalloc>
 8002248:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d011      	beq.n	8002274 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3348      	adds	r3, #72	@ 0x48
 8002258:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f805 	bl	800227e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002274:	69bb      	ldr	r3, [r7, #24]
	}
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e002      	b.n	80022a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022ac:	2101      	movs	r1, #1
 80022ae:	69b8      	ldr	r0, [r7, #24]
 80022b0:	f7ff ff40 	bl	8002134 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08e      	sub	sp, #56	@ 0x38
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	623b      	str	r3, [r7, #32]
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80022e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10b      	bne.n	8002306 <xTaskCreateStatic+0x4a>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	61fb      	str	r3, [r7, #28]
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002306:	2354      	movs	r3, #84	@ 0x54
 8002308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b54      	cmp	r3, #84	@ 0x54
 800230e:	d00b      	beq.n	8002328 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	61bb      	str	r3, [r7, #24]
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002328:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800232a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01e      	beq.n	800236e <xTaskCreateStatic+0xb2>
 8002330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01b      	beq.n	800236e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002348:	2300      	movs	r3, #0
 800234a:	9303      	str	r3, [sp, #12]
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f850 	bl	8002406 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002366:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002368:	f000 f8de 	bl	8002528 <prvAddNewTaskToReadyList>
 800236c:	e001      	b.n	8002372 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002372:	697b      	ldr	r3, [r7, #20]
	}
 8002374:	4618      	mov	r0, r3
 8002376:	3728      	adds	r7, #40	@ 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	@ 0x30
 8002380:	af04      	add	r7, sp, #16
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f000 ff15 	bl	80031c0 <pvPortMalloc>
 8002396:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800239e:	2054      	movs	r0, #84	@ 0x54
 80023a0:	f000 ff0e 	bl	80031c0 <pvPortMalloc>
 80023a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023b2:	e005      	b.n	80023c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f000 ffd1 	bl	800335c <vPortFree>
 80023ba:	e001      	b.n	80023c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d017      	beq.n	80023f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023ce:	88fa      	ldrh	r2, [r7, #6]
 80023d0:	2300      	movs	r3, #0
 80023d2:	9303      	str	r3, [sp, #12]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f80e 	bl	8002406 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023ea:	69f8      	ldr	r0, [r7, #28]
 80023ec:	f000 f89c 	bl	8002528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	e002      	b.n	80023fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023fc:	69bb      	ldr	r3, [r7, #24]
	}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b088      	sub	sp, #32
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	461a      	mov	r2, r3
 800241e:	21a5      	movs	r1, #165	@ 0xa5
 8002420:	f001 f8e6 	bl	80035f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800242e:	3b01      	subs	r3, #1
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f023 0307 	bic.w	r3, r3, #7
 800243c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00b      	beq.n	8002460 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	617b      	str	r3, [r7, #20]
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01f      	beq.n	80024a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e012      	b.n	8002492 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	7819      	ldrb	r1, [r3, #0]
 8002474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	3334      	adds	r3, #52	@ 0x34
 800247c:	460a      	mov	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d9e9      	bls.n	800246c <prvInitialiseNewTask+0x66>
 8002498:	e000      	b.n	800249c <prvInitialiseNewTask+0x96>
			{
				break;
 800249a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024a4:	e003      	b.n	80024ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d901      	bls.n	80024b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024b4:	2306      	movs	r3, #6
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024c2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd9f 	bl	8002012 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	3318      	adds	r3, #24
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd9a 	bl	8002012 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	f1c3 0207 	rsb	r2, r3, #7
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	69b8      	ldr	r0, [r7, #24]
 8002508:	f000 fcaa 	bl	8002e60 <pxPortInitialiseStack>
 800250c:	4602      	mov	r2, r0
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800251e:	bf00      	nop
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002530:	f000 fd84 	bl	800303c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 800253c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800253e:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002546:	4a27      	ldr	r2, [pc, #156]	@ (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <prvAddNewTaskToReadyList+0xb8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d110      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002554:	f000 fb28 	bl	8002ba8 <prvInitialiseTaskLists>
 8002558:	e00d      	b.n	8002576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d802      	bhi.n	8002576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002570:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002576:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <prvAddNewTaskToReadyList+0xc4>)
 800257e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	2201      	movs	r2, #1
 8002586:	409a      	lsls	r2, r3
 8002588:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	4a18      	ldr	r2, [pc, #96]	@ (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <prvAddNewTaskToReadyList+0xcc>)
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7ff fd3e 	bl	800202a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025ae:	f000 fd75 	bl	800309c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <prvAddNewTaskToReadyList+0xbc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <prvAddNewTaskToReadyList+0xd0>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000478 	.word	0x20000478
 80025e4:	20000378 	.word	0x20000378
 80025e8:	20000484 	.word	0x20000484
 80025ec:	20000494 	.word	0x20000494
 80025f0:	20000480 	.word	0x20000480
 80025f4:	2000037c 	.word	0x2000037c
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <vTaskDelay+0x64>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <vTaskDelay+0x32>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	60bb      	str	r3, [r7, #8]
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	e7fd      	b.n	800262a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800262e:	f000 f87d 	bl	800272c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002632:	2100      	movs	r1, #0
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fbad 	bl	8002d94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800263a:	f000 f885 	bl	8002748 <xTaskResumeAll>
 800263e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <vTaskDelay+0x68>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004a0 	.word	0x200004a0
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002676:	463a      	mov	r2, r7
 8002678:	1d39      	adds	r1, r7, #4
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fd6e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	460a      	mov	r2, r1
 8002696:	491f      	ldr	r1, [pc, #124]	@ (8002714 <vTaskStartScheduler+0xac>)
 8002698:	481f      	ldr	r0, [pc, #124]	@ (8002718 <vTaskStartScheduler+0xb0>)
 800269a:	f7ff fe0f 	bl	80022bc <xTaskCreateStatic>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a1e      	ldr	r2, [pc, #120]	@ (800271c <vTaskStartScheduler+0xb4>)
 80026a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <vTaskStartScheduler+0xb4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e001      	b.n	80026b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d116      	bne.n	80026ea <vTaskStartScheduler+0x82>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	613b      	str	r3, [r7, #16]
}
 80026ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026d0:	4b13      	ldr	r3, [pc, #76]	@ (8002720 <vTaskStartScheduler+0xb8>)
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <vTaskStartScheduler+0xbc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <vTaskStartScheduler+0xc0>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026e4:	f000 fc38 	bl	8002f58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026e8:	e00f      	b.n	800270a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026f0:	d10b      	bne.n	800270a <vTaskStartScheduler+0xa2>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	60fb      	str	r3, [r7, #12]
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <vTaskStartScheduler+0x9e>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	08004054 	.word	0x08004054
 8002718:	08002b79 	.word	0x08002b79
 800271c:	2000049c 	.word	0x2000049c
 8002720:	20000498 	.word	0x20000498
 8002724:	20000484 	.word	0x20000484
 8002728:	2000047c 	.word	0x2000047c

0800272c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <vTaskSuspendAll+0x18>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a03      	ldr	r2, [pc, #12]	@ (8002744 <vTaskSuspendAll+0x18>)
 8002738:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200004a0 	.word	0x200004a0

08002748 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002756:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <xTaskResumeAll+0x118>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <xTaskResumeAll+0x2e>
	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	603b      	str	r3, [r7, #0]
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	e7fd      	b.n	8002772 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002776:	f000 fc61 	bl	800303c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800277a:	4b39      	ldr	r3, [pc, #228]	@ (8002860 <xTaskResumeAll+0x118>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3b01      	subs	r3, #1
 8002780:	4a37      	ldr	r2, [pc, #220]	@ (8002860 <xTaskResumeAll+0x118>)
 8002782:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002784:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <xTaskResumeAll+0x118>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d161      	bne.n	8002850 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800278c:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <xTaskResumeAll+0x11c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05d      	beq.n	8002850 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002794:	e02e      	b.n	80027f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <xTaskResumeAll+0x120>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3318      	adds	r3, #24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fc9c 	bl	80020e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fc97 	bl	80020e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <xTaskResumeAll+0x124>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	4a2a      	ldr	r2, [pc, #168]	@ (800286c <xTaskResumeAll+0x124>)
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <xTaskResumeAll+0x128>)
 80027d2:	441a      	add	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7ff fc25 	bl	800202a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <xTaskResumeAll+0x12c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80027ee:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <xTaskResumeAll+0x130>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <xTaskResumeAll+0x120>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1cc      	bne.n	8002796 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002802:	f000 faa7 	bl	8002d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002806:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <xTaskResumeAll+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002812:	f000 f837 	bl	8002884 <xTaskIncrementTick>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800281c:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <xTaskResumeAll+0x130>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3b01      	subs	r3, #1
 8002826:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f1      	bne.n	8002812 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <xTaskResumeAll+0x134>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002834:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <xTaskResumeAll+0x130>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800283c:	2301      	movs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <xTaskResumeAll+0x138>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002850:	f000 fc24 	bl	800309c <vPortExitCritical>

	return xAlreadyYielded;
 8002854:	68bb      	ldr	r3, [r7, #8]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200004a0 	.word	0x200004a0
 8002864:	20000478 	.word	0x20000478
 8002868:	20000438 	.word	0x20000438
 800286c:	20000480 	.word	0x20000480
 8002870:	2000037c 	.word	0x2000037c
 8002874:	20000378 	.word	0x20000378
 8002878:	2000048c 	.word	0x2000048c
 800287c:	20000488 	.word	0x20000488
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288e:	4b4f      	ldr	r3, [pc, #316]	@ (80029cc <xTaskIncrementTick+0x148>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 808f 	bne.w	80029b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002898:	4b4d      	ldr	r3, [pc, #308]	@ (80029d0 <xTaskIncrementTick+0x14c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028a0:	4a4b      	ldr	r2, [pc, #300]	@ (80029d0 <xTaskIncrementTick+0x14c>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d121      	bne.n	80028f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80028ac:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <xTaskIncrementTick+0x150>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	603b      	str	r3, [r7, #0]
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <xTaskIncrementTick+0x46>
 80028ce:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <xTaskIncrementTick+0x150>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <xTaskIncrementTick+0x154>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a3e      	ldr	r2, [pc, #248]	@ (80029d4 <xTaskIncrementTick+0x150>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4a3e      	ldr	r2, [pc, #248]	@ (80029d8 <xTaskIncrementTick+0x154>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <xTaskIncrementTick+0x158>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a3c      	ldr	r2, [pc, #240]	@ (80029dc <xTaskIncrementTick+0x158>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	f000 fa32 	bl	8002d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028f0:	4b3b      	ldr	r3, [pc, #236]	@ (80029e0 <xTaskIncrementTick+0x15c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d348      	bcc.n	800298c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028fa:	4b36      	ldr	r3, [pc, #216]	@ (80029d4 <xTaskIncrementTick+0x150>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002904:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <xTaskIncrementTick+0x15c>)
 8002906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800290a:	601a      	str	r2, [r3, #0]
					break;
 800290c:	e03e      	b.n	800298c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <xTaskIncrementTick+0x150>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d203      	bcs.n	800292e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002926:	4a2e      	ldr	r2, [pc, #184]	@ (80029e0 <xTaskIncrementTick+0x15c>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800292c:	e02e      	b.n	800298c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3304      	adds	r3, #4
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fbd4 	bl	80020e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3318      	adds	r3, #24
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fbcb 	bl	80020e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	2201      	movs	r2, #1
 8002950:	409a      	lsls	r2, r3
 8002952:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <xTaskIncrementTick+0x160>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	4a22      	ldr	r2, [pc, #136]	@ (80029e4 <xTaskIncrementTick+0x160>)
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <xTaskIncrementTick+0x164>)
 800296a:	441a      	add	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7ff fb59 	bl	800202a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <xTaskIncrementTick+0x168>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	429a      	cmp	r2, r3
 8002984:	d3b9      	bcc.n	80028fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002986:	2301      	movs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298a:	e7b6      	b.n	80028fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <xTaskIncrementTick+0x168>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002992:	4915      	ldr	r1, [pc, #84]	@ (80029e8 <xTaskIncrementTick+0x164>)
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d901      	bls.n	80029a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <xTaskIncrementTick+0x16c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e004      	b.n	80029c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80029b6:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <xTaskIncrementTick+0x170>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3301      	adds	r3, #1
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <xTaskIncrementTick+0x170>)
 80029be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80029c0:	697b      	ldr	r3, [r7, #20]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200004a0 	.word	0x200004a0
 80029d0:	2000047c 	.word	0x2000047c
 80029d4:	20000430 	.word	0x20000430
 80029d8:	20000434 	.word	0x20000434
 80029dc:	20000490 	.word	0x20000490
 80029e0:	20000498 	.word	0x20000498
 80029e4:	20000480 	.word	0x20000480
 80029e8:	2000037c 	.word	0x2000037c
 80029ec:	20000378 	.word	0x20000378
 80029f0:	2000048c 	.word	0x2000048c
 80029f4:	20000488 	.word	0x20000488

080029f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <vTaskSwitchContext+0xa4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a06:	4b26      	ldr	r3, [pc, #152]	@ (8002aa0 <vTaskSwitchContext+0xa8>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a0c:	e040      	b.n	8002a90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <vTaskSwitchContext+0xa8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a14:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <vTaskSwitchContext+0xac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f1c3 031f 	rsb	r3, r3, #31
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	491f      	ldr	r1, [pc, #124]	@ (8002aa8 <vTaskSwitchContext+0xb0>)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10b      	bne.n	8002a56 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	e7fd      	b.n	8002a52 <vTaskSwitchContext+0x5a>
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <vTaskSwitchContext+0xb0>)
 8002a62:	4413      	add	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	3308      	adds	r3, #8
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d104      	bne.n	8002a86 <vTaskSwitchContext+0x8e>
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <vTaskSwitchContext+0xb4>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200004a0 	.word	0x200004a0
 8002aa0:	2000048c 	.word	0x2000048c
 8002aa4:	20000480 	.word	0x20000480
 8002aa8:	2000037c 	.word	0x2000037c
 8002aac:	20000378 	.word	0x20000378

08002ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	60fb      	str	r3, [r7, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	e7fd      	b.n	8002ada <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fafc 	bl	80020e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <xTaskRemoveFromEventList+0xb0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11c      	bne.n	8002b2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff faf3 	bl	80020e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	2201      	movs	r2, #1
 8002b00:	409a      	lsls	r2, r3
 8002b02:	4b18      	ldr	r3, [pc, #96]	@ (8002b64 <xTaskRemoveFromEventList+0xb4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <xTaskRemoveFromEventList+0xb4>)
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <xTaskRemoveFromEventList+0xb8>)
 8002b1a:	441a      	add	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f7ff fa81 	bl	800202a <vListInsertEnd>
 8002b28:	e005      	b.n	8002b36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	3318      	adds	r3, #24
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480e      	ldr	r0, [pc, #56]	@ (8002b6c <xTaskRemoveFromEventList+0xbc>)
 8002b32:	f7ff fa7a 	bl	800202a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <xTaskRemoveFromEventList+0xc0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d905      	bls.n	8002b50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <xTaskRemoveFromEventList+0xc4>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e001      	b.n	8002b54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b54:	697b      	ldr	r3, [r7, #20]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200004a0 	.word	0x200004a0
 8002b64:	20000480 	.word	0x20000480
 8002b68:	2000037c 	.word	0x2000037c
 8002b6c:	20000438 	.word	0x20000438
 8002b70:	20000378 	.word	0x20000378
 8002b74:	2000048c 	.word	0x2000048c

08002b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b80:	f000 f852 	bl	8002c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <prvIdleTask+0x28>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d9f9      	bls.n	8002b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <prvIdleTask+0x2c>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b9c:	e7f0      	b.n	8002b80 <prvIdleTask+0x8>
 8002b9e:	bf00      	nop
 8002ba0:	2000037c 	.word	0x2000037c
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	e00c      	b.n	8002bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <prvInitialiseTaskLists+0x60>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fa06 	bl	8001fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d9ef      	bls.n	8002bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002bd4:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <prvInitialiseTaskLists+0x64>)
 8002bd6:	f7ff f9fd 	bl	8001fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bda:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <prvInitialiseTaskLists+0x68>)
 8002bdc:	f7ff f9fa 	bl	8001fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002be0:	480c      	ldr	r0, [pc, #48]	@ (8002c14 <prvInitialiseTaskLists+0x6c>)
 8002be2:	f7ff f9f7 	bl	8001fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002be6:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <prvInitialiseTaskLists+0x70>)
 8002be8:	f7ff f9f4 	bl	8001fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002bec:	480b      	ldr	r0, [pc, #44]	@ (8002c1c <prvInitialiseTaskLists+0x74>)
 8002bee:	f7ff f9f1 	bl	8001fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <prvInitialiseTaskLists+0x78>)
 8002bf4:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <prvInitialiseTaskLists+0x64>)
 8002bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <prvInitialiseTaskLists+0x7c>)
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <prvInitialiseTaskLists+0x68>)
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000037c 	.word	0x2000037c
 8002c0c:	20000408 	.word	0x20000408
 8002c10:	2000041c 	.word	0x2000041c
 8002c14:	20000438 	.word	0x20000438
 8002c18:	2000044c 	.word	0x2000044c
 8002c1c:	20000464 	.word	0x20000464
 8002c20:	20000430 	.word	0x20000430
 8002c24:	20000434 	.word	0x20000434

08002c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c2e:	e019      	b.n	8002c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c30:	f000 fa04 	bl	800303c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c34:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <prvCheckTasksWaitingTermination+0x50>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fa4d 	bl	80020e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <prvCheckTasksWaitingTermination+0x54>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c7c <prvCheckTasksWaitingTermination+0x54>)
 8002c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <prvCheckTasksWaitingTermination+0x58>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <prvCheckTasksWaitingTermination+0x58>)
 8002c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c5a:	f000 fa1f 	bl	800309c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f848 	bl	8002cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <prvCheckTasksWaitingTermination+0x58>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e1      	bne.n	8002c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000044c 	.word	0x2000044c
 8002c7c:	20000478 	.word	0x20000478
 8002c80:	20000460 	.word	0x20000460

08002c84 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002c90:	e005      	b.n	8002c9e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3301      	adds	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2ba5      	cmp	r3, #165	@ 0xa5
 8002ca4:	d0f5      	beq.n	8002c92 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b29b      	uxth	r3, r3
	}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
	...

08002cbc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <uxTaskGetStackHighWaterMark+0x14>
 8002cca:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <uxTaskGetStackHighWaterMark+0x34>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <uxTaskGetStackHighWaterMark+0x16>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002cda:	6938      	ldr	r0, [r7, #16]
 8002cdc:	f7ff ffd2 	bl	8002c84 <prvTaskCheckFreeStackSpace>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
	}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000378 	.word	0x20000378

08002cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb26 	bl	800335c <vPortFree>
				vPortFree( pxTCB );
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb23 	bl	800335c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d16:	e019      	b.n	8002d4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d103      	bne.n	8002d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fb1a 	bl	800335c <vPortFree>
	}
 8002d28:	e010      	b.n	8002d4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d00b      	beq.n	8002d4c <prvDeleteTCB+0x58>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	60fb      	str	r3, [r7, #12]
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <prvDeleteTCB+0x54>
	}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <prvResetNextTaskUnblockTime+0x38>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <prvResetNextTaskUnblockTime+0x3c>)
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d6c:	e008      	b.n	8002d80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d6e:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <prvResetNextTaskUnblockTime+0x38>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <prvResetNextTaskUnblockTime+0x3c>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000430 	.word	0x20000430
 8002d90:	20000498 	.word	0x20000498

08002d94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da4:	4b28      	ldr	r3, [pc, #160]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f998 	bl	80020e0 <uxListRemove>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	4a20      	ldr	r2, [pc, #128]	@ (8002e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd4:	d10a      	bne.n	8002dec <prvAddCurrentTaskToDelayedList+0x58>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3304      	adds	r3, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	481a      	ldr	r0, [pc, #104]	@ (8002e50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002de6:	f7ff f920 	bl	800202a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002dea:	e026      	b.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d209      	bcs.n	8002e18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7ff f92d 	bl	8002070 <vListInsert>
}
 8002e16:	e010      	b.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7ff f923 	bl	8002070 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d202      	bcs.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e34:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6013      	str	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000047c 	.word	0x2000047c
 8002e48:	20000378 	.word	0x20000378
 8002e4c:	20000480 	.word	0x20000480
 8002e50:	20000464 	.word	0x20000464
 8002e54:	20000434 	.word	0x20000434
 8002e58:	20000430 	.word	0x20000430
 8002e5c:	20000498 	.word	0x20000498

08002e60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0201 	bic.w	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b04      	subs	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e90:	4a08      	ldr	r2, [pc, #32]	@ (8002eb4 <pxPortInitialiseStack+0x54>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b14      	subs	r3, #20
 8002e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b20      	subs	r3, #32
 8002ea6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	08002eb9 	.word	0x08002eb9

08002eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <prvTaskExitError+0x54>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eca:	d00b      	beq.n	8002ee4 <prvTaskExitError+0x2c>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	60fb      	str	r3, [r7, #12]
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <prvTaskExitError+0x28>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	60bb      	str	r3, [r7, #8]
}
 8002ef6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ef8:	bf00      	nop
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0fc      	beq.n	8002efa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f10:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <pxCurrentTCBConst2>)
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f1a:	f380 8809 	msr	PSP, r0
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f380 8811 	msr	BASEPRI, r0
 8002f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002f2e:	4770      	bx	lr

08002f30 <pxCurrentTCBConst2>:
 8002f30:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop

08002f38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002f38:	4806      	ldr	r0, [pc, #24]	@ (8002f54 <prvPortStartFirstTask+0x1c>)
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f380 8808 	msr	MSP, r0
 8002f42:	b662      	cpsie	i
 8002f44:	b661      	cpsie	f
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	df00      	svc	0
 8002f50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f52:	bf00      	nop
 8002f54:	e000ed08 	.word	0xe000ed08

08002f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f5e:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <xPortStartScheduler+0xd0>)
 8002f60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	22ff      	movs	r2, #255	@ 0xff
 8002f6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <xPortStartScheduler+0xd4>)
 8002f84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002f88:	2207      	movs	r2, #7
 8002f8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f8c:	e009      	b.n	8002fa2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002f8e:	4b28      	ldr	r3, [pc, #160]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	4a26      	ldr	r2, [pc, #152]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002f96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b80      	cmp	r3, #128	@ 0x80
 8002fac:	d0ef      	beq.n	8002f8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d00b      	beq.n	8002fd2 <xPortStartScheduler+0x7a>
	__asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fd2:	4b17      	ldr	r3, [pc, #92]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002fda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fe4:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <xPortStartScheduler+0xd8>)
 8002fe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <xPortStartScheduler+0xdc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8003034 <xPortStartScheduler+0xdc>)
 8002ff6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ffa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <xPortStartScheduler+0xdc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <xPortStartScheduler+0xdc>)
 8003002:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003006:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003008:	f000 f8b8 	bl	800317c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <xPortStartScheduler+0xe0>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003012:	f7ff ff91 	bl	8002f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003016:	f7ff fcef 	bl	80029f8 <vTaskSwitchContext>
	prvTaskExitError();
 800301a:	f7ff ff4d 	bl	8002eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000e400 	.word	0xe000e400
 800302c:	200004a4 	.word	0x200004a4
 8003030:	200004a8 	.word	0x200004a8
 8003034:	e000ed20 	.word	0xe000ed20
 8003038:	2000000c 	.word	0x2000000c

0800303c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	607b      	str	r3, [r7, #4]
}
 8003054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003056:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <vPortEnterCritical+0x58>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <vPortEnterCritical+0x58>)
 800305e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <vPortEnterCritical+0x58>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d110      	bne.n	800308a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <vPortEnterCritical+0x5c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <vPortEnterCritical+0x4e>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	603b      	str	r3, [r7, #0]
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	e7fd      	b.n	8003086 <vPortEnterCritical+0x4a>
	}
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	2000000c 	.word	0x2000000c
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80030a2:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <vPortExitCritical+0x50>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <vPortExitCritical+0x26>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	607b      	str	r3, [r7, #4]
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <vPortExitCritical+0x50>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <vPortExitCritical+0x50>)
 80030ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80030cc:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <vPortExitCritical+0x50>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <vPortExitCritical+0x44>
 80030d4:	2300      	movs	r3, #0
 80030d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	2000000c 	.word	0x2000000c

080030f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030f0:	f3ef 8009 	mrs	r0, PSP
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <pxCurrentTCBConst>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003100:	6010      	str	r0, [r2, #0]
 8003102:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003106:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800310a:	f380 8811 	msr	BASEPRI, r0
 800310e:	f7ff fc73 	bl	80029f8 <vTaskSwitchContext>
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f380 8811 	msr	BASEPRI, r0
 800311a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	6808      	ldr	r0, [r1, #0]
 8003122:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003126:	f380 8809 	msr	PSP, r0
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	4770      	bx	lr

08003130 <pxCurrentTCBConst>:
 8003130:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop

08003138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	607b      	str	r3, [r7, #4]
}
 8003150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003152:	f7ff fb97 	bl	8002884 <xTaskIncrementTick>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <SysTick_Handler+0x40>)
 800315e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	2300      	movs	r3, #0
 8003166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f383 8811 	msr	BASEPRI, r3
}
 800316e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <vPortSetupTimerInterrupt+0x30>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <vPortSetupTimerInterrupt+0x34>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <vPortSetupTimerInterrupt+0x38>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <vPortSetupTimerInterrupt+0x3c>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a08      	ldr	r2, [pc, #32]	@ (80031bc <vPortSetupTimerInterrupt+0x40>)
 800319a:	3b01      	subs	r3, #1
 800319c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800319e:	4b03      	ldr	r3, [pc, #12]	@ (80031ac <vPortSetupTimerInterrupt+0x30>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	e000e010 	.word	0xe000e010
 80031b0:	e000e018 	.word	0xe000e018
 80031b4:	20000000 	.word	0x20000000
 80031b8:	10624dd3 	.word	0x10624dd3
 80031bc:	e000e014 	.word	0xe000e014

080031c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80031cc:	f7ff faae 	bl	800272c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031d0:	4b5c      	ldr	r3, [pc, #368]	@ (8003344 <pvPortMalloc+0x184>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80031d8:	f000 f92e 	bl	8003438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003348 <pvPortMalloc+0x188>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 8095 	bne.w	8003314 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01e      	beq.n	800322e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80031f0:	2208      	movs	r2, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f023 0307 	bic.w	r3, r3, #7
 8003208:	3308      	adds	r3, #8
 800320a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <pvPortMalloc+0x6e>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	617b      	str	r3, [r7, #20]
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	e7fd      	b.n	800322a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d06f      	beq.n	8003314 <pvPortMalloc+0x154>
 8003234:	4b45      	ldr	r3, [pc, #276]	@ (800334c <pvPortMalloc+0x18c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d86a      	bhi.n	8003314 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800323e:	4b44      	ldr	r3, [pc, #272]	@ (8003350 <pvPortMalloc+0x190>)
 8003240:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003242:	4b43      	ldr	r3, [pc, #268]	@ (8003350 <pvPortMalloc+0x190>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003248:	e004      	b.n	8003254 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d903      	bls.n	8003266 <pvPortMalloc+0xa6>
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f1      	bne.n	800324a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003266:	4b37      	ldr	r3, [pc, #220]	@ (8003344 <pvPortMalloc+0x184>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326c:	429a      	cmp	r2, r3
 800326e:	d051      	beq.n	8003314 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2208      	movs	r2, #8
 8003276:	4413      	add	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad2      	subs	r2, r2, r3
 800328a:	2308      	movs	r3, #8
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	429a      	cmp	r2, r3
 8003290:	d920      	bls.n	80032d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <pvPortMalloc+0xfc>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	613b      	str	r3, [r7, #16]
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ce:	69b8      	ldr	r0, [r7, #24]
 80032d0:	f000 f914 	bl	80034fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032d4:	4b1d      	ldr	r3, [pc, #116]	@ (800334c <pvPortMalloc+0x18c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <pvPortMalloc+0x18c>)
 80032e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <pvPortMalloc+0x18c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <pvPortMalloc+0x194>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d203      	bcs.n	80032f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <pvPortMalloc+0x18c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	@ (8003354 <pvPortMalloc+0x194>)
 80032f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <pvPortMalloc+0x188>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	431a      	orrs	r2, r3
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <pvPortMalloc+0x198>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <pvPortMalloc+0x198>)
 8003312:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003314:	f7ff fa18 	bl	8002748 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <pvPortMalloc+0x17a>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	60fb      	str	r3, [r7, #12]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <pvPortMalloc+0x176>
	return pvReturn;
 800333a:	69fb      	ldr	r3, [r7, #28]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3728      	adds	r7, #40	@ 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200010b4 	.word	0x200010b4
 8003348:	200010c8 	.word	0x200010c8
 800334c:	200010b8 	.word	0x200010b8
 8003350:	200010ac 	.word	0x200010ac
 8003354:	200010bc 	.word	0x200010bc
 8003358:	200010c0 	.word	0x200010c0

0800335c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04f      	beq.n	800340e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800336e:	2308      	movs	r3, #8
 8003370:	425b      	negs	r3, r3
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <vPortFree+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <vPortFree+0x46>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60fb      	str	r3, [r7, #12]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <vPortFree+0x66>
	__asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	60bb      	str	r3, [r7, #8]
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <vPortFree+0xbc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01e      	beq.n	800340e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11a      	bne.n	800340e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <vPortFree+0xbc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80033e8:	f7ff f9a0 	bl	800272c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <vPortFree+0xc0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	4a09      	ldr	r2, [pc, #36]	@ (800341c <vPortFree+0xc0>)
 80033f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033fa:	6938      	ldr	r0, [r7, #16]
 80033fc:	f000 f87e 	bl	80034fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <vPortFree+0xc4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a06      	ldr	r2, [pc, #24]	@ (8003420 <vPortFree+0xc4>)
 8003408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800340a:	f7ff f99d 	bl	8002748 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200010c8 	.word	0x200010c8
 800341c:	200010b8 	.word	0x200010b8
 8003420:	200010c4 	.word	0x200010c4

08003424 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8003428:	4b02      	ldr	r3, [pc, #8]	@ (8003434 <xPortGetFreeHeapSize+0x10>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	200010b8 	.word	0x200010b8

08003438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800343e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <prvHeapInit+0xac>)
 8003446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3307      	adds	r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0307 	bic.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	4a1f      	ldr	r2, [pc, #124]	@ (80034e4 <prvHeapInit+0xac>)
 8003468:	4413      	add	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <prvHeapInit+0xb0>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003476:	4b1c      	ldr	r3, [pc, #112]	@ (80034e8 <prvHeapInit+0xb0>)
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003484:	2208      	movs	r2, #8
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <prvHeapInit+0xb4>)
 8003498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800349a:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <prvHeapInit+0xb4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <prvHeapInit+0xb4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <prvHeapInit+0xb4>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <prvHeapInit+0xb8>)
 80034c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <prvHeapInit+0xbc>)
 80034ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <prvHeapInit+0xc0>)
 80034d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	200004ac 	.word	0x200004ac
 80034e8:	200010ac 	.word	0x200010ac
 80034ec:	200010b4 	.word	0x200010b4
 80034f0:	200010bc 	.word	0x200010bc
 80034f4:	200010b8 	.word	0x200010b8
 80034f8:	200010c8 	.word	0x200010c8

080034fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003504:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <prvInsertBlockIntoFreeList+0xa8>)
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e002      	b.n	8003510 <prvInsertBlockIntoFreeList+0x14>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d8f7      	bhi.n	800350a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	4413      	add	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d108      	bne.n	800353e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	441a      	add	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d118      	bne.n	8003584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b14      	ldr	r3, [pc, #80]	@ (80035a8 <prvInsertBlockIntoFreeList+0xac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d00d      	beq.n	800357a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e008      	b.n	800358c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <prvInsertBlockIntoFreeList+0xac>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e003      	b.n	800358c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d002      	beq.n	800359a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	200010ac 	.word	0x200010ac
 80035a8:	200010b4 	.word	0x200010b4

080035ac <siprintf>:
 80035ac:	b40e      	push	{r1, r2, r3}
 80035ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035b2:	b510      	push	{r4, lr}
 80035b4:	2400      	movs	r4, #0
 80035b6:	b09d      	sub	sp, #116	@ 0x74
 80035b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035ba:	9002      	str	r0, [sp, #8]
 80035bc:	9006      	str	r0, [sp, #24]
 80035be:	9107      	str	r1, [sp, #28]
 80035c0:	9104      	str	r1, [sp, #16]
 80035c2:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <siprintf+0x3c>)
 80035c4:	4909      	ldr	r1, [pc, #36]	@ (80035ec <siprintf+0x40>)
 80035c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ca:	9105      	str	r1, [sp, #20]
 80035cc:	6800      	ldr	r0, [r0, #0]
 80035ce:	a902      	add	r1, sp, #8
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80035d4:	f000 f9a0 	bl	8003918 <_svfiprintf_r>
 80035d8:	9b02      	ldr	r3, [sp, #8]
 80035da:	701c      	strb	r4, [r3, #0]
 80035dc:	b01d      	add	sp, #116	@ 0x74
 80035de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e2:	b003      	add	sp, #12
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000010 	.word	0x20000010
 80035ec:	ffff0208 	.word	0xffff0208

080035f0 <memset>:
 80035f0:	4603      	mov	r3, r0
 80035f2:	4402      	add	r2, r0
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d100      	bne.n	80035fa <memset+0xa>
 80035f8:	4770      	bx	lr
 80035fa:	f803 1b01 	strb.w	r1, [r3], #1
 80035fe:	e7f9      	b.n	80035f4 <memset+0x4>

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	@ (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000010 	.word	0x20000010

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	2600      	movs	r6, #0
 8003610:	4d0c      	ldr	r5, [pc, #48]	@ (8003644 <__libc_init_array+0x38>)
 8003612:	4c0d      	ldr	r4, [pc, #52]	@ (8003648 <__libc_init_array+0x3c>)
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	f000 fc76 	bl	8003f0c <_init>
 8003620:	2600      	movs	r6, #0
 8003622:	4d0a      	ldr	r5, [pc, #40]	@ (800364c <__libc_init_array+0x40>)
 8003624:	4c0a      	ldr	r4, [pc, #40]	@ (8003650 <__libc_init_array+0x44>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	080040c4 	.word	0x080040c4
 8003648:	080040c4 	.word	0x080040c4
 800364c:	080040c4 	.word	0x080040c4
 8003650:	080040c8 	.word	0x080040c8

08003654 <__retarget_lock_acquire_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_release_recursive>:
 8003656:	4770      	bx	lr

08003658 <memcpy>:
 8003658:	440a      	add	r2, r1
 800365a:	4291      	cmp	r1, r2
 800365c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003660:	d100      	bne.n	8003664 <memcpy+0xc>
 8003662:	4770      	bx	lr
 8003664:	b510      	push	{r4, lr}
 8003666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800366a:	4291      	cmp	r1, r2
 800366c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003670:	d1f9      	bne.n	8003666 <memcpy+0xe>
 8003672:	bd10      	pop	{r4, pc}

08003674 <_free_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	2900      	cmp	r1, #0
 800367a:	d040      	beq.n	80036fe <_free_r+0x8a>
 800367c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003680:	1f0c      	subs	r4, r1, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	bfb8      	it	lt
 8003686:	18e4      	addlt	r4, r4, r3
 8003688:	f000 f8de 	bl	8003848 <__malloc_lock>
 800368c:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <_free_r+0x8c>)
 800368e:	6813      	ldr	r3, [r2, #0]
 8003690:	b933      	cbnz	r3, 80036a0 <_free_r+0x2c>
 8003692:	6063      	str	r3, [r4, #4]
 8003694:	6014      	str	r4, [r2, #0]
 8003696:	4628      	mov	r0, r5
 8003698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369c:	f000 b8da 	b.w	8003854 <__malloc_unlock>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d908      	bls.n	80036b6 <_free_r+0x42>
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	1821      	adds	r1, r4, r0
 80036a8:	428b      	cmp	r3, r1
 80036aa:	bf01      	itttt	eq
 80036ac:	6819      	ldreq	r1, [r3, #0]
 80036ae:	685b      	ldreq	r3, [r3, #4]
 80036b0:	1809      	addeq	r1, r1, r0
 80036b2:	6021      	streq	r1, [r4, #0]
 80036b4:	e7ed      	b.n	8003692 <_free_r+0x1e>
 80036b6:	461a      	mov	r2, r3
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b10b      	cbz	r3, 80036c0 <_free_r+0x4c>
 80036bc:	42a3      	cmp	r3, r4
 80036be:	d9fa      	bls.n	80036b6 <_free_r+0x42>
 80036c0:	6811      	ldr	r1, [r2, #0]
 80036c2:	1850      	adds	r0, r2, r1
 80036c4:	42a0      	cmp	r0, r4
 80036c6:	d10b      	bne.n	80036e0 <_free_r+0x6c>
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	4401      	add	r1, r0
 80036cc:	1850      	adds	r0, r2, r1
 80036ce:	4283      	cmp	r3, r0
 80036d0:	6011      	str	r1, [r2, #0]
 80036d2:	d1e0      	bne.n	8003696 <_free_r+0x22>
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4408      	add	r0, r1
 80036da:	6010      	str	r0, [r2, #0]
 80036dc:	6053      	str	r3, [r2, #4]
 80036de:	e7da      	b.n	8003696 <_free_r+0x22>
 80036e0:	d902      	bls.n	80036e8 <_free_r+0x74>
 80036e2:	230c      	movs	r3, #12
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	e7d6      	b.n	8003696 <_free_r+0x22>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	1821      	adds	r1, r4, r0
 80036ec:	428b      	cmp	r3, r1
 80036ee:	bf01      	itttt	eq
 80036f0:	6819      	ldreq	r1, [r3, #0]
 80036f2:	685b      	ldreq	r3, [r3, #4]
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	6063      	str	r3, [r4, #4]
 80036fa:	6054      	str	r4, [r2, #4]
 80036fc:	e7cb      	b.n	8003696 <_free_r+0x22>
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20001210 	.word	0x20001210

08003704 <sbrk_aligned>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0f      	ldr	r6, [pc, #60]	@ (8003744 <sbrk_aligned+0x40>)
 8003708:	460c      	mov	r4, r1
 800370a:	6831      	ldr	r1, [r6, #0]
 800370c:	4605      	mov	r5, r0
 800370e:	b911      	cbnz	r1, 8003716 <sbrk_aligned+0x12>
 8003710:	f000 fba8 	bl	8003e64 <_sbrk_r>
 8003714:	6030      	str	r0, [r6, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	f000 fba3 	bl	8003e64 <_sbrk_r>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	d103      	bne.n	800372a <sbrk_aligned+0x26>
 8003722:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003726:	4620      	mov	r0, r4
 8003728:	bd70      	pop	{r4, r5, r6, pc}
 800372a:	1cc4      	adds	r4, r0, #3
 800372c:	f024 0403 	bic.w	r4, r4, #3
 8003730:	42a0      	cmp	r0, r4
 8003732:	d0f8      	beq.n	8003726 <sbrk_aligned+0x22>
 8003734:	1a21      	subs	r1, r4, r0
 8003736:	4628      	mov	r0, r5
 8003738:	f000 fb94 	bl	8003e64 <_sbrk_r>
 800373c:	3001      	adds	r0, #1
 800373e:	d1f2      	bne.n	8003726 <sbrk_aligned+0x22>
 8003740:	e7ef      	b.n	8003722 <sbrk_aligned+0x1e>
 8003742:	bf00      	nop
 8003744:	2000120c 	.word	0x2000120c

08003748 <_malloc_r>:
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	1ccd      	adds	r5, r1, #3
 800374e:	f025 0503 	bic.w	r5, r5, #3
 8003752:	3508      	adds	r5, #8
 8003754:	2d0c      	cmp	r5, #12
 8003756:	bf38      	it	cc
 8003758:	250c      	movcc	r5, #12
 800375a:	2d00      	cmp	r5, #0
 800375c:	4606      	mov	r6, r0
 800375e:	db01      	blt.n	8003764 <_malloc_r+0x1c>
 8003760:	42a9      	cmp	r1, r5
 8003762:	d904      	bls.n	800376e <_malloc_r+0x26>
 8003764:	230c      	movs	r3, #12
 8003766:	6033      	str	r3, [r6, #0]
 8003768:	2000      	movs	r0, #0
 800376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800376e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003844 <_malloc_r+0xfc>
 8003772:	f000 f869 	bl	8003848 <__malloc_lock>
 8003776:	f8d8 3000 	ldr.w	r3, [r8]
 800377a:	461c      	mov	r4, r3
 800377c:	bb44      	cbnz	r4, 80037d0 <_malloc_r+0x88>
 800377e:	4629      	mov	r1, r5
 8003780:	4630      	mov	r0, r6
 8003782:	f7ff ffbf 	bl	8003704 <sbrk_aligned>
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	4604      	mov	r4, r0
 800378a:	d158      	bne.n	800383e <_malloc_r+0xf6>
 800378c:	f8d8 4000 	ldr.w	r4, [r8]
 8003790:	4627      	mov	r7, r4
 8003792:	2f00      	cmp	r7, #0
 8003794:	d143      	bne.n	800381e <_malloc_r+0xd6>
 8003796:	2c00      	cmp	r4, #0
 8003798:	d04b      	beq.n	8003832 <_malloc_r+0xea>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	4639      	mov	r1, r7
 800379e:	4630      	mov	r0, r6
 80037a0:	eb04 0903 	add.w	r9, r4, r3
 80037a4:	f000 fb5e 	bl	8003e64 <_sbrk_r>
 80037a8:	4581      	cmp	r9, r0
 80037aa:	d142      	bne.n	8003832 <_malloc_r+0xea>
 80037ac:	6821      	ldr	r1, [r4, #0]
 80037ae:	4630      	mov	r0, r6
 80037b0:	1a6d      	subs	r5, r5, r1
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7ff ffa6 	bl	8003704 <sbrk_aligned>
 80037b8:	3001      	adds	r0, #1
 80037ba:	d03a      	beq.n	8003832 <_malloc_r+0xea>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	442b      	add	r3, r5
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	f8d8 3000 	ldr.w	r3, [r8]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	bb62      	cbnz	r2, 8003824 <_malloc_r+0xdc>
 80037ca:	f8c8 7000 	str.w	r7, [r8]
 80037ce:	e00f      	b.n	80037f0 <_malloc_r+0xa8>
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	1b52      	subs	r2, r2, r5
 80037d4:	d420      	bmi.n	8003818 <_malloc_r+0xd0>
 80037d6:	2a0b      	cmp	r2, #11
 80037d8:	d917      	bls.n	800380a <_malloc_r+0xc2>
 80037da:	1961      	adds	r1, r4, r5
 80037dc:	42a3      	cmp	r3, r4
 80037de:	6025      	str	r5, [r4, #0]
 80037e0:	bf18      	it	ne
 80037e2:	6059      	strne	r1, [r3, #4]
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	bf08      	it	eq
 80037e8:	f8c8 1000 	streq.w	r1, [r8]
 80037ec:	5162      	str	r2, [r4, r5]
 80037ee:	604b      	str	r3, [r1, #4]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f82f 	bl	8003854 <__malloc_unlock>
 80037f6:	f104 000b 	add.w	r0, r4, #11
 80037fa:	1d23      	adds	r3, r4, #4
 80037fc:	f020 0007 	bic.w	r0, r0, #7
 8003800:	1ac2      	subs	r2, r0, r3
 8003802:	bf1c      	itt	ne
 8003804:	1a1b      	subne	r3, r3, r0
 8003806:	50a3      	strne	r3, [r4, r2]
 8003808:	e7af      	b.n	800376a <_malloc_r+0x22>
 800380a:	6862      	ldr	r2, [r4, #4]
 800380c:	42a3      	cmp	r3, r4
 800380e:	bf0c      	ite	eq
 8003810:	f8c8 2000 	streq.w	r2, [r8]
 8003814:	605a      	strne	r2, [r3, #4]
 8003816:	e7eb      	b.n	80037f0 <_malloc_r+0xa8>
 8003818:	4623      	mov	r3, r4
 800381a:	6864      	ldr	r4, [r4, #4]
 800381c:	e7ae      	b.n	800377c <_malloc_r+0x34>
 800381e:	463c      	mov	r4, r7
 8003820:	687f      	ldr	r7, [r7, #4]
 8003822:	e7b6      	b.n	8003792 <_malloc_r+0x4a>
 8003824:	461a      	mov	r2, r3
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	42a3      	cmp	r3, r4
 800382a:	d1fb      	bne.n	8003824 <_malloc_r+0xdc>
 800382c:	2300      	movs	r3, #0
 800382e:	6053      	str	r3, [r2, #4]
 8003830:	e7de      	b.n	80037f0 <_malloc_r+0xa8>
 8003832:	230c      	movs	r3, #12
 8003834:	4630      	mov	r0, r6
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	f000 f80c 	bl	8003854 <__malloc_unlock>
 800383c:	e794      	b.n	8003768 <_malloc_r+0x20>
 800383e:	6005      	str	r5, [r0, #0]
 8003840:	e7d6      	b.n	80037f0 <_malloc_r+0xa8>
 8003842:	bf00      	nop
 8003844:	20001210 	.word	0x20001210

08003848 <__malloc_lock>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__malloc_lock+0x8>)
 800384a:	f7ff bf03 	b.w	8003654 <__retarget_lock_acquire_recursive>
 800384e:	bf00      	nop
 8003850:	20001208 	.word	0x20001208

08003854 <__malloc_unlock>:
 8003854:	4801      	ldr	r0, [pc, #4]	@ (800385c <__malloc_unlock+0x8>)
 8003856:	f7ff befe 	b.w	8003656 <__retarget_lock_release_recursive>
 800385a:	bf00      	nop
 800385c:	20001208 	.word	0x20001208

08003860 <__ssputs_r>:
 8003860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	461f      	mov	r7, r3
 8003866:	688e      	ldr	r6, [r1, #8]
 8003868:	4682      	mov	sl, r0
 800386a:	42be      	cmp	r6, r7
 800386c:	460c      	mov	r4, r1
 800386e:	4690      	mov	r8, r2
 8003870:	680b      	ldr	r3, [r1, #0]
 8003872:	d82d      	bhi.n	80038d0 <__ssputs_r+0x70>
 8003874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003878:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800387c:	d026      	beq.n	80038cc <__ssputs_r+0x6c>
 800387e:	6965      	ldr	r5, [r4, #20]
 8003880:	6909      	ldr	r1, [r1, #16]
 8003882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003886:	eba3 0901 	sub.w	r9, r3, r1
 800388a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800388e:	1c7b      	adds	r3, r7, #1
 8003890:	444b      	add	r3, r9
 8003892:	106d      	asrs	r5, r5, #1
 8003894:	429d      	cmp	r5, r3
 8003896:	bf38      	it	cc
 8003898:	461d      	movcc	r5, r3
 800389a:	0553      	lsls	r3, r2, #21
 800389c:	d527      	bpl.n	80038ee <__ssputs_r+0x8e>
 800389e:	4629      	mov	r1, r5
 80038a0:	f7ff ff52 	bl	8003748 <_malloc_r>
 80038a4:	4606      	mov	r6, r0
 80038a6:	b360      	cbz	r0, 8003902 <__ssputs_r+0xa2>
 80038a8:	464a      	mov	r2, r9
 80038aa:	6921      	ldr	r1, [r4, #16]
 80038ac:	f7ff fed4 	bl	8003658 <memcpy>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	6126      	str	r6, [r4, #16]
 80038be:	444e      	add	r6, r9
 80038c0:	6026      	str	r6, [r4, #0]
 80038c2:	463e      	mov	r6, r7
 80038c4:	6165      	str	r5, [r4, #20]
 80038c6:	eba5 0509 	sub.w	r5, r5, r9
 80038ca:	60a5      	str	r5, [r4, #8]
 80038cc:	42be      	cmp	r6, r7
 80038ce:	d900      	bls.n	80038d2 <__ssputs_r+0x72>
 80038d0:	463e      	mov	r6, r7
 80038d2:	4632      	mov	r2, r6
 80038d4:	4641      	mov	r1, r8
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	f000 faaa 	bl	8003e30 <memmove>
 80038dc:	2000      	movs	r0, #0
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	1b9b      	subs	r3, r3, r6
 80038e2:	60a3      	str	r3, [r4, #8]
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4433      	add	r3, r6
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ee:	462a      	mov	r2, r5
 80038f0:	f000 fad6 	bl	8003ea0 <_realloc_r>
 80038f4:	4606      	mov	r6, r0
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d1e0      	bne.n	80038bc <__ssputs_r+0x5c>
 80038fa:	4650      	mov	r0, sl
 80038fc:	6921      	ldr	r1, [r4, #16]
 80038fe:	f7ff feb9 	bl	8003674 <_free_r>
 8003902:	230c      	movs	r3, #12
 8003904:	f8ca 3000 	str.w	r3, [sl]
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800390e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	e7e9      	b.n	80038ea <__ssputs_r+0x8a>
	...

08003918 <_svfiprintf_r>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	4698      	mov	r8, r3
 800391e:	898b      	ldrh	r3, [r1, #12]
 8003920:	4607      	mov	r7, r0
 8003922:	061b      	lsls	r3, r3, #24
 8003924:	460d      	mov	r5, r1
 8003926:	4614      	mov	r4, r2
 8003928:	b09d      	sub	sp, #116	@ 0x74
 800392a:	d510      	bpl.n	800394e <_svfiprintf_r+0x36>
 800392c:	690b      	ldr	r3, [r1, #16]
 800392e:	b973      	cbnz	r3, 800394e <_svfiprintf_r+0x36>
 8003930:	2140      	movs	r1, #64	@ 0x40
 8003932:	f7ff ff09 	bl	8003748 <_malloc_r>
 8003936:	6028      	str	r0, [r5, #0]
 8003938:	6128      	str	r0, [r5, #16]
 800393a:	b930      	cbnz	r0, 800394a <_svfiprintf_r+0x32>
 800393c:	230c      	movs	r3, #12
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003944:	b01d      	add	sp, #116	@ 0x74
 8003946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394a:	2340      	movs	r3, #64	@ 0x40
 800394c:	616b      	str	r3, [r5, #20]
 800394e:	2300      	movs	r3, #0
 8003950:	9309      	str	r3, [sp, #36]	@ 0x24
 8003952:	2320      	movs	r3, #32
 8003954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003958:	2330      	movs	r3, #48	@ 0x30
 800395a:	f04f 0901 	mov.w	r9, #1
 800395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003962:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003afc <_svfiprintf_r+0x1e4>
 8003966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800396a:	4623      	mov	r3, r4
 800396c:	469a      	mov	sl, r3
 800396e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003972:	b10a      	cbz	r2, 8003978 <_svfiprintf_r+0x60>
 8003974:	2a25      	cmp	r2, #37	@ 0x25
 8003976:	d1f9      	bne.n	800396c <_svfiprintf_r+0x54>
 8003978:	ebba 0b04 	subs.w	fp, sl, r4
 800397c:	d00b      	beq.n	8003996 <_svfiprintf_r+0x7e>
 800397e:	465b      	mov	r3, fp
 8003980:	4622      	mov	r2, r4
 8003982:	4629      	mov	r1, r5
 8003984:	4638      	mov	r0, r7
 8003986:	f7ff ff6b 	bl	8003860 <__ssputs_r>
 800398a:	3001      	adds	r0, #1
 800398c:	f000 80a7 	beq.w	8003ade <_svfiprintf_r+0x1c6>
 8003990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003992:	445a      	add	r2, fp
 8003994:	9209      	str	r2, [sp, #36]	@ 0x24
 8003996:	f89a 3000 	ldrb.w	r3, [sl]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 809f 	beq.w	8003ade <_svfiprintf_r+0x1c6>
 80039a0:	2300      	movs	r3, #0
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039aa:	f10a 0a01 	add.w	sl, sl, #1
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	9307      	str	r3, [sp, #28]
 80039b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80039b8:	4654      	mov	r4, sl
 80039ba:	2205      	movs	r2, #5
 80039bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c0:	484e      	ldr	r0, [pc, #312]	@ (8003afc <_svfiprintf_r+0x1e4>)
 80039c2:	f000 fa5f 	bl	8003e84 <memchr>
 80039c6:	9a04      	ldr	r2, [sp, #16]
 80039c8:	b9d8      	cbnz	r0, 8003a02 <_svfiprintf_r+0xea>
 80039ca:	06d0      	lsls	r0, r2, #27
 80039cc:	bf44      	itt	mi
 80039ce:	2320      	movmi	r3, #32
 80039d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039d4:	0711      	lsls	r1, r2, #28
 80039d6:	bf44      	itt	mi
 80039d8:	232b      	movmi	r3, #43	@ 0x2b
 80039da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039de:	f89a 3000 	ldrb.w	r3, [sl]
 80039e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039e4:	d015      	beq.n	8003a12 <_svfiprintf_r+0xfa>
 80039e6:	4654      	mov	r4, sl
 80039e8:	2000      	movs	r0, #0
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	9a07      	ldr	r2, [sp, #28]
 80039f0:	4621      	mov	r1, r4
 80039f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f6:	3b30      	subs	r3, #48	@ 0x30
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d94b      	bls.n	8003a94 <_svfiprintf_r+0x17c>
 80039fc:	b1b0      	cbz	r0, 8003a2c <_svfiprintf_r+0x114>
 80039fe:	9207      	str	r2, [sp, #28]
 8003a00:	e014      	b.n	8003a2c <_svfiprintf_r+0x114>
 8003a02:	eba0 0308 	sub.w	r3, r0, r8
 8003a06:	fa09 f303 	lsl.w	r3, r9, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	e7d2      	b.n	80039b8 <_svfiprintf_r+0xa0>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	1d19      	adds	r1, r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfbb      	ittet	lt
 8003a1e:	425b      	neglt	r3, r3
 8003a20:	f042 0202 	orrlt.w	r2, r2, #2
 8003a24:	9307      	strge	r3, [sp, #28]
 8003a26:	9307      	strlt	r3, [sp, #28]
 8003a28:	bfb8      	it	lt
 8003a2a:	9204      	strlt	r2, [sp, #16]
 8003a2c:	7823      	ldrb	r3, [r4, #0]
 8003a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a30:	d10a      	bne.n	8003a48 <_svfiprintf_r+0x130>
 8003a32:	7863      	ldrb	r3, [r4, #1]
 8003a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a36:	d132      	bne.n	8003a9e <_svfiprintf_r+0x186>
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	3402      	adds	r4, #2
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9203      	str	r2, [sp, #12]
 8003a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b00 <_svfiprintf_r+0x1e8>
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	4650      	mov	r0, sl
 8003a50:	7821      	ldrb	r1, [r4, #0]
 8003a52:	f000 fa17 	bl	8003e84 <memchr>
 8003a56:	b138      	cbz	r0, 8003a68 <_svfiprintf_r+0x150>
 8003a58:	2240      	movs	r2, #64	@ 0x40
 8003a5a:	9b04      	ldr	r3, [sp, #16]
 8003a5c:	eba0 000a 	sub.w	r0, r0, sl
 8003a60:	4082      	lsls	r2, r0
 8003a62:	4313      	orrs	r3, r2
 8003a64:	3401      	adds	r4, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6c:	2206      	movs	r2, #6
 8003a6e:	4825      	ldr	r0, [pc, #148]	@ (8003b04 <_svfiprintf_r+0x1ec>)
 8003a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a74:	f000 fa06 	bl	8003e84 <memchr>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d036      	beq.n	8003aea <_svfiprintf_r+0x1d2>
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <_svfiprintf_r+0x1f0>)
 8003a7e:	bb1b      	cbnz	r3, 8003ac8 <_svfiprintf_r+0x1b0>
 8003a80:	9b03      	ldr	r3, [sp, #12]
 8003a82:	3307      	adds	r3, #7
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	3308      	adds	r3, #8
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a8e:	4433      	add	r3, r6
 8003a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a92:	e76a      	b.n	800396a <_svfiprintf_r+0x52>
 8003a94:	460c      	mov	r4, r1
 8003a96:	2001      	movs	r0, #1
 8003a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a9c:	e7a8      	b.n	80039f0 <_svfiprintf_r+0xd8>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f04f 0c0a 	mov.w	ip, #10
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	3401      	adds	r4, #1
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab0:	3a30      	subs	r2, #48	@ 0x30
 8003ab2:	2a09      	cmp	r2, #9
 8003ab4:	d903      	bls.n	8003abe <_svfiprintf_r+0x1a6>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0c6      	beq.n	8003a48 <_svfiprintf_r+0x130>
 8003aba:	9105      	str	r1, [sp, #20]
 8003abc:	e7c4      	b.n	8003a48 <_svfiprintf_r+0x130>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ac6:	e7f0      	b.n	8003aaa <_svfiprintf_r+0x192>
 8003ac8:	ab03      	add	r3, sp, #12
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	462a      	mov	r2, r5
 8003ace:	4638      	mov	r0, r7
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <_svfiprintf_r+0x1f4>)
 8003ad2:	a904      	add	r1, sp, #16
 8003ad4:	f3af 8000 	nop.w
 8003ad8:	1c42      	adds	r2, r0, #1
 8003ada:	4606      	mov	r6, r0
 8003adc:	d1d6      	bne.n	8003a8c <_svfiprintf_r+0x174>
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	065b      	lsls	r3, r3, #25
 8003ae2:	f53f af2d 	bmi.w	8003940 <_svfiprintf_r+0x28>
 8003ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ae8:	e72c      	b.n	8003944 <_svfiprintf_r+0x2c>
 8003aea:	ab03      	add	r3, sp, #12
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	462a      	mov	r2, r5
 8003af0:	4638      	mov	r0, r7
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <_svfiprintf_r+0x1f4>)
 8003af4:	a904      	add	r1, sp, #16
 8003af6:	f000 f87d 	bl	8003bf4 <_printf_i>
 8003afa:	e7ed      	b.n	8003ad8 <_svfiprintf_r+0x1c0>
 8003afc:	08004086 	.word	0x08004086
 8003b00:	0800408c 	.word	0x0800408c
 8003b04:	08004090 	.word	0x08004090
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	08003861 	.word	0x08003861

08003b10 <_printf_common>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	4616      	mov	r6, r2
 8003b16:	4698      	mov	r8, r3
 8003b18:	688a      	ldr	r2, [r1, #8]
 8003b1a:	690b      	ldr	r3, [r1, #16]
 8003b1c:	4607      	mov	r7, r0
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bfb8      	it	lt
 8003b22:	4613      	movlt	r3, r2
 8003b24:	6033      	str	r3, [r6, #0]
 8003b26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b30:	b10a      	cbz	r2, 8003b36 <_printf_common+0x26>
 8003b32:	3301      	adds	r3, #1
 8003b34:	6033      	str	r3, [r6, #0]
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	0699      	lsls	r1, r3, #26
 8003b3a:	bf42      	ittt	mi
 8003b3c:	6833      	ldrmi	r3, [r6, #0]
 8003b3e:	3302      	addmi	r3, #2
 8003b40:	6033      	strmi	r3, [r6, #0]
 8003b42:	6825      	ldr	r5, [r4, #0]
 8003b44:	f015 0506 	ands.w	r5, r5, #6
 8003b48:	d106      	bne.n	8003b58 <_printf_common+0x48>
 8003b4a:	f104 0a19 	add.w	sl, r4, #25
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	6832      	ldr	r2, [r6, #0]
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	42ab      	cmp	r3, r5
 8003b56:	dc2b      	bgt.n	8003bb0 <_printf_common+0xa0>
 8003b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	3b00      	subs	r3, #0
 8003b60:	bf18      	it	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	0692      	lsls	r2, r2, #26
 8003b66:	d430      	bmi.n	8003bca <_printf_common+0xba>
 8003b68:	4641      	mov	r1, r8
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b70:	47c8      	blx	r9
 8003b72:	3001      	adds	r0, #1
 8003b74:	d023      	beq.n	8003bbe <_printf_common+0xae>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	6922      	ldr	r2, [r4, #16]
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	bf14      	ite	ne
 8003b82:	2500      	movne	r5, #0
 8003b84:	6833      	ldreq	r3, [r6, #0]
 8003b86:	f04f 0600 	mov.w	r6, #0
 8003b8a:	bf08      	it	eq
 8003b8c:	68e5      	ldreq	r5, [r4, #12]
 8003b8e:	f104 041a 	add.w	r4, r4, #26
 8003b92:	bf08      	it	eq
 8003b94:	1aed      	subeq	r5, r5, r3
 8003b96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b9a:	bf08      	it	eq
 8003b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bfc4      	itt	gt
 8003ba4:	1a9b      	subgt	r3, r3, r2
 8003ba6:	18ed      	addgt	r5, r5, r3
 8003ba8:	42b5      	cmp	r5, r6
 8003baa:	d11a      	bne.n	8003be2 <_printf_common+0xd2>
 8003bac:	2000      	movs	r0, #0
 8003bae:	e008      	b.n	8003bc2 <_printf_common+0xb2>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4652      	mov	r2, sl
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d103      	bne.n	8003bc6 <_printf_common+0xb6>
 8003bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	3501      	adds	r5, #1
 8003bc8:	e7c1      	b.n	8003b4e <_printf_common+0x3e>
 8003bca:	2030      	movs	r0, #48	@ 0x30
 8003bcc:	18e1      	adds	r1, r4, r3
 8003bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bd8:	4422      	add	r2, r4
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003be0:	e7c2      	b.n	8003b68 <_printf_common+0x58>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4622      	mov	r2, r4
 8003be6:	4641      	mov	r1, r8
 8003be8:	4638      	mov	r0, r7
 8003bea:	47c8      	blx	r9
 8003bec:	3001      	adds	r0, #1
 8003bee:	d0e6      	beq.n	8003bbe <_printf_common+0xae>
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7d9      	b.n	8003ba8 <_printf_common+0x98>

08003bf4 <_printf_i>:
 8003bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	7e0f      	ldrb	r7, [r1, #24]
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	2f78      	cmp	r7, #120	@ 0x78
 8003bfe:	4680      	mov	r8, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	469a      	mov	sl, r3
 8003c04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c0a:	d807      	bhi.n	8003c1c <_printf_i+0x28>
 8003c0c:	2f62      	cmp	r7, #98	@ 0x62
 8003c0e:	d80a      	bhi.n	8003c26 <_printf_i+0x32>
 8003c10:	2f00      	cmp	r7, #0
 8003c12:	f000 80d1 	beq.w	8003db8 <_printf_i+0x1c4>
 8003c16:	2f58      	cmp	r7, #88	@ 0x58
 8003c18:	f000 80b8 	beq.w	8003d8c <_printf_i+0x198>
 8003c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c24:	e03a      	b.n	8003c9c <_printf_i+0xa8>
 8003c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c2a:	2b15      	cmp	r3, #21
 8003c2c:	d8f6      	bhi.n	8003c1c <_printf_i+0x28>
 8003c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c34 <_printf_i+0x40>)
 8003c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c34:	08003c8d 	.word	0x08003c8d
 8003c38:	08003ca1 	.word	0x08003ca1
 8003c3c:	08003c1d 	.word	0x08003c1d
 8003c40:	08003c1d 	.word	0x08003c1d
 8003c44:	08003c1d 	.word	0x08003c1d
 8003c48:	08003c1d 	.word	0x08003c1d
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003c1d 	.word	0x08003c1d
 8003c54:	08003c1d 	.word	0x08003c1d
 8003c58:	08003c1d 	.word	0x08003c1d
 8003c5c:	08003c1d 	.word	0x08003c1d
 8003c60:	08003d9f 	.word	0x08003d9f
 8003c64:	08003ccb 	.word	0x08003ccb
 8003c68:	08003d59 	.word	0x08003d59
 8003c6c:	08003c1d 	.word	0x08003c1d
 8003c70:	08003c1d 	.word	0x08003c1d
 8003c74:	08003dc1 	.word	0x08003dc1
 8003c78:	08003c1d 	.word	0x08003c1d
 8003c7c:	08003ccb 	.word	0x08003ccb
 8003c80:	08003c1d 	.word	0x08003c1d
 8003c84:	08003c1d 	.word	0x08003c1d
 8003c88:	08003d61 	.word	0x08003d61
 8003c8c:	6833      	ldr	r3, [r6, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6032      	str	r2, [r6, #0]
 8003c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e09c      	b.n	8003dda <_printf_i+0x1e6>
 8003ca0:	6833      	ldr	r3, [r6, #0]
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	1d19      	adds	r1, r3, #4
 8003ca6:	6031      	str	r1, [r6, #0]
 8003ca8:	0606      	lsls	r6, r0, #24
 8003caa:	d501      	bpl.n	8003cb0 <_printf_i+0xbc>
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	e003      	b.n	8003cb8 <_printf_i+0xc4>
 8003cb0:	0645      	lsls	r5, r0, #25
 8003cb2:	d5fb      	bpl.n	8003cac <_printf_i+0xb8>
 8003cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	da03      	bge.n	8003cc4 <_printf_i+0xd0>
 8003cbc:	232d      	movs	r3, #45	@ 0x2d
 8003cbe:	426d      	negs	r5, r5
 8003cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	4858      	ldr	r0, [pc, #352]	@ (8003e28 <_printf_i+0x234>)
 8003cc8:	e011      	b.n	8003cee <_printf_i+0xfa>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	0608      	lsls	r0, r1, #24
 8003cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cd4:	d402      	bmi.n	8003cdc <_printf_i+0xe8>
 8003cd6:	0649      	lsls	r1, r1, #25
 8003cd8:	bf48      	it	mi
 8003cda:	b2ad      	uxthmi	r5, r5
 8003cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cde:	6033      	str	r3, [r6, #0]
 8003ce0:	bf14      	ite	ne
 8003ce2:	230a      	movne	r3, #10
 8003ce4:	2308      	moveq	r3, #8
 8003ce6:	4850      	ldr	r0, [pc, #320]	@ (8003e28 <_printf_i+0x234>)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cee:	6866      	ldr	r6, [r4, #4]
 8003cf0:	2e00      	cmp	r6, #0
 8003cf2:	60a6      	str	r6, [r4, #8]
 8003cf4:	db05      	blt.n	8003d02 <_printf_i+0x10e>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	432e      	orrs	r6, r5
 8003cfa:	f021 0104 	bic.w	r1, r1, #4
 8003cfe:	6021      	str	r1, [r4, #0]
 8003d00:	d04b      	beq.n	8003d9a <_printf_i+0x1a6>
 8003d02:	4616      	mov	r6, r2
 8003d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d08:	fb03 5711 	mls	r7, r3, r1, r5
 8003d0c:	5dc7      	ldrb	r7, [r0, r7]
 8003d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d12:	462f      	mov	r7, r5
 8003d14:	42bb      	cmp	r3, r7
 8003d16:	460d      	mov	r5, r1
 8003d18:	d9f4      	bls.n	8003d04 <_printf_i+0x110>
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d10b      	bne.n	8003d36 <_printf_i+0x142>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	07df      	lsls	r7, r3, #31
 8003d22:	d508      	bpl.n	8003d36 <_printf_i+0x142>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	6861      	ldr	r1, [r4, #4]
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	bfde      	ittt	le
 8003d2c:	2330      	movle	r3, #48	@ 0x30
 8003d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d32:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d36:	1b92      	subs	r2, r2, r6
 8003d38:	6122      	str	r2, [r4, #16]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4640      	mov	r0, r8
 8003d40:	f8cd a000 	str.w	sl, [sp]
 8003d44:	aa03      	add	r2, sp, #12
 8003d46:	f7ff fee3 	bl	8003b10 <_printf_common>
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d14a      	bne.n	8003de4 <_printf_i+0x1f0>
 8003d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d52:	b004      	add	sp, #16
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f043 0320 	orr.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	2778      	movs	r7, #120	@ 0x78
 8003d62:	4832      	ldr	r0, [pc, #200]	@ (8003e2c <_printf_i+0x238>)
 8003d64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	061f      	lsls	r7, r3, #24
 8003d6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d72:	d402      	bmi.n	8003d7a <_printf_i+0x186>
 8003d74:	065f      	lsls	r7, r3, #25
 8003d76:	bf48      	it	mi
 8003d78:	b2ad      	uxthmi	r5, r5
 8003d7a:	6031      	str	r1, [r6, #0]
 8003d7c:	07d9      	lsls	r1, r3, #31
 8003d7e:	bf44      	itt	mi
 8003d80:	f043 0320 	orrmi.w	r3, r3, #32
 8003d84:	6023      	strmi	r3, [r4, #0]
 8003d86:	b11d      	cbz	r5, 8003d90 <_printf_i+0x19c>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	e7ad      	b.n	8003ce8 <_printf_i+0xf4>
 8003d8c:	4826      	ldr	r0, [pc, #152]	@ (8003e28 <_printf_i+0x234>)
 8003d8e:	e7e9      	b.n	8003d64 <_printf_i+0x170>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	f023 0320 	bic.w	r3, r3, #32
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	e7f6      	b.n	8003d88 <_printf_i+0x194>
 8003d9a:	4616      	mov	r6, r2
 8003d9c:	e7bd      	b.n	8003d1a <_printf_i+0x126>
 8003d9e:	6833      	ldr	r3, [r6, #0]
 8003da0:	6825      	ldr	r5, [r4, #0]
 8003da2:	1d18      	adds	r0, r3, #4
 8003da4:	6961      	ldr	r1, [r4, #20]
 8003da6:	6030      	str	r0, [r6, #0]
 8003da8:	062e      	lsls	r6, r5, #24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	d501      	bpl.n	8003db2 <_printf_i+0x1be>
 8003dae:	6019      	str	r1, [r3, #0]
 8003db0:	e002      	b.n	8003db8 <_printf_i+0x1c4>
 8003db2:	0668      	lsls	r0, r5, #25
 8003db4:	d5fb      	bpl.n	8003dae <_printf_i+0x1ba>
 8003db6:	8019      	strh	r1, [r3, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	4616      	mov	r6, r2
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	e7bc      	b.n	8003d3a <_printf_i+0x146>
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	1d1a      	adds	r2, r3, #4
 8003dc6:	6032      	str	r2, [r6, #0]
 8003dc8:	681e      	ldr	r6, [r3, #0]
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f000 f859 	bl	8003e84 <memchr>
 8003dd2:	b108      	cbz	r0, 8003dd8 <_printf_i+0x1e4>
 8003dd4:	1b80      	subs	r0, r0, r6
 8003dd6:	6060      	str	r0, [r4, #4]
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de2:	e7aa      	b.n	8003d3a <_printf_i+0x146>
 8003de4:	4632      	mov	r2, r6
 8003de6:	4649      	mov	r1, r9
 8003de8:	4640      	mov	r0, r8
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	47d0      	blx	sl
 8003dee:	3001      	adds	r0, #1
 8003df0:	d0ad      	beq.n	8003d4e <_printf_i+0x15a>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	079b      	lsls	r3, r3, #30
 8003df6:	d413      	bmi.n	8003e20 <_printf_i+0x22c>
 8003df8:	68e0      	ldr	r0, [r4, #12]
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	bfb8      	it	lt
 8003e00:	4618      	movlt	r0, r3
 8003e02:	e7a6      	b.n	8003d52 <_printf_i+0x15e>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4632      	mov	r2, r6
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	47d0      	blx	sl
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d09d      	beq.n	8003d4e <_printf_i+0x15a>
 8003e12:	3501      	adds	r5, #1
 8003e14:	68e3      	ldr	r3, [r4, #12]
 8003e16:	9903      	ldr	r1, [sp, #12]
 8003e18:	1a5b      	subs	r3, r3, r1
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	dcf2      	bgt.n	8003e04 <_printf_i+0x210>
 8003e1e:	e7eb      	b.n	8003df8 <_printf_i+0x204>
 8003e20:	2500      	movs	r5, #0
 8003e22:	f104 0619 	add.w	r6, r4, #25
 8003e26:	e7f5      	b.n	8003e14 <_printf_i+0x220>
 8003e28:	08004097 	.word	0x08004097
 8003e2c:	080040a8 	.word	0x080040a8

08003e30 <memmove>:
 8003e30:	4288      	cmp	r0, r1
 8003e32:	b510      	push	{r4, lr}
 8003e34:	eb01 0402 	add.w	r4, r1, r2
 8003e38:	d902      	bls.n	8003e40 <memmove+0x10>
 8003e3a:	4284      	cmp	r4, r0
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	d807      	bhi.n	8003e50 <memmove+0x20>
 8003e40:	1e43      	subs	r3, r0, #1
 8003e42:	42a1      	cmp	r1, r4
 8003e44:	d008      	beq.n	8003e58 <memmove+0x28>
 8003e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e4e:	e7f8      	b.n	8003e42 <memmove+0x12>
 8003e50:	4601      	mov	r1, r0
 8003e52:	4402      	add	r2, r0
 8003e54:	428a      	cmp	r2, r1
 8003e56:	d100      	bne.n	8003e5a <memmove+0x2a>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e62:	e7f7      	b.n	8003e54 <memmove+0x24>

08003e64 <_sbrk_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	2300      	movs	r3, #0
 8003e68:	4d05      	ldr	r5, [pc, #20]	@ (8003e80 <_sbrk_r+0x1c>)
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fc fc66 	bl	8000740 <_sbrk>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_sbrk_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_sbrk_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20001204 	.word	0x20001204

08003e84 <memchr>:
 8003e84:	4603      	mov	r3, r0
 8003e86:	b510      	push	{r4, lr}
 8003e88:	b2c9      	uxtb	r1, r1
 8003e8a:	4402      	add	r2, r0
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	d101      	bne.n	8003e96 <memchr+0x12>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e003      	b.n	8003e9e <memchr+0x1a>
 8003e96:	7804      	ldrb	r4, [r0, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	428c      	cmp	r4, r1
 8003e9c:	d1f6      	bne.n	8003e8c <memchr+0x8>
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <_realloc_r>:
 8003ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	b921      	cbnz	r1, 8003eb6 <_realloc_r+0x16>
 8003eac:	4611      	mov	r1, r2
 8003eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	f7ff bc49 	b.w	8003748 <_malloc_r>
 8003eb6:	b92a      	cbnz	r2, 8003ec4 <_realloc_r+0x24>
 8003eb8:	f7ff fbdc 	bl	8003674 <_free_r>
 8003ebc:	4625      	mov	r5, r4
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec4:	f000 f81a 	bl	8003efc <_malloc_usable_size_r>
 8003ec8:	4284      	cmp	r4, r0
 8003eca:	4606      	mov	r6, r0
 8003ecc:	d802      	bhi.n	8003ed4 <_realloc_r+0x34>
 8003ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ed2:	d8f4      	bhi.n	8003ebe <_realloc_r+0x1e>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7ff fc36 	bl	8003748 <_malloc_r>
 8003edc:	4680      	mov	r8, r0
 8003ede:	b908      	cbnz	r0, 8003ee4 <_realloc_r+0x44>
 8003ee0:	4645      	mov	r5, r8
 8003ee2:	e7ec      	b.n	8003ebe <_realloc_r+0x1e>
 8003ee4:	42b4      	cmp	r4, r6
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	4629      	mov	r1, r5
 8003eea:	bf28      	it	cs
 8003eec:	4632      	movcs	r2, r6
 8003eee:	f7ff fbb3 	bl	8003658 <memcpy>
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7ff fbbd 	bl	8003674 <_free_r>
 8003efa:	e7f1      	b.n	8003ee0 <_realloc_r+0x40>

08003efc <_malloc_usable_size_r>:
 8003efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f00:	1f18      	subs	r0, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfbc      	itt	lt
 8003f06:	580b      	ldrlt	r3, [r1, r0]
 8003f08:	18c0      	addlt	r0, r0, r3
 8003f0a:	4770      	bx	lr

08003f0c <_init>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	bf00      	nop
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr

08003f18 <_fini>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr
