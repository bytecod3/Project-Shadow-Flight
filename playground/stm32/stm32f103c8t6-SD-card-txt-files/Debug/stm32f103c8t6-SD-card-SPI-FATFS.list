
stm32f103c8t6-SD-card-SPI-FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080083e4  080083e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d6c  08008d6c  00009d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d74  08008d74  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d78  08008d78  00009d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008d7c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  20000074  08008df0  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08008df0  0000a5b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5db  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234e  00000000  00000000  00016678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000189c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000916  00000000  00000000  000195a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185fc  00000000  00000000  00019eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f756  00000000  00000000  000324b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085742  00000000  00000000  00041c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c734a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a4  00000000  00000000  000c7390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000ca934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080083cc 	.word	0x080083cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080083cc 	.word	0x080083cc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <UART_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void UART_Print(char* str)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff fceb 	bl	800014c <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	2364      	movs	r3, #100	@ 0x64
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4803      	ldr	r0, [pc, #12]	@ (800078c <UART_Print+0x24>)
 8000780:	f002 f84d 	bl	800281e <HAL_UART_Transmit>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000e8 	.word	0x200000e8

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f000 fcb2 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f82e 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 f8c8 	bl	8000930 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007a0:	f000 f866 	bl	8000870 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007a4:	f000 f89a 	bl	80008dc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80007a8:	f002 fa0e 	bl	8002bc8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_Card_Test();
 80007ac:	f000 f920 	bl	80009f0 <SD_Card_Test>
  HAL_UART_Transmit(&huart1, (uint8_t*) "Hello uart\r\n", strlen("Hello uart\r\n"), HAL_MAX_DELAY);
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b4:	220c      	movs	r2, #12
 80007b6:	490d      	ldr	r1, [pc, #52]	@ (80007ec <main+0x5c>)
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <main+0x60>)
 80007ba:	f002 f830 	bl	800281e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <main+0x64>)
 80007c6:	f000 ff87 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 80007ca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007ce:	f000 fcf7 	bl	80011c0 <HAL_Delay>
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <main+0x64>)
 80007da:	f000 ff7d 	bl	80016d8 <HAL_GPIO_WritePin>
	  HAL_Delay(400);
 80007de:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007e2:	f000 fced 	bl	80011c0 <HAL_Delay>
	  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80007e6:	bf00      	nop
 80007e8:	e7e9      	b.n	80007be <main+0x2e>
 80007ea:	bf00      	nop
 80007ec:	080083e4 	.word	0x080083e4
 80007f0:	200000e8 	.word	0x200000e8
 80007f4:	40011000 	.word	0x40011000

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	@ 0x40
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2228      	movs	r2, #40	@ 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f007 f952 	bl	8007ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2310      	movs	r3, #16
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	4618      	mov	r0, r3
 8000830:	f000 ff6a 	bl	8001708 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800083a:	f000 faeb 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f9d8 	bl	8001c0c <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000862:	f000 fad7 	bl	8000e14 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	@ 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_SPI1_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <MX_SPI1_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_SPI1_Init+0x64>)
 80008c2:	f001 fb31 	bl	8001f28 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 faa2 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000090 	.word	0x20000090
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	@ (800092c <MX_USART1_UART_Init+0x50>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_USART1_UART_Init+0x4c>)
 8000914:	f001 ff33 	bl	800277e <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091e:	f000 fa79 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200000e8 	.word	0x200000e8
 800092c:	40013800 	.word	0x40013800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a26      	ldr	r2, [pc, #152]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a20      	ldr	r2, [pc, #128]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b1e      	ldr	r3, [pc, #120]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a1a      	ldr	r2, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0xb4>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000992:	4815      	ldr	r0, [pc, #84]	@ (80009e8 <MX_GPIO_Init+0xb8>)
 8000994:	f000 fea0 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2110      	movs	r1, #16
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <MX_GPIO_Init+0xbc>)
 800099e:	f000 fe9b 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80009a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <MX_GPIO_Init+0xb8>)
 80009bc:	f000 fd08 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80009c0:	2310      	movs	r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_GPIO_Init+0xbc>)
 80009d8:	f000 fcfa 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010800 	.word	0x40010800

080009f0 <SD_Card_Test>:

/* USER CODE BEGIN 4 */

static void SD_Card_Test(void)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 80009f6:	af00      	add	r7, sp, #0
	sprintf(TxBuffer, "RUNNING SD CARD TESTS");
 80009f8:	49b5      	ldr	r1, [pc, #724]	@ (8000cd0 <SD_Card_Test+0x2e0>)
 80009fa:	48b6      	ldr	r0, [pc, #728]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 80009fc:	f007 f836 	bl	8007a6c <siprintf>
UART_Print(TxBuffer);
 8000a00:	48b4      	ldr	r0, [pc, #720]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000a02:	f7ff feb1 	bl	8000768 <UART_Print>
  uint32_t TotalSize, FreeSpace;
  char RW_Buffer[200];
  do
  {
    //------------------[ Mount The SD Card ]--------------------
    FR_Status = f_mount(&FatFs, "", 1);
 8000a06:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000a0a:	3b1c      	subs	r3, #28
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	49b2      	ldr	r1, [pc, #712]	@ (8000cd8 <SD_Card_Test+0x2e8>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 fa71 	bl	8005ef8 <f_mount>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000a1c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000a20:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000a22:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000a26:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00d      	beq.n	8000a4c <SD_Card_Test+0x5c>
    {
      sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000a30:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000a34:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	49a7      	ldr	r1, [pc, #668]	@ (8000cdc <SD_Card_Test+0x2ec>)
 8000a3e:	48a5      	ldr	r0, [pc, #660]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000a40:	f007 f814 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000a44:	48a3      	ldr	r0, [pc, #652]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000a46:	f7ff fe8f 	bl	8000768 <UART_Print>
      break;
 8000a4a:	e1a8      	b.n	8000d9e <SD_Card_Test+0x3ae>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 8000a4c:	49a4      	ldr	r1, [pc, #656]	@ (8000ce0 <SD_Card_Test+0x2f0>)
 8000a4e:	48a1      	ldr	r0, [pc, #644]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000a50:	f007 f80c 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000a54:	489f      	ldr	r0, [pc, #636]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000a56:	f7ff fe87 	bl	8000768 <UART_Print>
    //------------------[ Get & Print The SD Card Size & Free Space ]--------------------
    f_getfree("", &FreeClusters, &FS_Ptr);
 8000a5a:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8000a5e:	3a2c      	subs	r2, #44	@ 0x2c
 8000a60:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a64:	3b38      	subs	r3, #56	@ 0x38
 8000a66:	4619      	mov	r1, r3
 8000a68:	489b      	ldr	r0, [pc, #620]	@ (8000cd8 <SD_Card_Test+0x2e8>)
 8000a6a:	f006 fdae 	bl	80075ca <f_getfree>
    TotalSize = (uint32_t)((FS_Ptr->n_fatent - 2) * FS_Ptr->csize * 0.5);
 8000a6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000a72:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	3b02      	subs	r3, #2
 8000a7e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8000a82:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 8000a86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000a8a:	7892      	ldrb	r2, [r2, #2]
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdcf 	bl	8000634 <__aeabi_ui2d>
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	4b92      	ldr	r3, [pc, #584]	@ (8000ce4 <SD_Card_Test+0x2f4>)
 8000a9c:	f7ff fb5e 	bl	800015c <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f7ff fe3e 	bl	8000728 <__aeabi_d2uiz>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000ab2:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000ab6:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000ab8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000abc:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8000ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000acc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdad 	bl	8000634 <__aeabi_ui2d>
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	4b81      	ldr	r3, [pc, #516]	@ (8000ce4 <SD_Card_Test+0x2f4>)
 8000ae0:	f7ff fb3c 	bl	800015c <__aeabi_dmul>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	4610      	mov	r0, r2
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fe1c 	bl	8000728 <__aeabi_d2uiz>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000af6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000afa:	6013      	str	r3, [r2, #0]
    sprintf(TxBuffer, "Total SD Card Size: %lu Bytes\r\n", TotalSize);
 8000afc:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000b00:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4978      	ldr	r1, [pc, #480]	@ (8000ce8 <SD_Card_Test+0x2f8>)
 8000b08:	4872      	ldr	r0, [pc, #456]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b0a:	f006 ffaf 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000b0e:	4871      	ldr	r0, [pc, #452]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b10:	f7ff fe2a 	bl	8000768 <UART_Print>
    sprintf(TxBuffer, "Free SD Card Space: %lu Bytes\r\n\n", FreeSpace);
 8000b14:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000b18:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4973      	ldr	r1, [pc, #460]	@ (8000cec <SD_Card_Test+0x2fc>)
 8000b20:	486c      	ldr	r0, [pc, #432]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b22:	f006 ffa3 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000b26:	486b      	ldr	r0, [pc, #428]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b28:	f7ff fe1e 	bl	8000768 <UART_Print>
    //------------------[ Open A Text File For Write & Write Data ]--------------------
    //Open the file
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000b2c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b30:	3b28      	subs	r3, #40	@ 0x28
 8000b32:	220b      	movs	r2, #11
 8000b34:	496e      	ldr	r1, [pc, #440]	@ (8000cf0 <SD_Card_Test+0x300>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 fa28 	bl	8005f8c <f_open>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000b42:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000b46:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000b48:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000b4c:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00d      	beq.n	8000b72 <SD_Card_Test+0x182>
    {
      sprintf(TxBuffer, "Error! While Creating/Opening A New Text File, Error Code: (%i)\r\n", FR_Status);
 8000b56:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000b5a:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4964      	ldr	r1, [pc, #400]	@ (8000cf4 <SD_Card_Test+0x304>)
 8000b64:	485b      	ldr	r0, [pc, #364]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b66:	f006 ff81 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000b6a:	485a      	ldr	r0, [pc, #360]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b6c:	f7ff fdfc 	bl	8000768 <UART_Print>
      break;
 8000b70:	e115      	b.n	8000d9e <SD_Card_Test+0x3ae>
    }
    sprintf(TxBuffer, "Text File Created & Opened! Writing Data To The Text File..\r\n\n");
 8000b72:	4961      	ldr	r1, [pc, #388]	@ (8000cf8 <SD_Card_Test+0x308>)
 8000b74:	4857      	ldr	r0, [pc, #348]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b76:	f006 ff79 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000b7a:	4856      	ldr	r0, [pc, #344]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000b7c:	f7ff fdf4 	bl	8000768 <UART_Print>
    // (1) Write Data To The Text File [ Using f_puts() Function ]
    f_puts("Hello! From STM32 To SD Card Over SPI, Using f_puts()\n", &Fil);
 8000b80:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b84:	3b28      	subs	r3, #40	@ 0x28
 8000b86:	4619      	mov	r1, r3
 8000b88:	485c      	ldr	r0, [pc, #368]	@ (8000cfc <SD_Card_Test+0x30c>)
 8000b8a:	f006 fe74 	bl	8007876 <f_puts>
    // (2) Write Data To The Text File [ Using f_write() Function ]
    strcpy(RW_Buffer, "Hello! From STM32 To SD Card Over SPI, Using f_write()\r\n");
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4a5b      	ldr	r2, [pc, #364]	@ (8000d00 <SD_Card_Test+0x310>)
 8000b92:	461c      	mov	r4, r3
 8000b94:	4615      	mov	r5, r2
 8000b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	c403      	stmia	r4!, {r0, r1}
 8000ba8:	7022      	strb	r2, [r4, #0]
    f_write(&Fil, RW_Buffer, strlen(RW_Buffer), &WWC);
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff facd 	bl	800014c <strlen>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bb8:	3b34      	subs	r3, #52	@ 0x34
 8000bba:	4639      	mov	r1, r7
 8000bbc:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000bc0:	3828      	subs	r0, #40	@ 0x28
 8000bc2:	f005 fedf 	bl	8006984 <f_write>
    // Close The File
    f_close(&Fil);
 8000bc6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bca:	3b28      	subs	r3, #40	@ 0x28
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f006 f9e0 	bl	8006f92 <f_close>
    //------------------[ Open A Text File For Read & Read Its Data ]--------------------
    // Open The File
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ);
 8000bd2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bd6:	3b28      	subs	r3, #40	@ 0x28
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4945      	ldr	r1, [pc, #276]	@ (8000cf0 <SD_Card_Test+0x300>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f005 f9d5 	bl	8005f8c <f_open>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000be8:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000bec:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000bee:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000bf2:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <SD_Card_Test+0x21c>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Read.. \r\n");
 8000bfc:	4941      	ldr	r1, [pc, #260]	@ (8000d04 <SD_Card_Test+0x314>)
 8000bfe:	4835      	ldr	r0, [pc, #212]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c00:	f006 ff34 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000c04:	4833      	ldr	r0, [pc, #204]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c06:	f7ff fdaf 	bl	8000768 <UART_Print>
      break;
 8000c0a:	e0c8      	b.n	8000d9e <SD_Card_Test+0x3ae>
    }
    // (1) Read The Text File's Data [ Using f_gets() Function ]
    f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil);
 8000c0c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c10:	3b28      	subs	r3, #40	@ 0x28
 8000c12:	4638      	mov	r0, r7
 8000c14:	461a      	mov	r2, r3
 8000c16:	21c8      	movs	r1, #200	@ 0xc8
 8000c18:	f006 fdb2 	bl	8007780 <f_gets>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_gets():%s", RW_Buffer);
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4939      	ldr	r1, [pc, #228]	@ (8000d08 <SD_Card_Test+0x318>)
 8000c22:	482c      	ldr	r0, [pc, #176]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c24:	f006 ff22 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000c28:	482a      	ldr	r0, [pc, #168]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c2a:	f7ff fd9d 	bl	8000768 <UART_Print>
    // (2) Read The Text File's Data [ Using f_read() Function ]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000c32:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000c36:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c3a:	3b30      	subs	r3, #48	@ 0x30
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000c42:	3828      	subs	r0, #40	@ 0x28
 8000c44:	f005 fcb6 	bl	80065b4 <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) Using f_read():%s", RW_Buffer);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	492f      	ldr	r1, [pc, #188]	@ (8000d0c <SD_Card_Test+0x31c>)
 8000c4e:	4821      	ldr	r0, [pc, #132]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c50:	f006 ff0c 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000c54:	481f      	ldr	r0, [pc, #124]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c56:	f7ff fd87 	bl	8000768 <UART_Print>
    // Close The File
    f_close(&Fil);
 8000c5a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c5e:	3b28      	subs	r3, #40	@ 0x28
 8000c60:	4618      	mov	r0, r3
 8000c62:	f006 f996 	bl	8006f92 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000c66:	492a      	ldr	r1, [pc, #168]	@ (8000d10 <SD_Card_Test+0x320>)
 8000c68:	481a      	ldr	r0, [pc, #104]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c6a:	f006 feff 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000c6e:	4819      	ldr	r0, [pc, #100]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000c70:	f7ff fd7a 	bl	8000768 <UART_Print>
    //------------------[ Open An Existing Text File, Update Its Content, Read It Back ]--------------------
    // (1) Open The Existing File For Write (Update)
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_OPEN_EXISTING | FA_WRITE);
 8000c74:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c78:	3b28      	subs	r3, #40	@ 0x28
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	491c      	ldr	r1, [pc, #112]	@ (8000cf0 <SD_Card_Test+0x300>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 f984 	bl	8005f8c <f_open>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000c8a:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000c8e:	7013      	strb	r3, [r2, #0]
    FR_Status = f_lseek(&Fil, f_size(&Fil)); // Move The File Pointer To The EOF (End-Of-File)
 8000c90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000c94:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000c98:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c9c:	3b28      	subs	r3, #40	@ 0x28
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 f9a1 	bl	8006fe8 <f_lseek>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000cac:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000cb0:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000cb2:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000cb6:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d02b      	beq.n	8000d18 <SD_Card_Test+0x328>
    {
      sprintf(TxBuffer, "Error! While Opening (TextFileWrite.txt) File For Update.. \r\n");
 8000cc0:	4914      	ldr	r1, [pc, #80]	@ (8000d14 <SD_Card_Test+0x324>)
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000cc4:	f006 fed2 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <SD_Card_Test+0x2e4>)
 8000cca:	f7ff fd4d 	bl	8000768 <UART_Print>
      break;
 8000cce:	e066      	b.n	8000d9e <SD_Card_Test+0x3ae>
 8000cd0:	080083f4 	.word	0x080083f4
 8000cd4:	20000130 	.word	0x20000130
 8000cd8:	0800840c 	.word	0x0800840c
 8000cdc:	08008410 	.word	0x08008410
 8000ce0:	08008444 	.word	0x08008444
 8000ce4:	3fe00000 	.word	0x3fe00000
 8000ce8:	08008468 	.word	0x08008468
 8000cec:	08008488 	.word	0x08008488
 8000cf0:	080084ac 	.word	0x080084ac
 8000cf4:	080084c0 	.word	0x080084c0
 8000cf8:	08008504 	.word	0x08008504
 8000cfc:	08008544 	.word	0x08008544
 8000d00:	0800857c 	.word	0x0800857c
 8000d04:	080085b8 	.word	0x080085b8
 8000d08:	080085f4 	.word	0x080085f4
 8000d0c:	0800862c 	.word	0x0800862c
 8000d10:	08008664 	.word	0x08008664
 8000d14:	08008678 	.word	0x08008678
    }
    // (2) Write New Line of Text Data To The File
    FR_Status = f_puts("This New Line Was Added During Update!\r\n", &Fil);
 8000d18:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d1c:	3b28      	subs	r3, #40	@ 0x28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4835      	ldr	r0, [pc, #212]	@ (8000df8 <SD_Card_Test+0x408>)
 8000d22:	f006 fda8 	bl	8007876 <f_puts>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000d2c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000d30:	7013      	strb	r3, [r2, #0]
    f_close(&Fil);
 8000d32:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d36:	3b28      	subs	r3, #40	@ 0x28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 f92a 	bl	8006f92 <f_close>
    memset(RW_Buffer,'\0',sizeof(RW_Buffer)); // Clear The Buffer
 8000d3e:	463b      	mov	r3, r7
 8000d40:	22c8      	movs	r2, #200	@ 0xc8
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f006 feb3 	bl	8007ab0 <memset>
    // (3) Read The Contents of The Text File After The Update
    FR_Status = f_open(&Fil, "TextFileWrite.txt", FA_READ); // Open The File For Read
 8000d4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d4e:	3b28      	subs	r3, #40	@ 0x28
 8000d50:	2201      	movs	r2, #1
 8000d52:	492a      	ldr	r1, [pc, #168]	@ (8000dfc <SD_Card_Test+0x40c>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f919 	bl	8005f8c <f_open>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000d60:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000d64:	7013      	strb	r3, [r2, #0]
    f_read(&Fil, RW_Buffer, f_size(&Fil), &RWC);
 8000d66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000d6a:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	@ 0xfa4
 8000d6e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d72:	3b30      	subs	r3, #48	@ 0x30
 8000d74:	4639      	mov	r1, r7
 8000d76:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8000d7a:	3828      	subs	r0, #40	@ 0x28
 8000d7c:	f005 fc1a 	bl	80065b4 <f_read>
    sprintf(TxBuffer, "Data Read From (TextFileWrite.txt) After Update:%s", RW_Buffer);
 8000d80:	463b      	mov	r3, r7
 8000d82:	461a      	mov	r2, r3
 8000d84:	491e      	ldr	r1, [pc, #120]	@ (8000e00 <SD_Card_Test+0x410>)
 8000d86:	481f      	ldr	r0, [pc, #124]	@ (8000e04 <SD_Card_Test+0x414>)
 8000d88:	f006 fe70 	bl	8007a6c <siprintf>
    UART_Print(TxBuffer);
 8000d8c:	481d      	ldr	r0, [pc, #116]	@ (8000e04 <SD_Card_Test+0x414>)
 8000d8e:	f7ff fceb 	bl	8000768 <UART_Print>
    f_close(&Fil);
 8000d92:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d96:	3b28      	subs	r3, #40	@ 0x28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 f8fa 	bl	8006f92 <f_close>
        UART_Print(TxBuffer);
    }
    */
  } while(0);
  //------------------[ Test Complete! Unmount The SD Card ]--------------------
  FR_Status = f_mount(NULL, "", 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4919      	ldr	r1, [pc, #100]	@ (8000e08 <SD_Card_Test+0x418>)
 8000da2:	2000      	movs	r0, #0
 8000da4:	f005 f8a8 	bl	8005ef8 <f_mount>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8000dae:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000db2:	7013      	strb	r3, [r2, #0]
  if (FR_Status != FR_OK)
 8000db4:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000db8:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00d      	beq.n	8000dde <SD_Card_Test+0x3ee>
  {
      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 8000dc2:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8000dc6:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	490f      	ldr	r1, [pc, #60]	@ (8000e0c <SD_Card_Test+0x41c>)
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <SD_Card_Test+0x414>)
 8000dd2:	f006 fe4b 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000dd6:	480b      	ldr	r0, [pc, #44]	@ (8000e04 <SD_Card_Test+0x414>)
 8000dd8:	f7ff fcc6 	bl	8000768 <UART_Print>
  } else{
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
      UART_Print(TxBuffer);
  }
}
 8000ddc:	e006      	b.n	8000dec <SD_Card_Test+0x3fc>
      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000dde:	490c      	ldr	r1, [pc, #48]	@ (8000e10 <SD_Card_Test+0x420>)
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <SD_Card_Test+0x414>)
 8000de2:	f006 fe43 	bl	8007a6c <siprintf>
      UART_Print(TxBuffer);
 8000de6:	4807      	ldr	r0, [pc, #28]	@ (8000e04 <SD_Card_Test+0x414>)
 8000de8:	f7ff fcbe 	bl	8000768 <UART_Print>
}
 8000dec:	bf00      	nop
 8000dee:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bdb0      	pop	{r4, r5, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	080086b8 	.word	0x080086b8
 8000dfc:	080084ac 	.word	0x080084ac
 8000e00:	080086e4 	.word	0x080086e4
 8000e04:	20000130 	.word	0x20000130
 8000e08:	0800840c 	.word	0x0800840c
 8000e0c:	08008718 	.word	0x08008718
 8000e10:	08008750 	.word	0x08008750

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <Error_Handler+0x8>

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d12f      	bne.n	8000f04 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a19      	ldr	r2, [pc, #100]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_SPI_MspInit+0x8c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ed4:	23a0      	movs	r3, #160	@ 0xa0
 8000ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <HAL_SPI_MspInit+0x90>)
 8000ee8:	f000 fa72 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eec:	2340      	movs	r3, #64	@ 0x40
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_SPI_MspInit+0x90>)
 8000f00:	f000 fa66 	bl	80013d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40013000 	.word	0x40013000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010800 	.word	0x40010800

08000f18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <HAL_UART_MspInit+0x8c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d131      	bne.n	8000f9c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_UART_MspInit+0x90>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480b      	ldr	r0, [pc, #44]	@ (8000fac <HAL_UART_MspInit+0x94>)
 8000f7e:	f000 fa27 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0x94>)
 8000f98:	f000 fa1a 	bl	80013d0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010800 	.word	0x40010800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0) {
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <SysTick_Handler+0x34>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <SysTick_Handler+0x18>
		Timer1--;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <SysTick_Handler+0x34>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <SysTick_Handler+0x34>)
 8001012:	801a      	strh	r2, [r3, #0]
	}

	if(Timer2 > 0) {
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <SysTick_Handler+0x38>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <SysTick_Handler+0x2c>
		 Timer2--;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Handler+0x38>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <SysTick_Handler+0x38>)
 8001026:	801a      	strh	r2, [r3, #0]
	 }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8ae 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000023c 	.word	0x2000023c
 8001034:	2000023e 	.word	0x2000023e

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f006 fd2a 	bl	8007ac0 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20005000 	.word	0x20005000
 8001098:	00000400 	.word	0x00000400
 800109c:	2000022c 	.word	0x2000022c
 80010a0:	200005b8 	.word	0x200005b8

080010a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff fff8 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010b6:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010cc:	4c09      	ldr	r4, [pc, #36]	@ (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f006 fcf7 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff fb57 	bl	8000790 <main>
  bx lr
 80010e2:	4770      	bx	lr
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010ec:	08008d7c 	.word	0x08008d7c
  ldr r2, =_sbss
 80010f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010f4:	200005b8 	.word	0x200005b8

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_Init+0x28>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <HAL_Init+0x28>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f92b 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fe82 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40022000 	.word	0x40022000

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f935 	bl	80013b6 <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001164:	f000 f90b 	bl	800137e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_IncTick+0x1c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_IncTick+0x20>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <HAL_IncTick+0x20>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000230 	.word	0x20000230

080011ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b02      	ldr	r3, [pc, #8]	@ (80011bc <HAL_GetTick+0x10>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000230 	.word	0x20000230

080011c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c8:	f7ff fff0 	bl	80011ac <HAL_GetTick>
 80011cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011d8:	d005      	beq.n	80011e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_Delay+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e6:	bf00      	nop
 80011e8:	f7ff ffe0 	bl	80011ac <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d8f7      	bhi.n	80011e8 <HAL_Delay+0x28>
  {
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	@ 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001348:	f7ff ff90 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff49 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb0 	bl	8001324 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e169      	b.n	80016b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8158 	bne.w	80016b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a9a      	ldr	r2, [pc, #616]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a98      	ldr	r2, [pc, #608]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a98      	ldr	r2, [pc, #608]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a96      	ldr	r2, [pc, #600]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a96      	ldr	r2, [pc, #600]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a94      	ldr	r2, [pc, #592]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a94      	ldr	r2, [pc, #592]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a92      	ldr	r2, [pc, #584]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a92      	ldr	r2, [pc, #584]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a90      	ldr	r2, [pc, #576]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a79      	ldr	r2, [pc, #484]	@ (8001684 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80b1 	beq.w	80016b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a4c      	ldr	r2, [pc, #304]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a48      	ldr	r2, [pc, #288]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a40      	ldr	r2, [pc, #256]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1ec>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1e8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3e      	ldr	r2, [pc, #248]	@ (8001698 <HAL_GPIO_Init+0x2c8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1e4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3d      	ldr	r2, [pc, #244]	@ (800169c <HAL_GPIO_Init+0x2cc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1e0>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1ee>
 80015bc:	2300      	movs	r3, #0
 80015be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ce:	492f      	ldr	r1, [pc, #188]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015e8:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	492c      	ldr	r1, [pc, #176]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001600:	4013      	ands	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001610:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4922      	ldr	r1, [pc, #136]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	43db      	mvns	r3, r3
 8001626:	491e      	ldr	r1, [pc, #120]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001628:	4013      	ands	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4918      	ldr	r1, [pc, #96]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	43db      	mvns	r3, r3
 800164e:	4914      	ldr	r1, [pc, #80]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001650:	4013      	ands	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d021      	beq.n	80016a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <HAL_GPIO_Init+0x2d0>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e021      	b.n	80016b2 <HAL_GPIO_Init+0x2e2>
 800166e:	bf00      	nop
 8001670:	10320000 	.word	0x10320000
 8001674:	10310000 	.word	0x10310000
 8001678:	10220000 	.word	0x10220000
 800167c:	10210000 	.word	0x10210000
 8001680:	10120000 	.word	0x10120000
 8001684:	10110000 	.word	0x10110000
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40011000 	.word	0x40011000
 800169c:	40011400 	.word	0x40011400
 80016a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4909      	ldr	r1, [pc, #36]	@ (80016d4 <HAL_GPIO_Init+0x304>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f ae8e 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	372c      	adds	r7, #44	@ 0x2c
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40010400 	.word	0x40010400

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e272      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8087 	beq.w	8001836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001728:	4b92      	ldr	r3, [pc, #584]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4b8f      	ldr	r3, [pc, #572]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
 8001740:	4b8c      	ldr	r3, [pc, #560]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800174c:	d10b      	bne.n	8001766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174e:	4b89      	ldr	r3, [pc, #548]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d06c      	beq.n	8001834 <HAL_RCC_OscConfig+0x12c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d168      	bne.n	8001834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e24c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176e:	d106      	bne.n	800177e <HAL_RCC_OscConfig+0x76>
 8001770:	4b80      	ldr	r3, [pc, #512]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7f      	ldr	r2, [pc, #508]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e02e      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x98>
 8001786:	4b7b      	ldr	r3, [pc, #492]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7a      	ldr	r2, [pc, #488]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	4b78      	ldr	r3, [pc, #480]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a77      	ldr	r2, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e01d      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0xbc>
 80017aa:	4b72      	ldr	r3, [pc, #456]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a71      	ldr	r2, [pc, #452]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0xd4>
 80017c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a67      	ldr	r2, [pc, #412]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fce2 	bl	80011ac <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fcde 	bl	80011ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	@ 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e200      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0xe4>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fcce 	bl	80011ac <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001814:	f7ff fcca 	bl	80011ac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b64      	cmp	r3, #100	@ 0x64
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1ec      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x10c>
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00b      	beq.n	8001866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800184e:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b08      	cmp	r3, #8
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
 800185a:	4b46      	ldr	r3, [pc, #280]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e1c0      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4939      	ldr	r1, [pc, #228]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e03a      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fc83 	bl	80011ac <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018aa:	f7ff fc7f 	bl	80011ac <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1a1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4927      	ldr	r1, [pc, #156]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc62 	bl	80011ac <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff fc5e 	bl	80011ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e180      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d03a      	beq.n	800198c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_RCC_OscConfig+0x274>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fc42 	bl	80011ac <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fc3e 	bl	80011ac <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e160      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_RCC_OscConfig+0x26c>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f000 face 	bl	8001eec <RCC_Delay>
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <HAL_RCC_OscConfig+0x274>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fc28 	bl	80011ac <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fc24 	bl	80011ac <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d908      	bls.n	8001980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e146      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	42420000 	.word	0x42420000
 800197c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4b92      	ldr	r3, [pc, #584]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e9      	bne.n	8001960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a6 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199e:	4b8b      	ldr	r3, [pc, #556]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a87      	ldr	r2, [pc, #540]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b85      	ldr	r3, [pc, #532]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff fbe5 	bl	80011ac <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff fbe1 	bl	80011ac <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	@ 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e103      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b75      	ldr	r3, [pc, #468]	@ (8001bd0 <HAL_RCC_OscConfig+0x4c8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x312>
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6213      	str	r3, [r2, #32]
 8001a18:	e02d      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x334>
 8001a22:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a69      	ldr	r2, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	e01c      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d10c      	bne.n	8001a5e <HAL_RCC_OscConfig+0x356>
 8001a44:	4b61      	ldr	r3, [pc, #388]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a60      	ldr	r2, [pc, #384]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	4b5e      	ldr	r3, [pc, #376]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a5d      	ldr	r2, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x36e>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b58      	ldr	r3, [pc, #352]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a57      	ldr	r2, [pc, #348]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d015      	beq.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fb95 	bl	80011ac <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fb91 	bl	80011ac <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0b1      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ee      	beq.n	8001a86 <HAL_RCC_OscConfig+0x37e>
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fb7f 	bl	80011ac <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	e00a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fb7b 	bl	80011ac <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e09b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac8:	4b40      	ldr	r3, [pc, #256]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ee      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b3c      	ldr	r3, [pc, #240]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af0:	4b36      	ldr	r3, [pc, #216]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d061      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d146      	bne.n	8001b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b33      	ldr	r3, [pc, #204]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fb4f 	bl	80011ac <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff fb4b 	bl	80011ac <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e06d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f0      	bne.n	8001b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	4921      	ldr	r1, [pc, #132]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a19      	ldr	r1, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fb1f 	bl	80011ac <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fb1b 	bl	80011ac <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46a>
 8001b90:	e035      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fb08 	bl	80011ac <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fb04 	bl	80011ac <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e026      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x498>
 8001bbe:	e01e      	b.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e019      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_OscConfig+0x500>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d0      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b6a      	ldr	r3, [pc, #424]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d910      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b67      	ldr	r3, [pc, #412]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 0207 	bic.w	r2, r3, #7
 8001c36:	4965      	ldr	r1, [pc, #404]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d040      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d115      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e073      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4936      	ldr	r1, [pc, #216]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff fa56 	bl	80011ac <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff fa52 	bl	80011ac <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e053      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d210      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4922      	ldr	r1, [pc, #136]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f821 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_RCC_ClockConfig+0x1d0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9b4 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080087bc 	.word	0x080087bc
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x30>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x36>
 8001e0e:	e027      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e12:	613b      	str	r3, [r7, #16]
      break;
 8001e14:	e027      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d010      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c5b      	lsrs	r3, r3, #17
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e004      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e62:	613b      	str	r3, [r7, #16]
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	693b      	ldr	r3, [r7, #16]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	080087d4 	.word	0x080087d4
 8001e80:	080087e4 	.word	0x080087e4
 8001e84:	003d0900 	.word	0x003d0900

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b02      	ldr	r3, [pc, #8]	@ (8001e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000000 	.word	0x20000000

08001e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ea0:	f7ff fff2 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4903      	ldr	r1, [pc, #12]	@ (8001ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080087cc 	.word	0x080087cc

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	080087cc 	.word	0x080087cc

08001eec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <RCC_Delay+0x34>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <RCC_Delay+0x38>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f08:	bf00      	nop
  }
  while (Delay --);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	60fa      	str	r2, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f9      	bne.n	8001f08 <RCC_Delay+0x1c>
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000000 	.word	0x20000000
 8001f24:	10624dd3 	.word	0x10624dd3

08001f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e076      	b.n	8002028 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f4a:	d009      	beq.n	8001f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	e005      	b.n	8001f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe ff82 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	ea42 0103 	orr.w	r1, r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	0c1a      	lsrs	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f002 0204 	and.w	r2, r2, #4
 8002006:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002016:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002040:	f7ff f8b4 	bl	80011ac <HAL_GetTick>
 8002044:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	e12a      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SPI_Transmit+0x36>
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e122      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_SPI_Transmit+0x48>
 8002074:	2302      	movs	r3, #2
 8002076:	e11b      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2203      	movs	r2, #3
 8002084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020c6:	d10f      	bne.n	80020e8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d007      	beq.n	8002106 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800210e:	d152      	bne.n	80021b6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_SPI_Transmit+0xee>
 8002118:	8b7b      	ldrh	r3, [r7, #26]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d145      	bne.n	80021aa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	1c9a      	adds	r2, r3, #2
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002142:	e032      	b.n	80021aa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d112      	bne.n	8002178 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	1c9a      	adds	r2, r3, #2
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002176:	e018      	b.n	80021aa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002178:	f7ff f818 	bl	80011ac <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d803      	bhi.n	8002190 <HAL_SPI_Transmit+0x160>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800218e:	d102      	bne.n	8002196 <HAL_SPI_Transmit+0x166>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e082      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1c7      	bne.n	8002144 <HAL_SPI_Transmit+0x114>
 80021b4:	e053      	b.n	800225e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_SPI_Transmit+0x194>
 80021be:	8b7b      	ldrh	r3, [r7, #26]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d147      	bne.n	8002254 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ea:	e033      	b.n	8002254 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d113      	bne.n	8002222 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002220:	e018      	b.n	8002254 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002222:	f7fe ffc3 	bl	80011ac <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d803      	bhi.n	800223a <HAL_SPI_Transmit+0x20a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002238:	d102      	bne.n	8002240 <HAL_SPI_Transmit+0x210>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e02d      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1c6      	bne.n	80021ec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa5a 	bl	800271c <SPI_EndRxTxTransaction>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022c6:	2301      	movs	r3, #1
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ca:	f7fe ff6f 	bl	80011ac <HAL_GetTick>
 80022ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d00c      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x4a>
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ee:	d106      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x46>
 80022f8:	7ffb      	ldrb	r3, [r7, #31]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d001      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	e17f      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x5c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x5c>
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e174      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x6e>
 8002322:	2302      	movs	r3, #2
 8002324:	e16d      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b04      	cmp	r3, #4
 8002338:	d003      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	887a      	ldrh	r2, [r7, #2]
 800236a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d007      	beq.n	8002396 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800239e:	d17e      	bne.n	800249e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_SPI_TransmitReceive+0xf6>
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d16c      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	1c9a      	adds	r2, r3, #2
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d2:	e059      	b.n	8002488 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d11b      	bne.n	800241a <HAL_SPI_TransmitReceive+0x162>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d016      	beq.n	800241a <HAL_SPI_TransmitReceive+0x162>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d113      	bne.n	800241a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d119      	bne.n	800245c <HAL_SPI_TransmitReceive+0x1a4>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	b292      	uxth	r2, r2
 800243e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	1c9a      	adds	r2, r3, #2
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800245c:	f7fe fea6 	bl	80011ac <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002468:	429a      	cmp	r2, r3
 800246a:	d80d      	bhi.n	8002488 <HAL_SPI_TransmitReceive+0x1d0>
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002472:	d009      	beq.n	8002488 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0bc      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1a0      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x11c>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d19b      	bne.n	80023d4 <HAL_SPI_TransmitReceive+0x11c>
 800249c:	e082      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x1f4>
 80024a6:	8afb      	ldrh	r3, [r7, #22]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d171      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	330c      	adds	r3, #12
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d2:	e05d      	b.n	8002590 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11c      	bne.n	800251c <HAL_SPI_TransmitReceive+0x264>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_SPI_TransmitReceive+0x264>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d114      	bne.n	800251c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d119      	bne.n	800255e <HAL_SPI_TransmitReceive+0x2a6>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d014      	beq.n	800255e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800255e:	f7fe fe25 	bl	80011ac <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800256a:	429a      	cmp	r2, r3
 800256c:	d803      	bhi.n	8002576 <HAL_SPI_TransmitReceive+0x2be>
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d102      	bne.n	800257c <HAL_SPI_TransmitReceive+0x2c4>
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e038      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d19c      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x21c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d197      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f8b7 	bl	800271c <SPI_EndRxTxTransaction>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01d      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002600:	2300      	movs	r3, #0
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3728      	adds	r7, #40	@ 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800261c:	f7fe fdc6 	bl	80011ac <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800262c:	f7fe fdbe 	bl	80011ac <HAL_GetTick>
 8002630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	0d1b      	lsrs	r3, r3, #20
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002642:	e054      	b.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800264a:	d050      	beq.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800264c:	f7fe fdae 	bl	80011ac <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	d902      	bls.n	8002662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13d      	bne.n	80026de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267a:	d111      	bne.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002684:	d004      	beq.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268e:	d107      	bne.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a8:	d10f      	bne.n	80026ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e017      	b.n	800270e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d19b      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2201      	movs	r2, #1
 8002730:	2102      	movs	r1, #2
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff ff6a 	bl	800260c <SPI_WaitFlagStateUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e013      	b.n	8002776 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff ff57 	bl	800260c <SPI_WaitFlagStateUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e000      	b.n	8002776 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e042      	b.n	8002816 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fbb7 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	@ 0x24
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f972 	bl	8002aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	@ 0x28
 8002822:	af02      	add	r7, sp, #8
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d175      	bne.n	800292a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_UART_Transmit+0x2c>
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06e      	b.n	800292c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2221      	movs	r2, #33	@ 0x21
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800285c:	f7fe fca6 	bl	80011ac <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002876:	d108      	bne.n	800288a <HAL_UART_Transmit+0x6c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e003      	b.n	8002892 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002892:	e02e      	b.n	80028f2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f848 	bl	8002934 <UART_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03a      	b.n	800292c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	3302      	adds	r3, #2
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e007      	b.n	80028e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1cb      	bne.n	8002894 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	2140      	movs	r1, #64	@ 0x40
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f814 	bl	8002934 <UART_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e006      	b.n	800292c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002944:	e03b      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800294c:	d037      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7fe fc2d 	bl	80011ac <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <UART_WaitOnFlagUntilTimeout+0x30>
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03a      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d023      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b80      	cmp	r3, #128	@ 0x80
 800297a:	d020      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b40      	cmp	r3, #64	@ 0x40
 8002980:	d01d      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b08      	cmp	r3, #8
 800298e:	d116      	bne.n	80029be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f81d 	bl	80029e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2208      	movs	r2, #8
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0b4      	beq.n	8002946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b095      	sub	sp, #84	@ 0x54
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3314      	adds	r3, #20
 8002a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a4a:	e841 2300 	strex	r3, r2, [r1]
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1e5      	bne.n	8002a22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d119      	bne.n	8002a92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	330c      	adds	r3, #12
 8002a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f023 0310 	bic.w	r3, r3, #16
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a7e:	61ba      	str	r2, [r7, #24]
 8002a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e5      	bne.n	8002a5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aa0:	bf00      	nop
 8002aa2:	3754      	adds	r7, #84	@ 0x54
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ae6:	f023 030c 	bic.w	r3, r3, #12
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <UART_SetConfig+0x114>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f9d6 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	e002      	b.n	8002b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7ff f9be 	bl	8001e9c <HAL_RCC_GetPCLK1Freq>
 8002b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009a      	lsls	r2, r3, #2
 8002b2c:	441a      	add	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b38:	4a22      	ldr	r2, [pc, #136]	@ (8002bc4 <UART_SetConfig+0x118>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	0119      	lsls	r1, r3, #4
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009a      	lsls	r2, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b58:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <UART_SetConfig+0x118>)
 8002b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2064      	movs	r0, #100	@ 0x64
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	3332      	adds	r3, #50	@ 0x32
 8002b6c:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <UART_SetConfig+0x118>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b78:	4419      	add	r1, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <UART_SetConfig+0x118>)
 8002b92:	fba3 0302 	umull	r0, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2064      	movs	r0, #100	@ 0x64
 8002b9a:	fb00 f303 	mul.w	r3, r0, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	@ 0x32
 8002ba4:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <UART_SetConfig+0x118>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	51eb851f 	.word	0x51eb851f

08002bc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002bcc:	4904      	ldr	r1, [pc, #16]	@ (8002be0 <MX_FATFS_Init+0x18>)
 8002bce:	4805      	ldr	r0, [pc, #20]	@ (8002be4 <MX_FATFS_Init+0x1c>)
 8002bd0:	f004 fed4 	bl	800797c <FATFS_LinkDriver>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <MX_FATFS_Init+0x20>)
 8002bda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000238 	.word	0x20000238
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	20000234 	.word	0x20000234

08002bec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002bf0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f9fa 	bl	8003000 <SD_disk_initialize>
 8002c0c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fad2 	bl	80031cc <SD_disk_status>
 8002c28:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002c42:	7bf8      	ldrb	r0, [r7, #15]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	f000 fad3 	bl	80031f4 <SD_disk_read>
 8002c4e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002c68:	7bf8      	ldrb	r0, [r7, #15]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	f000 fb2a 	bl	80032c8 <SD_disk_write>
 8002c74:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	603a      	str	r2, [r7, #0]
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002c8e:	79b9      	ldrb	r1, [r7, #6]
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fb9b 	bl	80033d0 <SD_disk_ioctl>
 8002c9a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2110      	movs	r1, #16
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <SELECT+0x14>)
 8002cae:	f7fe fd13 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40010800 	.word	0x40010800

08002cbc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <DESELECT+0x14>)
 8002cc6:	f7fe fd07 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40010800 	.word	0x40010800

08002cd4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cde:	bf00      	nop
 8002ce0:	4b08      	ldr	r3, [pc, #32]	@ (8002d04 <SPI_TxByte+0x30>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d1f8      	bne.n	8002ce0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002cee:	1df9      	adds	r1, r7, #7
 8002cf0:	2364      	movs	r3, #100	@ 0x64
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4803      	ldr	r0, [pc, #12]	@ (8002d04 <SPI_TxByte+0x30>)
 8002cf6:	f7ff f99b 	bl	8002030 <HAL_SPI_Transmit>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000090 	.word	0x20000090

08002d08 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d14:	bf00      	nop
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <SPI_TxBuffer+0x30>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d1f8      	bne.n	8002d16 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002d24:	887a      	ldrh	r2, [r7, #2]
 8002d26:	2364      	movs	r3, #100	@ 0x64
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4803      	ldr	r0, [pc, #12]	@ (8002d38 <SPI_TxBuffer+0x30>)
 8002d2c:	f7ff f980 	bl	8002030 <HAL_SPI_Transmit>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000090 	.word	0x20000090

08002d3c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002d42:	23ff      	movs	r3, #255	@ 0xff
 8002d44:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d46:	bf00      	nop
 8002d48:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <SPI_RxByte+0x34>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d1f8      	bne.n	8002d48 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002d56:	1dba      	adds	r2, r7, #6
 8002d58:	1df9      	adds	r1, r7, #7
 8002d5a:	2364      	movs	r3, #100	@ 0x64
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4803      	ldr	r0, [pc, #12]	@ (8002d70 <SPI_RxByte+0x34>)
 8002d62:	f7ff faa9 	bl	80022b8 <HAL_SPI_TransmitReceive>
  return data;
 8002d66:	79bb      	ldrb	r3, [r7, #6]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000090 	.word	0x20000090

08002d74 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002d7c:	f7ff ffde 	bl	8002d3c <SPI_RxByte>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	701a      	strb	r2, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <SD_ReadyWait+0x30>)
 8002d98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d9c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002d9e:	f7ff ffcd 	bl	8002d3c <SPI_RxByte>
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2bff      	cmp	r3, #255	@ 0xff
 8002daa:	d003      	beq.n	8002db4 <SD_ReadyWait+0x24>
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <SD_ReadyWait+0x30>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f4      	bne.n	8002d9e <SD_ReadyWait+0xe>
  return res;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000023e 	.word	0x2000023e

08002dc4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002dca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002dce:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002dd0:	f7ff ff74 	bl	8002cbc <DESELECT>
  for(int i = 0; i < 10; i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	e005      	b.n	8002de6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002dda:	20ff      	movs	r0, #255	@ 0xff
 8002ddc:	f7ff ff7a 	bl	8002cd4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	ddf6      	ble.n	8002dda <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8002dec:	f7ff ff5a 	bl	8002ca4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002df0:	2340      	movs	r3, #64	@ 0x40
 8002df2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8002e04:	2395      	movs	r3, #149	@ 0x95
 8002e06:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002e08:	463b      	mov	r3, r7
 8002e0a:	2106      	movs	r1, #6
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff7b 	bl	8002d08 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002e12:	e002      	b.n	8002e1a <SD_PowerOn+0x56>
  {
    cnt--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002e1a:	f7ff ff8f 	bl	8002d3c <SPI_RxByte>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d002      	beq.n	8002e2a <SD_PowerOn+0x66>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f4      	bne.n	8002e14 <SD_PowerOn+0x50>
  }
  DESELECT();
 8002e2a:	f7ff ff47 	bl	8002cbc <DESELECT>
  SPI_TxByte(0XFF);
 8002e2e:	20ff      	movs	r0, #255	@ 0xff
 8002e30:	f7ff ff50 	bl	8002cd4 <SPI_TxByte>
  PowerFlag = 1;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <SD_PowerOn+0x80>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000241 	.word	0x20000241

08002e48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <SD_PowerOff+0x14>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000241 	.word	0x20000241

08002e60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002e64:	4b02      	ldr	r3, [pc, #8]	@ (8002e70 <SD_CheckPower+0x10>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000241 	.word	0x20000241

08002e74 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <SD_RxDataBlock+0x58>)
 8002e80:	22c8      	movs	r2, #200	@ 0xc8
 8002e82:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002e84:	f7ff ff5a 	bl	8002d3c <SPI_RxByte>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2bff      	cmp	r3, #255	@ 0xff
 8002e90:	d103      	bne.n	8002e9a <SD_RxDataBlock+0x26>
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <SD_RxDataBlock+0x58>)
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f4      	bne.n	8002e84 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8002e9e:	d001      	beq.n	8002ea4 <SD_RxDataBlock+0x30>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e00f      	b.n	8002ec4 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff62 	bl	8002d74 <SPI_RxBytePtr>
  } while(len--);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	603a      	str	r2, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f4      	bne.n	8002ea4 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8002eba:	f7ff ff3f 	bl	8002d3c <SPI_RxByte>
  SPI_RxByte();
 8002ebe:	f7ff ff3d 	bl	8002d3c <SPI_RxByte>
  return TRUE;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2000023c 	.word	0x2000023c

08002ed0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002ee0:	f7ff ff56 	bl	8002d90 <SD_ReadyWait>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d001      	beq.n	8002eee <SD_TxDataBlock+0x1e>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e02f      	b.n	8002f4e <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff feef 	bl	8002cd4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	2bfd      	cmp	r3, #253	@ 0xfd
 8002efa:	d020      	beq.n	8002f3e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ff01 	bl	8002d08 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002f06:	f7ff ff19 	bl	8002d3c <SPI_RxByte>
    SPI_RxByte();
 8002f0a:	f7ff ff17 	bl	8002d3c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002f0e:	e00b      	b.n	8002f28 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8002f10:	f7ff ff14 	bl	8002d3c <SPI_RxByte>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d006      	beq.n	8002f30 <SD_TxDataBlock+0x60>
      i++;
 8002f22:	7bbb      	ldrb	r3, [r7, #14]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	2b40      	cmp	r3, #64	@ 0x40
 8002f2c:	d9f0      	bls.n	8002f10 <SD_TxDataBlock+0x40>
 8002f2e:	e000      	b.n	8002f32 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8002f30:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002f32:	bf00      	nop
 8002f34:	f7ff ff02 	bl	8002d3c <SPI_RxByte>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0fa      	beq.n	8002f34 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d101      	bne.n	8002f4c <SD_TxDataBlock+0x7c>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <SD_TxDataBlock+0x7e>

  return FALSE;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	6039      	str	r1, [r7, #0]
 8002f60:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002f62:	f7ff ff15 	bl	8002d90 <SD_ReadyWait>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2bff      	cmp	r3, #255	@ 0xff
 8002f6a:	d001      	beq.n	8002f70 <SD_SendCmd+0x1a>
 8002f6c:	23ff      	movs	r3, #255	@ 0xff
 8002f6e:	e042      	b.n	8002ff6 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff feae 	bl	8002cd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	0e1b      	lsrs	r3, r3, #24
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fea8 	bl	8002cd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fea2 	bl	8002cd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe9c 	bl	8002cd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fe97 	bl	8002cd4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d102      	bne.n	8002fb2 <SD_SendCmd+0x5c>
 8002fac:	2395      	movs	r3, #149	@ 0x95
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e007      	b.n	8002fc2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b48      	cmp	r3, #72	@ 0x48
 8002fb6:	d102      	bne.n	8002fbe <SD_SendCmd+0x68>
 8002fb8:	2387      	movs	r3, #135	@ 0x87
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e001      	b.n	8002fc2 <SD_SendCmd+0x6c>
  else crc = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fe85 	bl	8002cd4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	2b4c      	cmp	r3, #76	@ 0x4c
 8002fce:	d101      	bne.n	8002fd4 <SD_SendCmd+0x7e>
 8002fd0:	f7ff feb4 	bl	8002d3c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8002fd4:	230a      	movs	r3, #10
 8002fd6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8002fd8:	f7ff feb0 	bl	8002d3c <SPI_RxByte>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002fe0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	da05      	bge.n	8002ff4 <SD_SendCmd+0x9e>
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	73bb      	strb	r3, [r7, #14]
 8002fee:	7bbb      	ldrb	r3, [r7, #14]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f1      	bne.n	8002fd8 <SD_SendCmd+0x82>

  return res;
 8002ff4:	7b7b      	ldrb	r3, [r7, #13]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <SD_disk_initialize+0x14>
 8003010:	2301      	movs	r3, #1
 8003012:	e0d1      	b.n	80031b8 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003014:	4b6a      	ldr	r3, [pc, #424]	@ (80031c0 <SD_disk_initialize+0x1c0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <SD_disk_initialize+0x2a>
 8003022:	4b67      	ldr	r3, [pc, #412]	@ (80031c0 <SD_disk_initialize+0x1c0>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e0c6      	b.n	80031b8 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800302a:	f7ff fecb 	bl	8002dc4 <SD_PowerOn>
  /* slave select */
  SELECT();
 800302e:	f7ff fe39 	bl	8002ca4 <SELECT>
  /* check disk type */
  type = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003036:	2100      	movs	r1, #0
 8003038:	2040      	movs	r0, #64	@ 0x40
 800303a:	f7ff ff8c 	bl	8002f56 <SD_SendCmd>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 80a1 	bne.w	8003188 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003046:	4b5f      	ldr	r3, [pc, #380]	@ (80031c4 <SD_disk_initialize+0x1c4>)
 8003048:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800304c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800304e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003052:	2048      	movs	r0, #72	@ 0x48
 8003054:	f7ff ff7f 	bl	8002f56 <SD_SendCmd>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d155      	bne.n	800310a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e00c      	b.n	800307e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8003064:	7bfc      	ldrb	r4, [r7, #15]
 8003066:	f7ff fe69 	bl	8002d3c <SPI_RxByte>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	f104 0310 	add.w	r3, r4, #16
 8003072:	443b      	add	r3, r7
 8003074:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d9ef      	bls.n	8003064 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003084:	7abb      	ldrb	r3, [r7, #10]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d17e      	bne.n	8003188 <SD_disk_initialize+0x188>
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	2baa      	cmp	r3, #170	@ 0xaa
 800308e:	d17b      	bne.n	8003188 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003090:	2100      	movs	r1, #0
 8003092:	2077      	movs	r0, #119	@ 0x77
 8003094:	f7ff ff5f 	bl	8002f56 <SD_SendCmd>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d807      	bhi.n	80030ae <SD_disk_initialize+0xae>
 800309e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80030a2:	2069      	movs	r0, #105	@ 0x69
 80030a4:	f7ff ff57 	bl	8002f56 <SD_SendCmd>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80030ae:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <SD_disk_initialize+0x1c4>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ec      	bne.n	8003090 <SD_disk_initialize+0x90>
 80030b6:	e000      	b.n	80030ba <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030b8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80030ba:	4b42      	ldr	r3, [pc, #264]	@ (80031c4 <SD_disk_initialize+0x1c4>)
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d062      	beq.n	8003188 <SD_disk_initialize+0x188>
 80030c2:	2100      	movs	r1, #0
 80030c4:	207a      	movs	r0, #122	@ 0x7a
 80030c6:	f7ff ff46 	bl	8002f56 <SD_SendCmd>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d15b      	bne.n	8003188 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e00c      	b.n	80030f0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80030d6:	7bfc      	ldrb	r4, [r7, #15]
 80030d8:	f7ff fe30 	bl	8002d3c <SPI_RxByte>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	f104 0310 	add.w	r3, r4, #16
 80030e4:	443b      	add	r3, r7
 80030e6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3301      	adds	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d9ef      	bls.n	80030d6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80030f6:	7a3b      	ldrb	r3, [r7, #8]
 80030f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <SD_disk_initialize+0x104>
 8003100:	230c      	movs	r3, #12
 8003102:	e000      	b.n	8003106 <SD_disk_initialize+0x106>
 8003104:	2304      	movs	r3, #4
 8003106:	73bb      	strb	r3, [r7, #14]
 8003108:	e03e      	b.n	8003188 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800310a:	2100      	movs	r1, #0
 800310c:	2077      	movs	r0, #119	@ 0x77
 800310e:	f7ff ff22 	bl	8002f56 <SD_SendCmd>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d808      	bhi.n	800312a <SD_disk_initialize+0x12a>
 8003118:	2100      	movs	r1, #0
 800311a:	2069      	movs	r0, #105	@ 0x69
 800311c:	f7ff ff1b 	bl	8002f56 <SD_SendCmd>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d801      	bhi.n	800312a <SD_disk_initialize+0x12a>
 8003126:	2302      	movs	r3, #2
 8003128:	e000      	b.n	800312c <SD_disk_initialize+0x12c>
 800312a:	2301      	movs	r3, #1
 800312c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800312e:	7bbb      	ldrb	r3, [r7, #14]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d10e      	bne.n	8003152 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003134:	2100      	movs	r1, #0
 8003136:	2077      	movs	r0, #119	@ 0x77
 8003138:	f7ff ff0d 	bl	8002f56 <SD_SendCmd>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d80e      	bhi.n	8003160 <SD_disk_initialize+0x160>
 8003142:	2100      	movs	r1, #0
 8003144:	2069      	movs	r0, #105	@ 0x69
 8003146:	f7ff ff06 	bl	8002f56 <SD_SendCmd>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <SD_disk_initialize+0x160>
 8003150:	e00c      	b.n	800316c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003152:	2100      	movs	r1, #0
 8003154:	2041      	movs	r0, #65	@ 0x41
 8003156:	f7ff fefe 	bl	8002f56 <SD_SendCmd>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d004      	beq.n	800316a <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <SD_disk_initialize+0x1c4>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e2      	bne.n	800312e <SD_disk_initialize+0x12e>
 8003168:	e000      	b.n	800316c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800316a:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <SD_disk_initialize+0x1c4>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <SD_disk_initialize+0x184>
 8003174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003178:	2050      	movs	r0, #80	@ 0x50
 800317a:	f7ff feec 	bl	8002f56 <SD_SendCmd>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <SD_disk_initialize+0x188>
 8003184:	2300      	movs	r3, #0
 8003186:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8003188:	4a0f      	ldr	r2, [pc, #60]	@ (80031c8 <SD_disk_initialize+0x1c8>)
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800318e:	f7ff fd95 	bl	8002cbc <DESELECT>
  SPI_RxByte();
 8003192:	f7ff fdd3 	bl	8002d3c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8003196:	7bbb      	ldrb	r3, [r7, #14]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <SD_disk_initialize+0x1c0>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <SD_disk_initialize+0x1c0>)
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e001      	b.n	80031b2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80031ae:	f7ff fe4b 	bl	8002e48 <SD_PowerOff>
  }
  return Stat;
 80031b2:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <SD_disk_initialize+0x1c0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	20000020 	.word	0x20000020
 80031c4:	2000023c 	.word	0x2000023c
 80031c8:	20000240 	.word	0x20000240

080031cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <SD_disk_status+0x14>
 80031dc:	2301      	movs	r3, #1
 80031de:	e002      	b.n	80031e6 <SD_disk_status+0x1a>
  return Stat;
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <SD_disk_status+0x24>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000020 	.word	0x20000020

080031f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <SD_disk_read+0x1c>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <SD_disk_read+0x20>
 8003210:	2304      	movs	r3, #4
 8003212:	e051      	b.n	80032b8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003214:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <SD_disk_read+0xcc>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <SD_disk_read+0x32>
 8003222:	2303      	movs	r3, #3
 8003224:	e048      	b.n	80032b8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003226:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <SD_disk_read+0xd0>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <SD_disk_read+0x44>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	025b      	lsls	r3, r3, #9
 8003236:	607b      	str	r3, [r7, #4]

  SELECT();
 8003238:	f7ff fd34 	bl	8002ca4 <SELECT>

  if (count == 1)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d111      	bne.n	8003266 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	2051      	movs	r0, #81	@ 0x51
 8003246:	f7ff fe86 	bl	8002f56 <SD_SendCmd>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d129      	bne.n	80032a4 <SD_disk_read+0xb0>
 8003250:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f7ff fe0d 	bl	8002e74 <SD_RxDataBlock>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d021      	beq.n	80032a4 <SD_disk_read+0xb0>
 8003260:	2300      	movs	r3, #0
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	e01e      	b.n	80032a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	2052      	movs	r0, #82	@ 0x52
 800326a:	f7ff fe74 	bl	8002f56 <SD_SendCmd>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d117      	bne.n	80032a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8003274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003278:	68b8      	ldr	r0, [r7, #8]
 800327a:	f7ff fdfb 	bl	8002e74 <SD_RxDataBlock>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <SD_disk_read+0xa6>
        buff += 512;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800328a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ed      	bne.n	8003274 <SD_disk_read+0x80>
 8003298:	e000      	b.n	800329c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800329a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800329c:	2100      	movs	r1, #0
 800329e:	204c      	movs	r0, #76	@ 0x4c
 80032a0:	f7ff fe59 	bl	8002f56 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80032a4:	f7ff fd0a 	bl	8002cbc <DESELECT>
  SPI_RxByte();
 80032a8:	f7ff fd48 	bl	8002d3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bf14      	ite	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	2300      	moveq	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000020 	.word	0x20000020
 80032c4:	20000240 	.word	0x20000240

080032c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <SD_disk_write+0x1c>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <SD_disk_write+0x20>
 80032e4:	2304      	movs	r3, #4
 80032e6:	e06b      	b.n	80033c0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80032e8:	4b37      	ldr	r3, [pc, #220]	@ (80033c8 <SD_disk_write+0x100>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <SD_disk_write+0x32>
 80032f6:	2303      	movs	r3, #3
 80032f8:	e062      	b.n	80033c0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80032fa:	4b33      	ldr	r3, [pc, #204]	@ (80033c8 <SD_disk_write+0x100>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <SD_disk_write+0x44>
 8003308:	2302      	movs	r3, #2
 800330a:	e059      	b.n	80033c0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800330c:	4b2f      	ldr	r3, [pc, #188]	@ (80033cc <SD_disk_write+0x104>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <SD_disk_write+0x56>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	025b      	lsls	r3, r3, #9
 800331c:	607b      	str	r3, [r7, #4]

  SELECT();
 800331e:	f7ff fcc1 	bl	8002ca4 <SELECT>

  if (count == 1)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d110      	bne.n	800334a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	2058      	movs	r0, #88	@ 0x58
 800332c:	f7ff fe13 	bl	8002f56 <SD_SendCmd>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d13a      	bne.n	80033ac <SD_disk_write+0xe4>
 8003336:	21fe      	movs	r1, #254	@ 0xfe
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f7ff fdc9 	bl	8002ed0 <SD_TxDataBlock>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d033      	beq.n	80033ac <SD_disk_write+0xe4>
      count = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	e030      	b.n	80033ac <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <SD_disk_write+0x104>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003356:	2100      	movs	r1, #0
 8003358:	2077      	movs	r0, #119	@ 0x77
 800335a:	f7ff fdfc 	bl	8002f56 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	2057      	movs	r0, #87	@ 0x57
 8003362:	f7ff fdf8 	bl	8002f56 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	2059      	movs	r0, #89	@ 0x59
 800336a:	f7ff fdf4 	bl	8002f56 <SD_SendCmd>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11b      	bne.n	80033ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003374:	21fc      	movs	r1, #252	@ 0xfc
 8003376:	68b8      	ldr	r0, [r7, #8]
 8003378:	f7ff fdaa 	bl	8002ed0 <SD_TxDataBlock>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <SD_disk_write+0xd0>
        buff += 512;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003388:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ee      	bne.n	8003374 <SD_disk_write+0xac>
 8003396:	e000      	b.n	800339a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003398:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800339a:	21fd      	movs	r1, #253	@ 0xfd
 800339c:	2000      	movs	r0, #0
 800339e:	f7ff fd97 	bl	8002ed0 <SD_TxDataBlock>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <SD_disk_write+0xe4>
      {
        count = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80033ac:	f7ff fc86 	bl	8002cbc <DESELECT>
  SPI_RxByte();
 80033b0:	f7ff fcc4 	bl	8002d3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf14      	ite	ne
 80033ba:	2301      	movne	r3, #1
 80033bc:	2300      	moveq	r3, #0
 80033be:	b2db      	uxtb	r3, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000020 	.word	0x20000020
 80033cc:	20000240 	.word	0x20000240

080033d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b08b      	sub	sp, #44	@ 0x2c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	603a      	str	r2, [r7, #0]
 80033da:	71fb      	strb	r3, [r7, #7]
 80033dc:	460b      	mov	r3, r1
 80033de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <SD_disk_ioctl+0x1e>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e113      	b.n	8003616 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80033f4:	79bb      	ldrb	r3, [r7, #6]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d124      	bne.n	8003444 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d012      	beq.n	8003428 <SD_disk_ioctl+0x58>
 8003402:	2b02      	cmp	r3, #2
 8003404:	dc1a      	bgt.n	800343c <SD_disk_ioctl+0x6c>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <SD_disk_ioctl+0x40>
 800340a:	2b01      	cmp	r3, #1
 800340c:	d006      	beq.n	800341c <SD_disk_ioctl+0x4c>
 800340e:	e015      	b.n	800343c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003410:	f7ff fd1a 	bl	8002e48 <SD_PowerOff>
      res = RES_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800341a:	e0fa      	b.n	8003612 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800341c:	f7ff fcd2 	bl	8002dc4 <SD_PowerOn>
      res = RES_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003426:	e0f4      	b.n	8003612 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	1c5c      	adds	r4, r3, #1
 800342c:	f7ff fd18 	bl	8002e60 <SD_CheckPower>
 8003430:	4603      	mov	r3, r0
 8003432:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800343a:	e0ea      	b.n	8003612 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800343c:	2304      	movs	r3, #4
 800343e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003442:	e0e6      	b.n	8003612 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003444:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <SD_disk_ioctl+0x250>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8003452:	2303      	movs	r3, #3
 8003454:	e0df      	b.n	8003616 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003456:	f7ff fc25 	bl	8002ca4 <SELECT>
    switch (ctrl)
 800345a:	79bb      	ldrb	r3, [r7, #6]
 800345c:	2b0d      	cmp	r3, #13
 800345e:	f200 80c9 	bhi.w	80035f4 <SD_disk_ioctl+0x224>
 8003462:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <SD_disk_ioctl+0x98>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	0800355f 	.word	0x0800355f
 800346c:	080034a1 	.word	0x080034a1
 8003470:	0800354f 	.word	0x0800354f
 8003474:	080035f5 	.word	0x080035f5
 8003478:	080035f5 	.word	0x080035f5
 800347c:	080035f5 	.word	0x080035f5
 8003480:	080035f5 	.word	0x080035f5
 8003484:	080035f5 	.word	0x080035f5
 8003488:	080035f5 	.word	0x080035f5
 800348c:	080035f5 	.word	0x080035f5
 8003490:	080035f5 	.word	0x080035f5
 8003494:	08003571 	.word	0x08003571
 8003498:	08003595 	.word	0x08003595
 800349c:	080035b9 	.word	0x080035b9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80034a0:	2100      	movs	r1, #0
 80034a2:	2049      	movs	r0, #73	@ 0x49
 80034a4:	f7ff fd57 	bl	8002f56 <SD_SendCmd>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80a6 	bne.w	80035fc <SD_disk_ioctl+0x22c>
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	2110      	movs	r1, #16
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fcdc 	bl	8002e74 <SD_RxDataBlock>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 809c 	beq.w	80035fc <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80034c4:	7b3b      	ldrb	r3, [r7, #12]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80034ce:	7d7b      	ldrb	r3, [r7, #21]
 80034d0:	461a      	mov	r2, r3
 80034d2:	7d3b      	ldrb	r3, [r7, #20]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4413      	add	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80034e0:	8bfb      	ldrh	r3, [r7, #30]
 80034e2:	029a      	lsls	r2, r3, #10
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e02d      	b.n	8003546 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80034ea:	7c7b      	ldrb	r3, [r7, #17]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	7dbb      	ldrb	r3, [r7, #22]
 80034f4:	09db      	lsrs	r3, r3, #7
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	7d7b      	ldrb	r3, [r7, #21]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f003 0306 	and.w	r3, r3, #6
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4413      	add	r3, r2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3302      	adds	r3, #2
 800350e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003512:	7d3b      	ldrb	r3, [r7, #20]
 8003514:	099b      	lsrs	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	b29b      	uxth	r3, r3
 8003520:	4413      	add	r3, r2
 8003522:	b29a      	uxth	r2, r3
 8003524:	7cbb      	ldrb	r3, [r7, #18]
 8003526:	029b      	lsls	r3, r3, #10
 8003528:	b29b      	uxth	r3, r3
 800352a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800352e:	b29b      	uxth	r3, r3
 8003530:	4413      	add	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	3301      	adds	r3, #1
 8003536:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003538:	8bfa      	ldrh	r2, [r7, #30]
 800353a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800353e:	3b09      	subs	r3, #9
 8003540:	409a      	lsls	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800354c:	e056      	b.n	80035fc <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003554:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800355c:	e055      	b.n	800360a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800355e:	f7ff fc17 	bl	8002d90 <SD_ReadyWait>
 8003562:	4603      	mov	r3, r0
 8003564:	2bff      	cmp	r3, #255	@ 0xff
 8003566:	d14b      	bne.n	8003600 <SD_disk_ioctl+0x230>
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800356e:	e047      	b.n	8003600 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003570:	2100      	movs	r1, #0
 8003572:	2049      	movs	r0, #73	@ 0x49
 8003574:	f7ff fcef 	bl	8002f56 <SD_SendCmd>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d142      	bne.n	8003604 <SD_disk_ioctl+0x234>
 800357e:	2110      	movs	r1, #16
 8003580:	6a38      	ldr	r0, [r7, #32]
 8003582:	f7ff fc77 	bl	8002e74 <SD_RxDataBlock>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03b      	beq.n	8003604 <SD_disk_ioctl+0x234>
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003592:	e037      	b.n	8003604 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003594:	2100      	movs	r1, #0
 8003596:	204a      	movs	r0, #74	@ 0x4a
 8003598:	f7ff fcdd 	bl	8002f56 <SD_SendCmd>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d132      	bne.n	8003608 <SD_disk_ioctl+0x238>
 80035a2:	2110      	movs	r1, #16
 80035a4:	6a38      	ldr	r0, [r7, #32]
 80035a6:	f7ff fc65 	bl	8002e74 <SD_RxDataBlock>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d02b      	beq.n	8003608 <SD_disk_ioctl+0x238>
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80035b6:	e027      	b.n	8003608 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80035b8:	2100      	movs	r1, #0
 80035ba:	207a      	movs	r0, #122	@ 0x7a
 80035bc:	f7ff fccb 	bl	8002f56 <SD_SendCmd>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035cc:	e00b      	b.n	80035e6 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80035ce:	6a3c      	ldr	r4, [r7, #32]
 80035d0:	1c63      	adds	r3, r4, #1
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	f7ff fbb2 	bl	8002d3c <SPI_RxByte>
 80035d8:	4603      	mov	r3, r0
 80035da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80035dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035e0:	3301      	adds	r3, #1
 80035e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80035e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d9ef      	bls.n	80035ce <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80035f4:	2304      	movs	r3, #4
 80035f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80035fa:	e006      	b.n	800360a <SD_disk_ioctl+0x23a>
      break;
 80035fc:	bf00      	nop
 80035fe:	e004      	b.n	800360a <SD_disk_ioctl+0x23a>
      break;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <SD_disk_ioctl+0x23a>
      break;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <SD_disk_ioctl+0x23a>
      break;
 8003608:	bf00      	nop
    }
    DESELECT();
 800360a:	f7ff fb57 	bl	8002cbc <DESELECT>
    SPI_RxByte();
 800360e:	f7ff fb95 	bl	8002d3c <SPI_RxByte>
  }
  return res;
 8003612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003616:	4618      	mov	r0, r3
 8003618:	372c      	adds	r7, #44	@ 0x2c
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	20000020 	.word	0x20000020

08003624 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4a08      	ldr	r2, [pc, #32]	@ (8003654 <disk_status+0x30>)
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	79fa      	ldrb	r2, [r7, #7]
 800363c:	4905      	ldr	r1, [pc, #20]	@ (8003654 <disk_status+0x30>)
 800363e:	440a      	add	r2, r1
 8003640:	7a12      	ldrb	r2, [r2, #8]
 8003642:	4610      	mov	r0, r2
 8003644:	4798      	blx	r3
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]
  return stat;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000464 	.word	0x20000464

08003658 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <disk_initialize+0x48>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	4a0b      	ldr	r2, [pc, #44]	@ (80036a0 <disk_initialize+0x48>)
 8003674:	2101      	movs	r1, #1
 8003676:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <disk_initialize+0x48>)
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	79fa      	ldrb	r2, [r7, #7]
 8003686:	4906      	ldr	r1, [pc, #24]	@ (80036a0 <disk_initialize+0x48>)
 8003688:	440a      	add	r2, r1
 800368a:	7a12      	ldrb	r2, [r2, #8]
 800368c:	4610      	mov	r0, r2
 800368e:	4798      	blx	r3
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000464 	.word	0x20000464

080036a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	4a0a      	ldr	r2, [pc, #40]	@ (80036e0 <disk_read+0x3c>)
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	689c      	ldr	r4, [r3, #8]
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <disk_read+0x3c>)
 80036c4:	4413      	add	r3, r2
 80036c6:	7a18      	ldrb	r0, [r3, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	47a0      	blx	r4
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000464 	.word	0x20000464

080036e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003720 <disk_write+0x3c>)
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	68dc      	ldr	r4, [r3, #12]
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	4a07      	ldr	r2, [pc, #28]	@ (8003720 <disk_write+0x3c>)
 8003704:	4413      	add	r3, r2
 8003706:	7a18      	ldrb	r0, [r3, #8]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	47a0      	blx	r4
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]
  return res;
 8003714:	7dfb      	ldrb	r3, [r7, #23]
}
 8003716:	4618      	mov	r0, r3
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop
 8003720:	20000464 	.word	0x20000464

08003724 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	603a      	str	r2, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
 8003730:	460b      	mov	r3, r1
 8003732:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	4a09      	ldr	r2, [pc, #36]	@ (800375c <disk_ioctl+0x38>)
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	4906      	ldr	r1, [pc, #24]	@ (800375c <disk_ioctl+0x38>)
 8003744:	440a      	add	r2, r1
 8003746:	7a10      	ldrb	r0, [r2, #8]
 8003748:	79b9      	ldrb	r1, [r7, #6]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	4798      	blx	r3
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
  return res;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000464 	.word	0x20000464

08003760 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003774:	e007      	b.n	8003786 <mem_cpy+0x26>
		*d++ = *s++;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	1c53      	adds	r3, r2, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	6179      	str	r1, [r7, #20]
 8003782:	7812      	ldrb	r2, [r2, #0]
 8003784:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f2      	bne.n	8003776 <mem_cpy+0x16>
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80037ac:	e005      	b.n	80037ba <mem_set+0x1e>
		*d++ = (BYTE)val;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	617a      	str	r2, [r7, #20]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f4      	bne.n	80037ae <mem_set+0x12>
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80037e8:	bf00      	nop
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <mem_cmp+0x40>
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	61fa      	str	r2, [r7, #28]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	61ba      	str	r2, [r7, #24]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	1acb      	subs	r3, r1, r3
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ec      	beq.n	80037ea <mem_cmp+0x1a>
	return r;
 8003810:	697b      	ldr	r3, [r7, #20]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	@ 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003826:	e002      	b.n	800382e <chk_chr+0x12>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3301      	adds	r3, #1
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <chk_chr+0x26>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4293      	cmp	r3, r2
 8003840:	d1f2      	bne.n	8003828 <chk_chr+0xc>
	return *str;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e03b      	b.n	80038dc <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003864:	4931      	ldr	r1, [pc, #196]	@ (800392c <chk_lock+0xdc>)
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02c      	beq.n	80038d2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003878:	492c      	ldr	r1, [pc, #176]	@ (800392c <chk_lock+0xdc>)
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d120      	bne.n	80038d6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8003894:	4925      	ldr	r1, [pc, #148]	@ (800392c <chk_lock+0xdc>)
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3304      	adds	r3, #4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ac:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d111      	bne.n	80038d6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80038b2:	491e      	ldr	r1, [pc, #120]	@ (800392c <chk_lock+0xdc>)
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3308      	adds	r3, #8
 80038c2:	881a      	ldrh	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ca:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d102      	bne.n	80038d6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80038d0:	e007      	b.n	80038e2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d9c0      	bls.n	8003864 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d109      	bne.n	80038fc <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <chk_lock+0xa4>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d101      	bne.n	80038f8 <chk_lock+0xa8>
 80038f4:	2300      	movs	r3, #0
 80038f6:	e013      	b.n	8003920 <chk_lock+0xd0>
 80038f8:	2312      	movs	r3, #18
 80038fa:	e011      	b.n	8003920 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <chk_lock+0xca>
 8003902:	490a      	ldr	r1, [pc, #40]	@ (800392c <chk_lock+0xdc>)
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	330a      	adds	r3, #10
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003918:	d101      	bne.n	800391e <chk_lock+0xce>
 800391a:	2310      	movs	r3, #16
 800391c:	e000      	b.n	8003920 <chk_lock+0xd0>
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	2000024c 	.word	0x2000024c

08003930 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e002      	b.n	8003942 <enq_lock+0x12>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3301      	adds	r3, #1
 8003940:	607b      	str	r3, [r7, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d809      	bhi.n	800395c <enq_lock+0x2c>
 8003948:	490a      	ldr	r1, [pc, #40]	@ (8003974 <enq_lock+0x44>)
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ef      	bne.n	800393c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	2000024c 	.word	0x2000024c

08003978 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e02e      	b.n	80039e6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003988:	4958      	ldr	r1, [pc, #352]	@ (8003aec <inc_lock+0x174>)
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d11d      	bne.n	80039e0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80039a4:	4951      	ldr	r1, [pc, #324]	@ (8003aec <inc_lock+0x174>)
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3304      	adds	r3, #4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10e      	bne.n	80039e0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80039c2:	494a      	ldr	r1, [pc, #296]	@ (8003aec <inc_lock+0x174>)
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3308      	adds	r3, #8
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039da:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80039dc:	429a      	cmp	r2, r3
 80039de:	d006      	beq.n	80039ee <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d9cd      	bls.n	8003988 <inc_lock+0x10>
 80039ec:	e000      	b.n	80039f0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80039ee:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d148      	bne.n	8003a88 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e002      	b.n	8003a02 <inc_lock+0x8a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d809      	bhi.n	8003a1c <inc_lock+0xa4>
 8003a08:	4938      	ldr	r1, [pc, #224]	@ (8003aec <inc_lock+0x174>)
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ef      	bne.n	80039fc <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d101      	bne.n	8003a26 <inc_lock+0xae>
 8003a22:	2300      	movs	r3, #0
 8003a24:	e05d      	b.n	8003ae2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	482f      	ldr	r0, [pc, #188]	@ (8003aec <inc_lock+0x174>)
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	4829      	ldr	r0, [pc, #164]	@ (8003aec <inc_lock+0x174>)
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4403      	add	r3, r0
 8003a54:	3304      	adds	r3, #4
 8003a56:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5e:	88d8      	ldrh	r0, [r3, #6]
 8003a60:	4922      	ldr	r1, [pc, #136]	@ (8003aec <inc_lock+0x174>)
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3308      	adds	r3, #8
 8003a70:	4602      	mov	r2, r0
 8003a72:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003a74:	491d      	ldr	r1, [pc, #116]	@ (8003aec <inc_lock+0x174>)
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	330a      	adds	r3, #10
 8003a84:	2200      	movs	r2, #0
 8003a86:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <inc_lock+0x130>
 8003a8e:	4917      	ldr	r1, [pc, #92]	@ (8003aec <inc_lock+0x174>)
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	330a      	adds	r3, #10
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <inc_lock+0x130>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e01c      	b.n	8003ae2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <inc_lock+0x14e>
 8003aae:	490f      	ldr	r1, [pc, #60]	@ (8003aec <inc_lock+0x174>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	330a      	adds	r3, #10
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	e001      	b.n	8003aca <inc_lock+0x152>
 8003ac6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aca:	4808      	ldr	r0, [pc, #32]	@ (8003aec <inc_lock+0x174>)
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4403      	add	r3, r0
 8003ad8:	330a      	adds	r3, #10
 8003ada:	460a      	mov	r2, r1
 8003adc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3301      	adds	r3, #1
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	2000024c 	.word	0x2000024c

08003af0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d82e      	bhi.n	8003b62 <dec_lock+0x72>
		n = Files[i].ctr;
 8003b04:	491b      	ldr	r1, [pc, #108]	@ (8003b74 <dec_lock+0x84>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	330a      	adds	r3, #10
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1e:	d101      	bne.n	8003b24 <dec_lock+0x34>
 8003b20:	2300      	movs	r3, #0
 8003b22:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <dec_lock+0x40>
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003b30:	4910      	ldr	r1, [pc, #64]	@ (8003b74 <dec_lock+0x84>)
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	330a      	adds	r3, #10
 8003b40:	89fa      	ldrh	r2, [r7, #14]
 8003b42:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <dec_lock+0x6c>
 8003b4a:	490a      	ldr	r1, [pc, #40]	@ (8003b74 <dec_lock+0x84>)
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	737b      	strb	r3, [r7, #13]
 8003b60:	e001      	b.n	8003b66 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003b62:	2302      	movs	r3, #2
 8003b64:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003b66:	7b7b      	ldrb	r3, [r7, #13]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000024c 	.word	0x2000024c

08003b78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e016      	b.n	8003bb4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003b86:	4910      	ldr	r1, [pc, #64]	@ (8003bc8 <clear_lock+0x50>)
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d108      	bne.n	8003bae <clear_lock+0x36>
 8003b9c:	490a      	ldr	r1, [pc, #40]	@ (8003bc8 <clear_lock+0x50>)
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d9e5      	bls.n	8003b86 <clear_lock+0xe>
	}
}
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000024c 	.word	0x2000024c

08003bcc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bde:	791b      	ldrb	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d040      	beq.n	8003c66 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf4:	7858      	ldrb	r0, [r3, #1]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f7ff fd72 	bl	80036e4 <disk_write>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <sync_window+0x40>
			res = FR_DISK_ERR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e02c      	b.n	8003c66 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c12:	2200      	movs	r2, #0
 8003c14:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d21b      	bcs.n	8003c66 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c34:	78db      	ldrb	r3, [r3, #3]
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e012      	b.n	8003c60 <sync_window+0x94>
					wsect += fs->fsize;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c4e:	7858      	ldrb	r0, [r3, #1]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	2301      	movs	r3, #1
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	f7ff fd45 	bl	80036e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d8e9      	bhi.n	8003c3a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d01e      	beq.n	8003cca <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff9d 	bl	8003bcc <sync_window>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d116      	bne.n	8003cca <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca2:	7858      	ldrb	r0, [r3, #1]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	f7ff fcfb 	bl	80036a4 <disk_read>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff75 	bl	8003bcc <sync_window>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80ad 	bne.w	8003e48 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	f040 8098 	bne.w	8003e2c <sync_fs+0x158>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d02:	795b      	ldrb	r3, [r3, #5]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 8091 	bne.w	8003e2c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d12:	895b      	ldrh	r3, [r3, #10]
 8003d14:	461a      	mov	r2, r3
 8003d16:	2100      	movs	r1, #0
 8003d18:	f7ff fd40 	bl	800379c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2255      	movs	r2, #85	@ 0x55
 8003d20:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	22aa      	movs	r2, #170	@ 0xaa
 8003d28:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2252      	movs	r2, #82	@ 0x52
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2252      	movs	r2, #82	@ 0x52
 8003d36:	705a      	strb	r2, [r3, #1]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2261      	movs	r2, #97	@ 0x61
 8003d3c:	709a      	strb	r2, [r3, #2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2241      	movs	r2, #65	@ 0x41
 8003d42:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2272      	movs	r2, #114	@ 0x72
 8003d48:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2272      	movs	r2, #114	@ 0x72
 8003d50:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2241      	movs	r2, #65	@ 0x41
 8003d58:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2261      	movs	r2, #97	@ 0x61
 8003d60:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	0e1b      	lsrs	r3, r3, #24
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e10:	7858      	ldrb	r0, [r3, #1]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f7ff fc61 	bl	80036e4 <disk_write>
			fs->fsi_flag = 0;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e28:	2200      	movs	r2, #0
 8003e2a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fc73 	bl	8003724 <disk_ioctl>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	3b02      	subs	r3, #2
 8003e60:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	3b02      	subs	r3, #2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d301      	bcc.n	8003e76 <clust2sect+0x24>
 8003e72:	2300      	movs	r3, #0
 8003e74:	e00c      	b.n	8003e90 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	fb03 f202 	mul.w	r2, r3, r2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	4413      	add	r3, r2
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr

08003e9a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d906      	bls.n	8003eb8 <get_fat+0x1e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <get_fat+0x24>
		val = 1;	/* Internal error */
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e0e4      	b.n	8004088 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ec2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	f000 8098 	beq.w	8004002 <get_fat+0x168>
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	f300 80ce 	bgt.w	8004074 <get_fat+0x1da>
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d002      	beq.n	8003ee2 <get_fat+0x48>
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d05e      	beq.n	8003f9e <get_fat+0x104>
 8003ee0:	e0c8      	b.n	8004074 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4413      	add	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003efe:	895b      	ldrh	r3, [r3, #10]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f08:	4413      	add	r3, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff feaf 	bl	8003c70 <move_window>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f040 80b0 	bne.w	800407a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f26:	8952      	ldrh	r2, [r2, #10]
 8003f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f2c:	fb01 f202 	mul.w	r2, r1, r2
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	5cd3      	ldrb	r3, [r2, r3]
 8003f36:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f46:	895b      	ldrh	r3, [r3, #10]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f50:	4413      	add	r3, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fe8b 	bl	8003c70 <move_window>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 808e 	bne.w	800407e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f68:	895b      	ldrh	r3, [r3, #10]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f72:	fb01 f202 	mul.w	r2, r1, r2
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <get_fat+0xfa>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	e002      	b.n	8003f9a <get_fat+0x100>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9a:	617b      	str	r3, [r7, #20]
			break;
 8003f9c:	e074      	b.n	8004088 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fac:	895b      	ldrh	r3, [r3, #10]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fba:	4413      	add	r3, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fe56 	bl	8003c70 <move_window>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d15b      	bne.n	8004082 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd4:	8952      	ldrh	r2, [r2, #10]
 8003fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fda:	fb01 f202 	mul.w	r2, r1, r2
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	b21b      	sxth	r3, r3
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	b21a      	sxth	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b21b      	sxth	r3, r3
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	617b      	str	r3, [r7, #20]
			break;
 8004000:	e042      	b.n	8004088 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004010:	895b      	ldrh	r3, [r3, #10]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	b29b      	uxth	r3, r3
 8004016:	4619      	mov	r1, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	fbb3 f3f1 	udiv	r3, r3, r1
 800401e:	4413      	add	r3, r2
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fe24 	bl	8003c70 <move_window>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d12b      	bne.n	8004086 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004038:	8952      	ldrh	r2, [r2, #10]
 800403a:	fbb3 f1f2 	udiv	r1, r3, r2
 800403e:	fb01 f202 	mul.w	r2, r1, r2
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3303      	adds	r3, #3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	061a      	lsls	r2, r3, #24
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3302      	adds	r3, #2
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	3301      	adds	r3, #1
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	4313      	orrs	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004070:	617b      	str	r3, [r7, #20]
			break;
 8004072:	e009      	b.n	8004088 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8004074:	2301      	movs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e006      	b.n	8004088 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800407a:	bf00      	nop
 800407c:	e004      	b.n	8004088 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800407e:	bf00      	nop
 8004080:	e002      	b.n	8004088 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004082:	bf00      	nop
 8004084:	e000      	b.n	8004088 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004086:	bf00      	nop
		}
	}

	return val;
 8004088:	697b      	ldr	r3, [r7, #20]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b088      	sub	sp, #32
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d906      	bls.n	80040b2 <put_fat+0x20>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <put_fat+0x26>
		res = FR_INT_ERR;
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e13a      	b.n	800432e <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	f000 80d0 	beq.w	8004266 <put_fat+0x1d4>
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	f300 8127 	bgt.w	800431a <put_fat+0x288>
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d003      	beq.n	80040d8 <put_fat+0x46>
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f000 808f 	beq.w	80041f4 <put_fat+0x162>
 80040d6:	e120      	b.n	800431a <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4413      	add	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f4:	895b      	ldrh	r3, [r3, #10]
 80040f6:	4619      	mov	r1, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80040fe:	4413      	add	r3, r2
 8004100:	4619      	mov	r1, r3
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fdb4 	bl	8003c70 <move_window>
 8004108:	4603      	mov	r3, r0
 800410a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 8106 	bne.w	8004320 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	617a      	str	r2, [r7, #20]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004120:	8952      	ldrh	r2, [r2, #10]
 8004122:	fbb3 f1f2 	udiv	r1, r3, r2
 8004126:	fb01 f202 	mul.w	r2, r1, r2
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <put_fat+0xc6>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b25b      	sxtb	r3, r3
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	b25a      	sxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	b25b      	sxtb	r3, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	b25b      	sxtb	r3, r3
 8004150:	4313      	orrs	r3, r2
 8004152:	b25b      	sxtb	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e001      	b.n	800415c <put_fat+0xca>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004166:	2201      	movs	r2, #1
 8004168:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004178:	895b      	ldrh	r3, [r3, #10]
 800417a:	4619      	mov	r1, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004182:	4413      	add	r3, r2
 8004184:	4619      	mov	r1, r3
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff fd72 	bl	8003c70 <move_window>
 800418c:	4603      	mov	r3, r0
 800418e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004190:	7ffb      	ldrb	r3, [r7, #31]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 80c6 	bne.w	8004324 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419e:	895b      	ldrh	r3, [r3, #10]
 80041a0:	461a      	mov	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041a8:	fb01 f202 	mul.w	r2, r1, r2
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <put_fat+0x134>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e00e      	b.n	80041e4 <put_fat+0x152>
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	b25b      	sxtb	r3, r3
 80041cc:	f023 030f 	bic.w	r3, r3, #15
 80041d0:	b25a      	sxtb	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	4313      	orrs	r3, r2
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ee:	2201      	movs	r2, #1
 80041f0:	711a      	strb	r2, [r3, #4]
			break;
 80041f2:	e09c      	b.n	800432e <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fa:	6a1a      	ldr	r2, [r3, #32]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004202:	895b      	ldrh	r3, [r3, #10]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	b29b      	uxth	r3, r3
 8004208:	4619      	mov	r1, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004210:	4413      	add	r3, r2
 8004212:	4619      	mov	r1, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fd2b 	bl	8003c70 <move_window>
 800421a:	4603      	mov	r3, r0
 800421c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800421e:	7ffb      	ldrb	r3, [r7, #31]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 8081 	bne.w	8004328 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004230:	8952      	ldrh	r2, [r2, #10]
 8004232:	fbb3 f1f2 	udiv	r1, r3, r2
 8004236:	fb01 f202 	mul.w	r2, r1, r2
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	b29b      	uxth	r3, r3
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	b29a      	uxth	r2, r3
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3301      	adds	r3, #1
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004260:	2201      	movs	r2, #1
 8004262:	711a      	strb	r2, [r3, #4]
			break;
 8004264:	e063      	b.n	800432e <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004274:	895b      	ldrh	r3, [r3, #10]
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	b29b      	uxth	r3, r3
 800427a:	4619      	mov	r1, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004282:	4413      	add	r3, r2
 8004284:	4619      	mov	r1, r3
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fcf2 	bl	8003c70 <move_window>
 800428c:	4603      	mov	r3, r0
 800428e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d14a      	bne.n	800432c <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042a0:	8952      	ldrh	r2, [r2, #10]
 80042a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80042a6:	fb01 f202 	mul.w	r2, r1, r2
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3303      	adds	r3, #3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	061a      	lsls	r2, r3, #24
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	3302      	adds	r3, #2
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	3301      	adds	r3, #1
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4313      	orrs	r3, r2
 80042dc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3301      	adds	r3, #1
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0c1a      	lsrs	r2, r3, #16
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	3302      	adds	r3, #2
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0e1a      	lsrs	r2, r3, #24
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	3303      	adds	r3, #3
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004314:	2201      	movs	r2, #1
 8004316:	711a      	strb	r2, [r3, #4]
			break;
 8004318:	e009      	b.n	800432e <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800431a:	2302      	movs	r3, #2
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e006      	b.n	800432e <put_fat+0x29c>
			if (res != FR_OK) break;
 8004320:	bf00      	nop
 8004322:	e004      	b.n	800432e <put_fat+0x29c>
			if (res != FR_OK) break;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <put_fat+0x29c>
			if (res != FR_OK) break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <put_fat+0x29c>
			if (res != FR_OK) break;
 800432c:	bf00      	nop
		}
	}

	return res;
 800432e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d906      	bls.n	8004356 <remove_chain+0x1e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d302      	bcc.n	800435c <remove_chain+0x24>
		res = FR_INT_ERR;
 8004356:	2302      	movs	r3, #2
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e049      	b.n	80043f0 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004360:	e03b      	b.n	80043da <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fd98 	bl	8003e9a <get_fat>
 800436a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d03b      	beq.n	80043ea <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <remove_chain+0x46>
 8004378:	2302      	movs	r3, #2
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e038      	b.n	80043f0 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004384:	d102      	bne.n	800438c <remove_chain+0x54>
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e031      	b.n	80043f0 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800438c:	2200      	movs	r2, #0
 800438e:	6839      	ldr	r1, [r7, #0]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fe7e 	bl	8004092 <put_fat>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d126      	bne.n	80043ee <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ac:	d013      	beq.n	80043d6 <remove_chain+0x9e>
				fs->free_clust++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043be:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c6:	795b      	ldrb	r3, [r3, #5]
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d4:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d3bc      	bcc.n	8004362 <remove_chain+0x2a>
 80043e8:	e002      	b.n	80043f0 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80043ee:	bf00      	nop
		}
	}

	return res;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d111      	bne.n	800442e <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <create_chain+0x2e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d31d      	bcc.n	8004464 <create_chain+0x6a>
 8004428:	2301      	movs	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	e01a      	b.n	8004464 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fd32 	bl	8003e9a <get_fat>
 8004436:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d801      	bhi.n	8004442 <create_chain+0x48>
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004448:	d101      	bne.n	800444e <create_chain+0x54>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	e079      	b.n	8004542 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d201      	bcs.n	8004460 <create_chain+0x66>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	e070      	b.n	8004542 <create_chain+0x148>
		scl = clst;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3301      	adds	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d307      	bcc.n	800448c <create_chain+0x92>
			ncl = 2;
 800447c:	2302      	movs	r3, #2
 800447e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d901      	bls.n	800448c <create_chain+0x92>
 8004488:	2300      	movs	r3, #0
 800448a:	e05a      	b.n	8004542 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800448c:	6979      	ldr	r1, [r7, #20]
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fd03 	bl	8003e9a <get_fat>
 8004494:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044a2:	d002      	beq.n	80044aa <create_chain+0xb0>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <create_chain+0xb4>
			return cs;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	e049      	b.n	8004542 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d1d8      	bne.n	8004468 <create_chain+0x6e>
 80044b6:	2300      	movs	r3, #0
 80044b8:	e043      	b.n	8004542 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80044ba:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80044bc:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fde5 	bl	8004092 <put_fat>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <create_chain+0xec>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fdd8 	bl	8004092 <put_fat>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d121      	bne.n	8004530 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044f2:	461a      	mov	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004504:	d01c      	beq.n	8004540 <create_chain+0x146>
			fs->free_clust--;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	3b01      	subs	r3, #1
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004516:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800451e:	795b      	ldrb	r3, [r3, #5]
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	b2da      	uxtb	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452c:	715a      	strb	r2, [r3, #5]
 800452e:	e007      	b.n	8004540 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d102      	bne.n	800453c <create_chain+0x142>
 8004536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800453a:	e000      	b.n	800453e <create_chain+0x144>
 800453c:	2301      	movs	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800454a:	b480      	push	{r7}
 800454c:	b087      	sub	sp, #28
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	3304      	adds	r3, #4
 800455e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800456c:	895b      	ldrh	r3, [r3, #10]
 800456e:	461a      	mov	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	fbb3 f3f2 	udiv	r3, r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004582:	7892      	ldrb	r2, [r2, #2]
 8004584:	fbb3 f3f2 	udiv	r3, r3, r2
 8004588:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	613a      	str	r2, [r7, #16]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <clmt_clust+0x54>
 800459a:	2300      	movs	r3, #0
 800459c:	e010      	b.n	80045c0 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d307      	bcc.n	80045b6 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3304      	adds	r3, #4
 80045b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80045b4:	e7e9      	b.n	800458a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80045b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045de:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d009      	beq.n	8004604 <dir_sdi+0x3a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d301      	bcc.n	8004608 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004604:	2302      	movs	r3, #2
 8004606:	e0aa      	b.n	800475e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d110      	bne.n	8004630 <dir_sdi+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d107      	bne.n	8004630 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d115      	bne.n	8004662 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004642:	891b      	ldrh	r3, [r3, #8]
 8004644:	461a      	mov	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4293      	cmp	r3, r2
 800464a:	d301      	bcc.n	8004650 <dir_sdi+0x86>
			return FR_INT_ERR;
 800464c:	2302      	movs	r3, #2
 800464e:	e086      	b.n	800475e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	e043      	b.n	80046ea <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466e:	895b      	ldrh	r3, [r3, #10]
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004682:	789b      	ldrb	r3, [r3, #2]
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800468a:	e021      	b.n	80046d0 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fbff 	bl	8003e9a <get_fat>
 800469c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a4:	d101      	bne.n	80046aa <dir_sdi+0xe0>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e059      	b.n	800475e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d909      	bls.n	80046c4 <dir_sdi+0xfa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d301      	bcc.n	80046c8 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80046c4:	2302      	movs	r3, #2
 80046c6:	e04a      	b.n	800475e <dir_sdi+0x194>
			idx -= ic;
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d2d9      	bcs.n	800468c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6979      	ldr	r1, [r7, #20]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fbb5 	bl	8003e52 <clust2sect>
 80046e8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f0:	461a      	mov	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <dir_sdi+0x136>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e02e      	b.n	800475e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470c:	895b      	ldrh	r3, [r3, #10]
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	b29b      	uxth	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	fbb3 f2f2 	udiv	r2, r3, r2
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4413      	add	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004724:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800473c:	895b      	ldrh	r3, [r3, #10]
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	b29b      	uxth	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	fbb3 f1f2 	udiv	r1, r3, r2
 800474a:	fb01 f202 	mul.w	r2, r1, r2
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	015b      	lsls	r3, r3, #5
 8004752:	4403      	add	r3, r0
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800475a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004766:	b590      	push	{r4, r7, lr}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004776:	88db      	ldrh	r3, [r3, #6]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <dir_next+0x2a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <dir_next+0x2e>
		return FR_NO_FILE;
 8004790:	2304      	movs	r3, #4
 8004792:	e12e      	b.n	80049f2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a0:	895b      	ldrh	r3, [r3, #10]
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80047ae:	fb01 f202 	mul.w	r2, r1, r2
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 80fa 	bne.w	80049ae <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	3301      	adds	r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047ca:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e4:	891b      	ldrh	r3, [r3, #8]
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f0c0 80df 	bcc.w	80049ae <dir_next+0x248>
				return FR_NO_FILE;
 80047f0:	2304      	movs	r3, #4
 80047f2:	e0fe      	b.n	80049f2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004800:	895b      	ldrh	r3, [r3, #10]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	b29b      	uxth	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	fbb3 f3f2 	udiv	r3, r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800481a:	7892      	ldrb	r2, [r2, #2]
 800481c:	3a01      	subs	r2, #1
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 80c4 	bne.w	80049ae <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7ff fb2e 	bl	8003e9a <get_fat>
 800483e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d801      	bhi.n	800484a <dir_next+0xe4>
 8004846:	2302      	movs	r3, #2
 8004848:	e0d3      	b.n	80049f2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004850:	d101      	bne.n	8004856 <dir_next+0xf0>
 8004852:	2301      	movs	r3, #1
 8004854:	e0cd      	b.n	80049f2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	429a      	cmp	r2, r3
 8004868:	f0c0 808e 	bcc.w	8004988 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <dir_next+0x110>
 8004872:	2304      	movs	r3, #4
 8004874:	e0bd      	b.n	80049f2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4619      	mov	r1, r3
 8004888:	4610      	mov	r0, r2
 800488a:	f7ff fdb6 	bl	80043fa <create_chain>
 800488e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <dir_next+0x134>
 8004896:	2307      	movs	r3, #7
 8004898:	e0ab      	b.n	80049f2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <dir_next+0x13e>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0a6      	b.n	80049f2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048aa:	d101      	bne.n	80048b0 <dir_next+0x14a>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0a0      	b.n	80049f2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff f987 	bl	8003bcc <sync_window>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <dir_next+0x162>
 80048c4:	2301      	movs	r3, #1
 80048c6:	e094      	b.n	80049f2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048de:	895b      	ldrh	r3, [r3, #10]
 80048e0:	461a      	mov	r2, r3
 80048e2:	2100      	movs	r1, #0
 80048e4:	f7fe ff5a 	bl	800379c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048f6:	681c      	ldr	r4, [r3, #0]
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7ff faa9 	bl	8003e52 <clust2sect>
 8004900:	4603      	mov	r3, r0
 8004902:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8004906:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	e021      	b.n	8004952 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800491a:	2201      	movs	r2, #1
 800491c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f950 	bl	8003bcc <sync_window>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <dir_next+0x1d0>
 8004932:	2301      	movs	r3, #1
 8004934:	e05d      	b.n	80049f2 <dir_next+0x28c>
						dp->fs->winsect++;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8004942:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004944:	3201      	adds	r2, #1
 8004946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	3301      	adds	r3, #1
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495e:	789b      	ldrb	r3, [r3, #2]
 8004960:	461a      	mov	r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4293      	cmp	r3, r2
 8004966:	d3d2      	bcc.n	800490e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1acb      	subs	r3, r1, r3
 8004982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498e:	461a      	mov	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fa57 	bl	8003e52 <clust2sect>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ac:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b8:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d0:	895b      	ldrh	r3, [r3, #10]
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	fbb3 f1f2 	udiv	r1, r3, r2
 80049de:	fb01 f202 	mul.w	r2, r1, r2
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	015b      	lsls	r3, r3, #5
 80049e6:	4403      	add	r3, r0
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049ee:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004a04:	2100      	movs	r1, #0
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fddf 	bl	80045ca <dir_sdi>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d135      	bne.n	8004a82 <dir_alloc+0x88>
		n = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	f7ff f91f 	bl	8003c70 <move_window>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d121      	bne.n	8004a80 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2be5      	cmp	r3, #229	@ 0xe5
 8004a48:	d006      	beq.n	8004a58 <dir_alloc+0x5e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d102      	bne.n	8004a6c <dir_alloc+0x72>
 8004a66:	e00c      	b.n	8004a82 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe79 	bl	8004766 <dir_next>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0cd      	beq.n	8004a1a <dir_alloc+0x20>
 8004a7e:	e000      	b.n	8004a82 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8004a80:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d101      	bne.n	8004a8c <dir_alloc+0x92>
 8004a88:	2307      	movs	r3, #7
 8004a8a:	73fb      	strb	r3, [r7, #15]
	return res;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	331b      	adds	r3, #27
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	b21a      	sxth	r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	331a      	adds	r3, #26
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	b21b      	sxth	r3, r3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d110      	bne.n	8004aea <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	3315      	adds	r3, #21
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b21b      	sxth	r3, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

	return cl;
 8004aea:	68fb      	ldr	r3, [r7, #12]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	331a      	adds	r3, #26
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	331b      	adds	r3, #27
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	0c1a      	lsrs	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3314      	adds	r3, #20
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3315      	adds	r3, #21
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
	...

08004b44 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <cmp_lfn+0xd8>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b21b      	sxth	r3, r3
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	4926      	ldr	r1, [pc, #152]	@ (8004c1c <cmp_lfn+0xd8>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	440b      	add	r3, r1
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	440b      	add	r3, r1
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b21b      	sxth	r3, r3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	b21b      	sxth	r3, r3
 8004b98:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004b9a:	89fb      	ldrh	r3, [r7, #14]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d019      	beq.n	8004bd4 <cmp_lfn+0x90>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004ba0:	89bb      	ldrh	r3, [r7, #12]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 ff34 	bl	8007a10 <ff_wtoupper>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2bfe      	cmp	r3, #254	@ 0xfe
 8004bb0:	d80e      	bhi.n	8004bd0 <cmp_lfn+0x8c>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	617a      	str	r2, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f002 ff25 	bl	8007a10 <ff_wtoupper>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d008      	beq.n	8004be2 <cmp_lfn+0x9e>
				return 0;				/* Not matched */
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e01f      	b.n	8004c14 <cmp_lfn+0xd0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004bd4:	89bb      	ldrh	r3, [r7, #12]
 8004bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d001      	beq.n	8004be2 <cmp_lfn+0x9e>
 8004bde:	2300      	movs	r3, #0
 8004be0:	e018      	b.n	8004c14 <cmp_lfn+0xd0>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3301      	adds	r3, #1
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d9be      	bls.n	8004b6c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <cmp_lfn+0xce>
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <cmp_lfn+0xce>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <cmp_lfn+0xce>
		return 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <cmp_lfn+0xd0>

	return 1;						/* The part of LFN matched */
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	08008868 	.word	0x08008868

08004c20 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	460b      	mov	r3, r1
 8004c30:	71fb      	strb	r3, [r7, #7]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	330d      	adds	r3, #13
 8004c3a:	79ba      	ldrb	r2, [r7, #6]
 8004c3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	330b      	adds	r3, #11
 8004c42:	220f      	movs	r2, #15
 8004c44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	331a      	adds	r3, #26
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	331b      	adds	r3, #27
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	82fb      	strh	r3, [r7, #22]
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004c76:	8afb      	ldrh	r3, [r7, #22]
 8004c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <fit_lfn+0x70>
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	61fa      	str	r2, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004c90:	4a1c      	ldr	r2, [pc, #112]	@ (8004d04 <fit_lfn+0xe4>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4413      	add	r3, r2
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	8afa      	ldrh	r2, [r7, #22]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b299      	uxth	r1, r3
 8004caa:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <fit_lfn+0xe4>)
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	b2ca      	uxtb	r2, r1
 8004cba:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004cbc:	8afb      	ldrh	r3, [r7, #22]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <fit_lfn+0xa8>
 8004cc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004cc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b0c      	cmp	r3, #12
 8004cd2:	d9d0      	bls.n	8004c76 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004cd4:	8afb      	ldrh	r3, [r7, #22]
 8004cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d006      	beq.n	8004cec <fit_lfn+0xcc>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <fit_lfn+0xd4>
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	79fa      	ldrb	r2, [r7, #7]
 8004cf8:	701a      	strb	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	08008868 	.word	0x08008868

08004d08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004d16:	220b      	movs	r2, #11
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7fe fd20 	bl	8003760 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d92b      	bls.n	8004d7e <gen_numname+0x76>
		sr = seq;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004d2a:	e022      	b.n	8004d72 <gen_numname+0x6a>
			wc = *lfn++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d3a:	e017      	b.n	8004d6c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005a      	lsls	r2, r3, #1
 8004d40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004d4a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <gen_numname+0x5e>
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004d60:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004d64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	3301      	adds	r3, #1
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	d9e4      	bls.n	8004d3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1d8      	bne.n	8004d2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004d7e:	2307      	movs	r3, #7
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3330      	adds	r3, #48	@ 0x30
 8004d8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004d92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d96:	2b39      	cmp	r3, #57	@ 0x39
 8004d98:	d904      	bls.n	8004da4 <gen_numname+0x9c>
 8004d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d9e:	3307      	adds	r3, #7
 8004da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004daa:	3330      	adds	r3, #48	@ 0x30
 8004dac:	443b      	add	r3, r7
 8004dae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004db2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1df      	bne.n	8004d82 <gen_numname+0x7a>
	ns[i] = '~';
 8004dc2:	f107 0214 	add.w	r2, r7, #20
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	4413      	add	r3, r2
 8004dca:	227e      	movs	r2, #126	@ 0x7e
 8004dcc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd2:	e002      	b.n	8004dda <gen_numname+0xd2>
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d205      	bcs.n	8004dee <gen_numname+0xe6>
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	4413      	add	r3, r2
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d1f2      	bne.n	8004dd4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d807      	bhi.n	8004e04 <gen_numname+0xfc>
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004dfa:	3330      	adds	r3, #48	@ 0x30
 8004dfc:	443b      	add	r3, r7
 8004dfe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004e02:	e000      	b.n	8004e06 <gen_numname+0xfe>
 8004e04:	2120      	movs	r1, #32
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	460a      	mov	r2, r1
 8004e12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	2b07      	cmp	r3, #7
 8004e18:	d9e9      	bls.n	8004dee <gen_numname+0xe6>
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	3730      	adds	r7, #48	@ 0x30
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004e30:	230b      	movs	r3, #11
 8004e32:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	0852      	lsrs	r2, r2, #1
 8004e3a:	01db      	lsls	r3, r3, #7
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	6079      	str	r1, [r7, #4]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	4413      	add	r3, r2
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	60bb      	str	r3, [r7, #8]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ed      	bne.n	8004e34 <sum_sfn+0x10>
	return sum;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fbab 	bl	80045ca <dir_sdi>
 8004e74:	4603      	mov	r3, r0
 8004e76:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <dir_find+0x1e>
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	e0b8      	b.n	8004ff4 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004e82:	23ff      	movs	r3, #255	@ 0xff
 8004e84:	753b      	strb	r3, [r7, #20]
 8004e86:	7d3b      	ldrb	r3, [r7, #20]
 8004e88:	757b      	strb	r3, [r7, #21]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e94:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f7fe fee1 	bl	8003c70 <move_window>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8097 	bne.w	8004fe8 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004eca:	7dbb      	ldrb	r3, [r7, #22]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <dir_find+0x72>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	75fb      	strb	r3, [r7, #23]
 8004ed4:	e08d      	b.n	8004ff2 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	330b      	adds	r3, #11
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee0:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004ee2:	7dbb      	ldrb	r3, [r7, #22]
 8004ee4:	2be5      	cmp	r3, #229	@ 0xe5
 8004ee6:	d007      	beq.n	8004ef8 <dir_find+0x94>
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <dir_find+0xa6>
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b0f      	cmp	r3, #15
 8004ef6:	d008      	beq.n	8004f0a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004ef8:	23ff      	movs	r3, #255	@ 0xff
 8004efa:	757b      	strb	r3, [r7, #21]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f06:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004f08:	e063      	b.n	8004fd2 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d137      	bne.n	8004f80 <dir_find+0x11c>
				if (dp->lfn) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05a      	beq.n	8004fd2 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004f1c:	7dbb      	ldrb	r3, [r7, #22]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	7b5b      	ldrb	r3, [r3, #13]
 8004f2a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004f2c:	7dbb      	ldrb	r3, [r7, #22]
 8004f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f32:	75bb      	strb	r3, [r7, #22]
 8004f34:	7dbb      	ldrb	r3, [r7, #22]
 8004f36:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f3e:	88da      	ldrh	r2, [r3, #6]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f46:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004f48:	7dba      	ldrb	r2, [r7, #22]
 8004f4a:	7d7b      	ldrb	r3, [r7, #21]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d114      	bne.n	8004f7a <dir_find+0x116>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	330d      	adds	r3, #13
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	7d3a      	ldrb	r2, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d10e      	bne.n	8004f7a <dir_find+0x116>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	6939      	ldr	r1, [r7, #16]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fdec 	bl	8004b44 <cmp_lfn>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <dir_find+0x116>
 8004f72:	7d7b      	ldrb	r3, [r7, #21]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e000      	b.n	8004f7c <dir_find+0x118>
 8004f7a:	23ff      	movs	r3, #255	@ 0xff
 8004f7c:	757b      	strb	r3, [r7, #21]
 8004f7e:	e028      	b.n	8004fd2 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004f80:	7d7b      	ldrb	r3, [r7, #21]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <dir_find+0x132>
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f7ff ff4c 	bl	8004e24 <sum_sfn>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	7d3b      	ldrb	r3, [r7, #20]
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02a      	beq.n	8004fec <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	330b      	adds	r3, #11
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <dir_find+0x15e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	220b      	movs	r2, #11
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6938      	ldr	r0, [r7, #16]
 8004fb8:	f7fe fc0a 	bl	80037d0 <mem_cmp>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d016      	beq.n	8004ff0 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004fc2:	23ff      	movs	r3, #255	@ 0xff
 8004fc4:	757b      	strb	r3, [r7, #21]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fd0:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fbc6 	bl	8004766 <dir_next>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f43f af58 	beq.w	8004e96 <dir_find+0x32>
 8004fe6:	e004      	b.n	8004ff2 <dir_find+0x18e>
		if (res != FR_OK) break;
 8004fe8:	bf00      	nop
 8004fea:	e002      	b.n	8004ff2 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004ff0:	bf00      	nop

	return res;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	@ 0x30
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	220c      	movs	r2, #12
 800501e:	6a39      	ldr	r1, [r7, #32]
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fb9d 	bl	8003760 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03b      	beq.n	80050a8 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	330b      	adds	r3, #11
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8005044:	2301      	movs	r3, #1
 8005046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005048:	e013      	b.n	8005072 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800504a:	f107 010c 	add.w	r1, r7, #12
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	6a38      	ldr	r0, [r7, #32]
 8005054:	f7ff fe58 	bl	8004d08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff03 	bl	8004e64 <dir_find>
 800505e:	4603      	mov	r3, r0
 8005060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005064:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	3301      	adds	r3, #1
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	2b63      	cmp	r3, #99	@ 0x63
 8005076:	d9e8      	bls.n	800504a <dir_register+0x4e>
 8005078:	e000      	b.n	800507c <dir_register+0x80>
			if (res != FR_OK) break;
 800507a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d101      	bne.n	8005086 <dir_register+0x8a>
 8005082:	2307      	movs	r3, #7
 8005084:	e0d8      	b.n	8005238 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800508a:	2b04      	cmp	r3, #4
 800508c:	d002      	beq.n	8005094 <dir_register+0x98>
 800508e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005092:	e0d1      	b.n	8005238 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	330b      	adds	r3, #11
 8005098:	7dfa      	ldrb	r2, [r7, #23]
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a2:	461a      	mov	r2, r3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b6:	e002      	b.n	80050be <dir_register+0xc2>
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	3301      	adds	r3, #1
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f5      	bne.n	80050b8 <dir_register+0xbc>
		nent = (n + 25) / 13;
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	3319      	adds	r3, #25
 80050d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005240 <dir_register+0x244>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050da:	e001      	b.n	80050e0 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80050dc:	2301      	movs	r3, #1
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80050e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fc89 	bl	80049fa <dir_alloc>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80050ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d15b      	bne.n	80051ae <dir_register+0x1b2>
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	3b01      	subs	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d055      	beq.n	80051ae <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fa59 	bl	80045ca <dir_sdi>
 8005118:	4603      	mov	r3, r0
 800511a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800511e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005122:	2b00      	cmp	r3, #0
 8005124:	d143      	bne.n	80051ae <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fe78 	bl	8004e24 <sum_sfn>
 8005134:	4603      	mov	r3, r0
 8005136:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7fe fd90 	bl	8003c70 <move_window>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800515a:	2b00      	cmp	r3, #0
 800515c:	d126      	bne.n	80051ac <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	6a18      	ldr	r0, [r3, #32]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	b2da      	uxtb	r2, r3
 8005172:	7efb      	ldrb	r3, [r7, #27]
 8005174:	f7ff fd54 	bl	8004c20 <fit_lfn>
				dp->fs->wflag = 1;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005184:	2201      	movs	r2, #1
 8005186:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005188:	2100      	movs	r1, #0
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff faeb 	bl	8004766 <dir_next>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <dir_register+0x1b2>
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	3b01      	subs	r3, #1
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1c6      	bne.n	8005138 <dir_register+0x13c>
 80051aa:	e000      	b.n	80051ae <dir_register+0x1b2>
				if (res != FR_OK) break;
 80051ac:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80051ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d13e      	bne.n	8005234 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7fe fd51 	bl	8003c70 <move_window>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80051d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d12b      	bne.n	8005234 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	2220      	movs	r2, #32
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fad7 	bl	800379c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f4:	6958      	ldr	r0, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	220b      	movs	r2, #11
 8005200:	4619      	mov	r1, r3
 8005202:	f7fe faad 	bl	8003760 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	330b      	adds	r3, #11
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	330c      	adds	r3, #12
 800521c:	f002 0218 	and.w	r2, r2, #24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005230:	2201      	movs	r2, #1
 8005232:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8005234:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005238:	4618      	mov	r0, r3
 800523a:	3730      	adds	r7, #48	@ 0x30
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	4ec4ec4f 	.word	0x4ec4ec4f

08005244 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	@ 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e002      	b.n	800525c <create_name+0x18>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b2f      	cmp	r3, #47	@ 0x2f
 8005262:	d0f8      	beq.n	8005256 <create_name+0x12>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b5c      	cmp	r3, #92	@ 0x5c
 800526a:	d0f4      	beq.n	8005256 <create_name+0x12>
	lfn = dp->lfn;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	61ba      	str	r2, [r7, #24]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800528c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800528e:	2b1f      	cmp	r3, #31
 8005290:	d92f      	bls.n	80052f2 <create_name+0xae>
 8005292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005294:	2b2f      	cmp	r3, #47	@ 0x2f
 8005296:	d02c      	beq.n	80052f2 <create_name+0xae>
 8005298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800529a:	2b5c      	cmp	r3, #92	@ 0x5c
 800529c:	d029      	beq.n	80052f2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80052a2:	d901      	bls.n	80052a8 <create_name+0x64>
			return FR_INVALID_NAME;
 80052a4:	2306      	movs	r3, #6
 80052a6:	e186      	b.n	80055b6 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80052a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80052ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052b0:	2101      	movs	r1, #1
 80052b2:	4618      	mov	r0, r3
 80052b4:	f002 fb72 	bl	800799c <ff_convert>
 80052b8:	4603      	mov	r3, r0
 80052ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80052bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <create_name+0x82>
 80052c2:	2306      	movs	r3, #6
 80052c4:	e177      	b.n	80055b6 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80052c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ca:	d809      	bhi.n	80052e0 <create_name+0x9c>
 80052cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052ce:	4619      	mov	r1, r3
 80052d0:	488e      	ldr	r0, [pc, #568]	@ (800550c <create_name+0x2c8>)
 80052d2:	f7fe faa3 	bl	800381c <chk_chr>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <create_name+0x9c>
			return FR_INVALID_NAME;
 80052dc:	2306      	movs	r3, #6
 80052de:	e16a      	b.n	80055b6 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	617a      	str	r2, [r7, #20]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80052f0:	e7c5      	b.n	800527e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	441a      	add	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80052fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80052fe:	2b1f      	cmp	r3, #31
 8005300:	d801      	bhi.n	8005306 <create_name+0xc2>
 8005302:	2304      	movs	r3, #4
 8005304:	e000      	b.n	8005308 <create_name+0xc4>
 8005306:	2300      	movs	r3, #0
 8005308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800530c:	e011      	b.n	8005332 <create_name+0xee>
		w = lfn[di - 1];
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005314:	3b01      	subs	r3, #1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005322:	2b20      	cmp	r3, #32
 8005324:	d002      	beq.n	800532c <create_name+0xe8>
 8005326:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005328:	2b2e      	cmp	r3, #46	@ 0x2e
 800532a:	d106      	bne.n	800533a <create_name+0xf6>
		di--;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	3b01      	subs	r3, #1
 8005330:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ea      	bne.n	800530e <create_name+0xca>
 8005338:	e000      	b.n	800533c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800533a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <create_name+0x102>
 8005342:	2306      	movs	r3, #6
 8005344:	e137      	b.n	80055b6 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	2200      	movs	r2, #0
 8005350:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	220b      	movs	r2, #11
 800535c:	2120      	movs	r1, #32
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fa1c 	bl	800379c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e002      	b.n	8005370 <create_name+0x12c>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3301      	adds	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	2b20      	cmp	r3, #32
 800537c:	d0f5      	beq.n	800536a <create_name+0x126>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	2b2e      	cmp	r3, #46	@ 0x2e
 800538a:	d0ee      	beq.n	800536a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <create_name+0x162>
 8005392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005396:	f043 0303 	orr.w	r3, r3, #3
 800539a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800539e:	e002      	b.n	80053a6 <create_name+0x162>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <create_name+0x17c>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80053b2:	3b01      	subs	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80053be:	d1ef      	bne.n	80053a0 <create_name+0x15c>

	b = i = 0; ni = 8;
 80053c0:	2300      	movs	r3, #0
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80053ca:	2308      	movs	r3, #8
 80053cc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	61ba      	str	r2, [r7, #24]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80053de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8091 	beq.w	8005508 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80053e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d006      	beq.n	80053fa <create_name+0x1b6>
 80053ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f0:	d10a      	bne.n	8005408 <create_name+0x1c4>
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d006      	beq.n	8005408 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80053fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053fe:	f043 0303 	orr.w	r3, r3, #3
 8005402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005406:	e07e      	b.n	8005506 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	429a      	cmp	r2, r3
 800540e:	d203      	bcs.n	8005418 <create_name+0x1d4>
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	429a      	cmp	r2, r3
 8005416:	d123      	bne.n	8005460 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b0b      	cmp	r3, #11
 800541c:	d106      	bne.n	800542c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800541e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005422:	f043 0303 	orr.w	r3, r3, #3
 8005426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800542a:	e076      	b.n	800551a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	429a      	cmp	r2, r3
 8005432:	d005      	beq.n	8005440 <create_name+0x1fc>
 8005434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005438:	f043 0303 	orr.w	r3, r3, #3
 800543c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	429a      	cmp	r2, r3
 8005446:	d867      	bhi.n	8005518 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	2308      	movs	r3, #8
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	230b      	movs	r3, #11
 8005452:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800545e:	e052      	b.n	8005506 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005460:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005462:	2b7f      	cmp	r3, #127	@ 0x7f
 8005464:	d914      	bls.n	8005490 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005466:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fa96 	bl	800799c <ff_convert>
 8005470:	4603      	mov	r3, r0
 8005472:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <create_name+0x240>
 800547a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800547c:	3b80      	subs	r3, #128	@ 0x80
 800547e:	4a24      	ldr	r2, [pc, #144]	@ (8005510 <create_name+0x2cc>)
 8005480:	5cd3      	ldrb	r3, [r2, r3]
 8005482:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005490:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <create_name+0x262>
 8005496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005498:	4619      	mov	r1, r3
 800549a:	481e      	ldr	r0, [pc, #120]	@ (8005514 <create_name+0x2d0>)
 800549c:	f7fe f9be 	bl	800381c <chk_chr>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80054a6:	235f      	movs	r3, #95	@ 0x5f
 80054a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80054aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054ae:	f043 0303 	orr.w	r3, r3, #3
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80054b6:	e01b      	b.n	80054f0 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80054b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054ba:	2b40      	cmp	r3, #64	@ 0x40
 80054bc:	d909      	bls.n	80054d2 <create_name+0x28e>
 80054be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054c0:	2b5a      	cmp	r3, #90	@ 0x5a
 80054c2:	d806      	bhi.n	80054d2 <create_name+0x28e>
					b |= 2;
 80054c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80054d0:	e00e      	b.n	80054f0 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80054d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054d4:	2b60      	cmp	r3, #96	@ 0x60
 80054d6:	d90b      	bls.n	80054f0 <create_name+0x2ac>
 80054d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054da:	2b7a      	cmp	r3, #122	@ 0x7a
 80054dc:	d808      	bhi.n	80054f0 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80054de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80054ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054ec:	3b20      	subs	r3, #32
 80054ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	6239      	str	r1, [r7, #32]
 80054fe:	4413      	add	r3, r2
 8005500:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005506:	e762      	b.n	80053ce <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005508:	bf00      	nop
 800550a:	e006      	b.n	800551a <create_name+0x2d6>
 800550c:	08008774 	.word	0x08008774
 8005510:	080087e8 	.word	0x080087e8
 8005514:	08008780 	.word	0x08008780
			if (si > di) break;			/* No extension */
 8005518:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2be5      	cmp	r3, #229	@ 0xe5
 8005526:	d105      	bne.n	8005534 <create_name+0x2f0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2205      	movs	r2, #5
 8005532:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b08      	cmp	r3, #8
 8005538:	d104      	bne.n	8005544 <create_name+0x300>
 800553a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005544:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b0c      	cmp	r3, #12
 800554e:	d005      	beq.n	800555c <create_name+0x318>
 8005550:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b03      	cmp	r3, #3
 800555a:	d105      	bne.n	8005568 <create_name+0x324>
		cf |= NS_LFN;
 800555c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d117      	bne.n	80055a4 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d105      	bne.n	800558c <create_name+0x348>
 8005580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005584:	f043 0310 	orr.w	r3, r3, #16
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800558c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005590:	f003 030c 	and.w	r3, r3, #12
 8005594:	2b04      	cmp	r3, #4
 8005596:	d105      	bne.n	80055a4 <create_name+0x360>
 8005598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	330b      	adds	r3, #11
 80055ae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80055b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80055b4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	@ 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop

080055c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80055d0:	d003      	beq.n	80055da <follow_path+0x1a>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b5c      	cmp	r3, #92	@ 0x5c
 80055d8:	d102      	bne.n	80055e0 <follow_path+0x20>
		path++;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055e6:	461a      	mov	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b1f      	cmp	r3, #31
 80055f2:	d80c      	bhi.n	800560e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80055f4:	2100      	movs	r1, #0
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fe ffe7 	bl	80045ca <dir_sdi>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005606:	461a      	mov	r2, r3
 8005608:	2300      	movs	r3, #0
 800560a:	6153      	str	r3, [r2, #20]
 800560c:	e049      	b.n	80056a2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800560e:	463b      	mov	r3, r7
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fe16 	bl	8005244 <create_name>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13a      	bne.n	8005698 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fc1e 	bl	8004e64 <dir_find>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	7adb      	ldrb	r3, [r3, #11]
 8005636:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d12b      	bne.n	800569c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d126      	bne.n	800569c <follow_path+0xdc>
 800564e:	2305      	movs	r3, #5
 8005650:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005652:	e023      	b.n	800569c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005654:	7bbb      	ldrb	r3, [r7, #14]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d120      	bne.n	80056a0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	330b      	adds	r3, #11
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8005676:	2305      	movs	r3, #5
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e012      	b.n	80056a2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fa05 	bl	8004a96 <ld_clust>
 800568c:	4602      	mov	r2, r0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005694:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005696:	e7ba      	b.n	800560e <follow_path+0x4e>
			if (res != FR_OK) break;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <follow_path+0xe2>
				break;
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80056a0:	bf00      	nop
		}
	}

	return res;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056b8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d031      	beq.n	8005726 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e002      	b.n	80056d0 <get_ldnumber+0x24>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	3301      	adds	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b1f      	cmp	r3, #31
 80056d6:	d903      	bls.n	80056e0 <get_ldnumber+0x34>
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80056de:	d1f4      	bne.n	80056ca <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80056e6:	d11c      	bne.n	8005722 <get_ldnumber+0x76>
			tp = *path;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	60fa      	str	r2, [r7, #12]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	3b30      	subs	r3, #48	@ 0x30
 80056f8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d80e      	bhi.n	800571e <get_ldnumber+0x72>
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d10a      	bne.n	800571e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <get_ldnumber+0x72>
					vol = (int)i;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	3301      	adds	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	e002      	b.n	8005728 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005726:	693b      	ldr	r3, [r7, #16]
}
 8005728:	4618      	mov	r0, r3
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr
	...

08005734 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	2200      	movs	r2, #0
 8005746:	711a      	strb	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800574e:	461a      	mov	r2, r3
 8005750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005754:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fe fa89 	bl	8003c70 <move_window>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <check_fs+0x34>
		return 3;
 8005764:	2303      	movs	r3, #3
 8005766:	e04b      	b.n	8005800 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800576e:	3301      	adds	r3, #1
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b21b      	sxth	r3, r3
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	b21a      	sxth	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800577e:	b21b      	sxth	r3, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	b21b      	sxth	r3, r3
 8005784:	4a20      	ldr	r2, [pc, #128]	@ (8005808 <check_fs+0xd4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d001      	beq.n	800578e <check_fs+0x5a>
		return 2;
 800578a:	2302      	movs	r3, #2
 800578c:	e038      	b.n	8005800 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3336      	adds	r3, #54	@ 0x36
 8005792:	3303      	adds	r3, #3
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	061a      	lsls	r2, r3, #24
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3336      	adds	r3, #54	@ 0x36
 800579c:	3302      	adds	r3, #2
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3336      	adds	r3, #54	@ 0x36
 80057a8:	3301      	adds	r3, #1
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	4313      	orrs	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057bc:	4a13      	ldr	r2, [pc, #76]	@ (800580c <check_fs+0xd8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <check_fs+0x92>
		return 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e01c      	b.n	8005800 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3352      	adds	r3, #82	@ 0x52
 80057ca:	3303      	adds	r3, #3
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	061a      	lsls	r2, r3, #24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3352      	adds	r3, #82	@ 0x52
 80057d4:	3302      	adds	r3, #2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3352      	adds	r3, #82	@ 0x52
 80057e0:	3301      	adds	r3, #1
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	4313      	orrs	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057f4:	4a05      	ldr	r2, [pc, #20]	@ (800580c <check_fs+0xd8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <check_fs+0xca>
		return 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <check_fs+0xcc>

	return 1;
 80057fe:	2301      	movs	r3, #1
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	ffffaa55 	.word	0xffffaa55
 800580c:	00544146 	.word	0x00544146

08005810 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b096      	sub	sp, #88	@ 0x58
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005824:	68b8      	ldr	r0, [r7, #8]
 8005826:	f7ff ff41 	bl	80056ac <get_ldnumber>
 800582a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	da01      	bge.n	8005836 <find_volume+0x26>
 8005832:	230b      	movs	r3, #11
 8005834:	e318      	b.n	8005e68 <find_volume+0x658>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005836:	4a99      	ldr	r2, [pc, #612]	@ (8005a9c <find_volume+0x28c>)
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <find_volume+0x3a>
 8005846:	230c      	movs	r3, #12
 8005848:	e30e      	b.n	8005e68 <find_volume+0x658>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800584e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01c      	beq.n	8005896 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fedd 	bl	8003624 <disk_status>
 800586a:	4603      	mov	r3, r0
 800586c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005870:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <find_volume+0x82>
 8005882:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800588e:	230a      	movs	r3, #10
 8005890:	e2ea      	b.n	8005e68 <find_volume+0x658>
			return FR_OK;				/* The file system object is valid */
 8005892:	2300      	movs	r3, #0
 8005894:	e2e8      	b.n	8005e68 <find_volume+0x658>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80058a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80058ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fd fecf 	bl	8003658 <disk_initialize>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80058c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80058cc:	2303      	movs	r3, #3
 80058ce:	e2cb      	b.n	8005e68 <find_volume+0x658>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <find_volume+0xd6>
 80058d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80058e2:	230a      	movs	r3, #10
 80058e4:	e2c0      	b.n	8005e68 <find_volume+0x658>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ec:	7858      	ldrb	r0, [r3, #1]
 80058ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058f4:	330a      	adds	r3, #10
 80058f6:	461a      	mov	r2, r3
 80058f8:	2102      	movs	r1, #2
 80058fa:	f7fd ff13 	bl	8003724 <disk_ioctl>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10d      	bne.n	8005920 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005910:	d306      	bcc.n	8005920 <find_volume+0x110>
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005918:	895b      	ldrh	r3, [r3, #10]
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591e:	d901      	bls.n	8005924 <find_volume+0x114>
 8005920:	2301      	movs	r3, #1
 8005922:	e2a1      	b.n	8005e68 <find_volume+0x658>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005928:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800592a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800592c:	f7ff ff02 	bl	8005734 <check_fs>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005936:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800593a:	2b01      	cmp	r3, #1
 800593c:	d153      	bne.n	80059e6 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800593e:	2300      	movs	r3, #0
 8005940:	643b      	str	r3, [r7, #64]	@ 0x40
 8005942:	e028      	b.n	8005996 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800594e:	4413      	add	r3, r2
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	3304      	adds	r3, #4
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d012      	beq.n	8005982 <find_volume+0x172>
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	330b      	adds	r3, #11
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	061a      	lsls	r2, r3, #24
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	330a      	adds	r3, #10
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	431a      	orrs	r2, r3
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	3309      	adds	r3, #9
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	4313      	orrs	r3, r2
 8005978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597a:	3208      	adds	r2, #8
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	431a      	orrs	r2, r3
 8005980:	e000      	b.n	8005984 <find_volume+0x174>
 8005982:	2200      	movs	r2, #0
 8005984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	3358      	adds	r3, #88	@ 0x58
 800598a:	443b      	add	r3, r7
 800598c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005992:	3301      	adds	r3, #1
 8005994:	643b      	str	r3, [r7, #64]	@ 0x40
 8005996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005998:	2b03      	cmp	r3, #3
 800599a:	d9d3      	bls.n	8005944 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800599c:	2300      	movs	r3, #0
 800599e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80059a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <find_volume+0x19c>
 80059a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059a8:	3b01      	subs	r3, #1
 80059aa:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80059ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	3358      	adds	r3, #88	@ 0x58
 80059b2:	443b      	add	r3, r7
 80059b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80059b8:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80059ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <find_volume+0x1bc>
 80059c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059c4:	f7ff feb6 	bl	8005734 <check_fs>
 80059c8:	4603      	mov	r3, r0
 80059ca:	e000      	b.n	80059ce <find_volume+0x1be>
 80059cc:	2302      	movs	r3, #2
 80059ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80059d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <find_volume+0x1d6>
 80059da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059dc:	3301      	adds	r3, #1
 80059de:	643b      	str	r3, [r7, #64]	@ 0x40
 80059e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d9e2      	bls.n	80059ac <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80059e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d101      	bne.n	80059f2 <find_volume+0x1e2>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e23a      	b.n	8005e68 <find_volume+0x658>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80059f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <find_volume+0x1ee>
 80059fa:	230d      	movs	r3, #13
 80059fc:	e234      	b.n	8005e68 <find_volume+0x658>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a00:	7b1b      	ldrb	r3, [r3, #12]
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	b21a      	sxth	r2, r3
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	7adb      	ldrb	r3, [r3, #11]
 8005a0c:	b21b      	sxth	r3, r3
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	b21a      	sxth	r2, r3
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a18:	895b      	ldrh	r3, [r3, #10]
 8005a1a:	b21b      	sxth	r3, r3
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <find_volume+0x214>
		return FR_NO_FILESYSTEM;
 8005a20:	230d      	movs	r3, #13
 8005a22:	e221      	b.n	8005e68 <find_volume+0x658>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	7ddb      	ldrb	r3, [r3, #23]
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	b21a      	sxth	r2, r3
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	7d9b      	ldrb	r3, [r3, #22]
 8005a32:	b21b      	sxth	r3, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d112      	bne.n	8005a68 <find_volume+0x258>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005a48:	061a      	lsls	r2, r3, #24
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a60:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005a64:	4313      	orrs	r3, r2
 8005a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8005a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a72:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	7c1a      	ldrb	r2, [r3, #16]
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a7e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a86:	78db      	ldrb	r3, [r3, #3]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d009      	beq.n	8005aa0 <find_volume+0x290>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a92:	78db      	ldrb	r3, [r3, #3]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d003      	beq.n	8005aa0 <find_volume+0x290>
		return FR_NO_FILESYSTEM;
 8005a98:	230d      	movs	r3, #13
 8005a9a:	e1e5      	b.n	8005e68 <find_volume+0x658>
 8005a9c:	20000244 	.word	0x20000244
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa6:	78db      	ldrb	r3, [r3, #3]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	7b5a      	ldrb	r2, [r3, #13]
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005abc:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac4:	789b      	ldrb	r3, [r3, #2]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <find_volume+0x2d4>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad0:	789b      	ldrb	r3, [r3, #2]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ada:	789b      	ldrb	r3, [r3, #2]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <find_volume+0x2d8>
		return FR_NO_FILESYSTEM;
 8005ae4:	230d      	movs	r3, #13
 8005ae6:	e1bf      	b.n	8005e68 <find_volume+0x658>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	7c9b      	ldrb	r3, [r3, #18]
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	b21a      	sxth	r2, r3
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	7c5b      	ldrb	r3, [r3, #17]
 8005af6:	b21b      	sxth	r3, r3
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b04:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0c:	891b      	ldrh	r3, [r3, #8]
 8005b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b14:	8952      	ldrh	r2, [r2, #10]
 8005b16:	0952      	lsrs	r2, r2, #5
 8005b18:	b292      	uxth	r2, r2
 8005b1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b1e:	fb01 f202 	mul.w	r2, r1, r2
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <find_volume+0x31e>
		return FR_NO_FILESYSTEM;
 8005b2a:	230d      	movs	r3, #13
 8005b2c:	e19c      	b.n	8005e68 <find_volume+0x658>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	7d1b      	ldrb	r3, [r3, #20]
 8005b32:	b21b      	sxth	r3, r3
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	7cdb      	ldrb	r3, [r3, #19]
 8005b3c:	b21b      	sxth	r3, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d112      	bne.n	8005b72 <find_volume+0x362>
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005b52:	061a      	lsls	r2, r3, #24
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	4313      	orrs	r3, r2
 8005b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	7bdb      	ldrb	r3, [r3, #15]
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	b21a      	sxth	r2, r3
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7e:	7b9b      	ldrb	r3, [r3, #14]
 8005b80:	b21b      	sxth	r3, r3
 8005b82:	4313      	orrs	r3, r2
 8005b84:	b21b      	sxth	r3, r3
 8005b86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005b88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <find_volume+0x382>
 8005b8e:	230d      	movs	r3, #13
 8005b90:	e16a      	b.n	8005e68 <find_volume+0x658>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005b92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b96:	4413      	add	r3, r2
 8005b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b9e:	8911      	ldrh	r1, [r2, #8]
 8005ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ba6:	8952      	ldrh	r2, [r2, #10]
 8005ba8:	0952      	lsrs	r2, r2, #5
 8005baa:	b292      	uxth	r2, r2
 8005bac:	fbb1 f2f2 	udiv	r2, r1, r2
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005bb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d201      	bcs.n	8005bc2 <find_volume+0x3b2>
 8005bbe:	230d      	movs	r3, #13
 8005bc0:	e152      	b.n	8005e68 <find_volume+0x658>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bce:	7892      	ldrb	r2, [r2, #2]
 8005bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <find_volume+0x3d0>
 8005bdc:	230d      	movs	r3, #13
 8005bde:	e143      	b.n	8005e68 <find_volume+0x658>
	fmt = FS_FAT12;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d902      	bls.n	8005bf6 <find_volume+0x3e6>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d902      	bls.n	8005c06 <find_volume+0x3f6>
 8005c00:	2303      	movs	r3, #3
 8005c02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	3302      	adds	r3, #2
 8005c0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c10:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c1c:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005c1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c22:	4413      	add	r3, r2
 8005c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c2a:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8005c2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	4413      	add	r3, r2
 8005c32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c38:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8005c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d124      	bne.n	8005c8c <find_volume+0x47c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c48:	891b      	ldrh	r3, [r3, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <find_volume+0x442>
 8005c4e:	230d      	movs	r3, #13
 8005c50:	e10a      	b.n	8005e68 <find_volume+0x658>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c58:	061a      	lsls	r2, r3, #24
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c70:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8005c74:	4313      	orrs	r3, r2
 8005c76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c7c:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c8a:	e02b      	b.n	8005ce4 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c92:	891b      	ldrh	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <find_volume+0x48c>
 8005c98:	230d      	movs	r3, #13
 8005c9a:	e0e5      	b.n	8005e68 <find_volume+0x658>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cae:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d105      	bne.n	8005cc4 <find_volume+0x4b4>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	e00e      	b.n	8005ce2 <find_volume+0x4d2>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	085a      	lsrs	r2, r3, #1
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005ce2:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf8:	440b      	add	r3, r1
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cfe:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005d02:	8949      	ldrh	r1, [r1, #10]
 8005d04:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d201      	bcs.n	8005d10 <find_volume+0x500>
		return FR_NO_FILESYSTEM;
 8005d0c:	230d      	movs	r3, #13
 8005d0e:	e0ab      	b.n	8005e68 <find_volume+0x658>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d16:	461a      	mov	r2, r3
 8005d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d1c:	6113      	str	r3, [r2, #16]
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d2c:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d34:	2280      	movs	r2, #128	@ 0x80
 8005d36:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005d38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d17c      	bne.n	8005e3a <find_volume+0x62a>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d46:	b21b      	sxth	r3, r3
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	b21a      	sxth	r2, r3
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b21b      	sxth	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d16e      	bne.n	8005e3a <find_volume+0x62a>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d5e:	3301      	adds	r3, #1
 8005d60:	4619      	mov	r1, r3
 8005d62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d64:	f7fd ff84 	bl	8003c70 <move_window>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d165      	bne.n	8005e3a <find_volume+0x62a>
	{
		fs->fsi_flag = 0;
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d74:	2200      	movs	r2, #0
 8005d76:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	b21a      	sxth	r2, r3
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005d8a:	b21b      	sxth	r3, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	4a37      	ldr	r2, [pc, #220]	@ (8005e70 <find_volume+0x660>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d151      	bne.n	8005e3a <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	061a      	lsls	r2, r3, #24
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	789b      	ldrb	r3, [r3, #2]
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	4313      	orrs	r3, r2
 8005dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	4a30      	ldr	r2, [pc, #192]	@ (8005e74 <find_volume+0x664>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d140      	bne.n	8005e3a <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005dbe:	061a      	lsls	r2, r3, #24
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc2:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dd6:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	4a26      	ldr	r2, [pc, #152]	@ (8005e78 <find_volume+0x668>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d12b      	bne.n	8005e3a <find_volume+0x62a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005de8:	061a      	lsls	r2, r3, #24
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e00:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005e04:	4313      	orrs	r3, r2
 8005e06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e0c:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005e14:	061a      	lsls	r2, r3, #24
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005e1c:	041b      	lsls	r3, r3, #16
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e22:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e2c:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005e30:	4313      	orrs	r3, r2
 8005e32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005e38:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e40:	461a      	mov	r2, r3
 8005e42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e46:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005e48:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <find_volume+0x66c>)
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <find_volume+0x66c>)
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <find_volume+0x66c>)
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e5e:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e62:	f7fd fe89 	bl	8003b78 <clear_lock>
#endif

	return FR_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3758      	adds	r7, #88	@ 0x58
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	ffffaa55 	.word	0xffffaa55
 8005e74:	41615252 	.word	0x41615252
 8005e78:	61417272 	.word	0x61417272
 8005e7c:	20000248 	.word	0x20000248

08005e80 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02a      	beq.n	8005ee8 <validate+0x68>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d024      	beq.n	8005ee8 <validate+0x68>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <validate+0x68>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ebc:	88da      	ldrh	r2, [r3, #6]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ec4:	889b      	ldrh	r3, [r3, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d10e      	bne.n	8005ee8 <validate+0x68>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fd fba3 	bl	8003624 <disk_status>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005ee8:	2309      	movs	r3, #9
 8005eea:	e000      	b.n	8005eee <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005f0a:	f107 0310 	add.w	r3, r7, #16
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fbcc 	bl	80056ac <get_ldnumber>
 8005f14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da01      	bge.n	8005f20 <f_mount+0x28>
 8005f1c:	230b      	movs	r3, #11
 8005f1e:	e02f      	b.n	8005f80 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005f20:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <f_mount+0x90>)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f7fd fe21 	bl	8003b78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	490d      	ldr	r1, [pc, #52]	@ (8005f88 <f_mount+0x90>)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <f_mount+0x6e>
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d001      	beq.n	8005f6a <f_mount+0x72>
 8005f66:	2300      	movs	r3, #0
 8005f68:	e00a      	b.n	8005f80 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005f6a:	f107 0108 	add.w	r1, r7, #8
 8005f6e:	f107 030c 	add.w	r3, r7, #12
 8005f72:	2200      	movs	r2, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fc4b 	bl	8005810 <find_volume>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	20000244 	.word	0x20000244

08005f8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005f9a:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005f9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fa2:	f843 1c50 	str.w	r1, [r3, #-80]
 8005fa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005faa:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005fae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fb2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <f_open+0x32>
 8005fba:	2309      	movs	r3, #9
 8005fbc:	e2f3      	b.n	80065a6 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8005fbe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fc2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005fd0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fda:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005fe6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fea:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	f107 0118 	add.w	r1, r7, #24
 8005ff8:	3910      	subs	r1, #16
 8005ffa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005ffe:	3b18      	subs	r3, #24
 8006000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fc03 	bl	8005810 <find_volume>
 800600a:	4603      	mov	r3, r0
 800600c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006010:	f102 0217 	add.w	r2, r2, #23
 8006014:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006016:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800601a:	f103 0317 	add.w	r3, r3, #23
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 82bb 	bne.w	800659c <f_open+0x610>
		INIT_BUF(dj);
 8006026:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800602a:	461a      	mov	r2, r3
 800602c:	f107 0318 	add.w	r3, r7, #24
 8006030:	3b04      	subs	r3, #4
 8006032:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8006036:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800603a:	461a      	mov	r2, r3
 800603c:	4bd3      	ldr	r3, [pc, #844]	@ (800638c <f_open+0x400>)
 800603e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8006042:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006046:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800604a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800604e:	3b18      	subs	r3, #24
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fab4 	bl	80055c0 <follow_path>
 8006058:	4603      	mov	r3, r0
 800605a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800605e:	f102 0217 	add.w	r2, r2, #23
 8006062:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006064:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006068:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800606c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006070:	f102 0210 	add.w	r2, r2, #16
 8006074:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006076:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800607a:	f103 0317 	add.w	r3, r3, #23
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d124      	bne.n	80060ce <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8006084:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006088:	f103 0310 	add.w	r3, r3, #16
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <f_open+0x114>
				res = FR_INVALID_NAME;
 8006092:	2306      	movs	r3, #6
 8006094:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006098:	f102 0217 	add.w	r2, r2, #23
 800609c:	7013      	strb	r3, [r2, #0]
 800609e:	e016      	b.n	80060ce <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060a4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf8c      	ite	hi
 80060ac:	2301      	movhi	r3, #1
 80060ae:	2300      	movls	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80060b8:	3b18      	subs	r3, #24
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fd fbc7 	bl	8003850 <chk_lock>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80060c8:	f102 0217 	add.w	r2, r2, #23
 80060cc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060d2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060d6:	f003 031c 	and.w	r3, r3, #28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 813c 	beq.w	8006358 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 80060e0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060e4:	f103 0317 	add.w	r3, r3, #23
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d02e      	beq.n	800614c <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80060ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060f2:	f103 0317 	add.w	r3, r3, #23
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b04      	cmp	r3, #4
 80060fa:	d112      	bne.n	8006122 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80060fc:	f7fd fc18 	bl	8003930 <enq_lock>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <f_open+0x18a>
 8006106:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800610a:	3b18      	subs	r3, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe ff75 	bl	8004ffc <dir_register>
 8006112:	4603      	mov	r3, r0
 8006114:	e000      	b.n	8006118 <f_open+0x18c>
 8006116:	2312      	movs	r3, #18
 8006118:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800611c:	f102 0217 	add.w	r2, r2, #23
 8006120:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006122:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006126:	461a      	mov	r2, r3
 8006128:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800612c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006130:	f043 0308 	orr.w	r3, r3, #8
 8006134:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8006138:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800613c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8006140:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006144:	f102 0210 	add.w	r2, r2, #16
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e01f      	b.n	800618c <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800614c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006150:	f103 0310 	add.w	r3, r3, #16
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330b      	adds	r3, #11
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f003 0311 	and.w	r3, r3, #17
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <f_open+0x1e4>
					res = FR_DENIED;
 8006162:	2307      	movs	r3, #7
 8006164:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006168:	f102 0217 	add.w	r2, r2, #23
 800616c:	7013      	strb	r3, [r2, #0]
 800616e:	e00d      	b.n	800618c <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006170:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006174:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <f_open+0x200>
						res = FR_EXIST;
 8006180:	2308      	movs	r3, #8
 8006182:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006186:	f102 0217 	add.w	r2, r2, #23
 800618a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800618c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006190:	f103 0317 	add.w	r3, r3, #23
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 8113 	bne.w	80063c2 <f_open+0x436>
 800619c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061a0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 810a 	beq.w	80063c2 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 80061ae:	f7fc fd1d 	bl	8002bec <get_fattime>
 80061b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061b6:	f103 030c 	add.w	r3, r3, #12
 80061ba:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80061bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061c0:	f103 0310 	add.w	r3, r3, #16
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330e      	adds	r3, #14
 80061c8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061cc:	f102 020c 	add.w	r2, r2, #12
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061da:	f103 030c 	add.w	r3, r3, #12
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061ea:	f103 0310 	add.w	r3, r3, #16
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	330f      	adds	r3, #15
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061fa:	f103 030c 	add.w	r3, r3, #12
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0c1a      	lsrs	r2, r3, #16
 8006202:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006206:	f103 0310 	add.w	r3, r3, #16
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3310      	adds	r3, #16
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006216:	f103 030c 	add.w	r3, r3, #12
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	0e1a      	lsrs	r2, r3, #24
 800621e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006222:	f103 0310 	add.w	r3, r3, #16
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3311      	adds	r3, #17
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800622e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006232:	f103 0310 	add.w	r3, r3, #16
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330b      	adds	r3, #11
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800623e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006242:	f103 0310 	add.w	r3, r3, #16
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	331c      	adds	r3, #28
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006252:	f103 0310 	add.w	r3, r3, #16
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	331d      	adds	r3, #29
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006262:	f103 0310 	add.w	r3, r3, #16
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	331e      	adds	r3, #30
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006272:	f103 0310 	add.w	r3, r3, #16
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	331f      	adds	r3, #31
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800627e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006282:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006286:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800628a:	f102 0210 	add.w	r2, r2, #16
 800628e:	6811      	ldr	r1, [r2, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fc00 	bl	8004a96 <ld_clust>
 8006296:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800629a:	f103 0308 	add.w	r3, r3, #8
 800629e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80062a0:	2100      	movs	r1, #0
 80062a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062a6:	f103 0310 	add.w	r3, r3, #16
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	f7fe fc23 	bl	8004af6 <st_clust>
				dj.fs->wflag = 1;
 80062b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062b4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80062b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062bc:	2201      	movs	r2, #1
 80062be:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80062c0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062c4:	f103 0308 	add.w	r3, r3, #8
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d079      	beq.n	80063c2 <f_open+0x436>
					dw = dj.fs->winsect;
 80062ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062d2:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80062d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80062e0:	f102 020c 	add.w	r2, r2, #12
 80062e4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80062e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062ea:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80062ee:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80062f2:	f102 0208 	add.w	r2, r2, #8
 80062f6:	6811      	ldr	r1, [r2, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe f81d 	bl	8004338 <remove_chain>
 80062fe:	4603      	mov	r3, r0
 8006300:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006304:	f102 0217 	add.w	r2, r2, #23
 8006308:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800630a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800630e:	f103 0317 	add.w	r3, r3, #23
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d154      	bne.n	80063c2 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006318:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800631c:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8006320:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006324:	f103 0308 	add.w	r3, r3, #8
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3b01      	subs	r3, #1
 800632c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006330:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8006332:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006336:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800633a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800633e:	f102 020c 	add.w	r2, r2, #12
 8006342:	6811      	ldr	r1, [r2, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd fc93 	bl	8003c70 <move_window>
 800634a:	4603      	mov	r3, r0
 800634c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006350:	f102 0217 	add.w	r2, r2, #23
 8006354:	7013      	strb	r3, [r2, #0]
 8006356:	e034      	b.n	80063c2 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006358:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800635c:	f103 0317 	add.w	r3, r3, #23
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d12d      	bne.n	80063c2 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006366:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800636a:	f103 0310 	add.w	r3, r3, #16
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330b      	adds	r3, #11
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <f_open+0x404>
					res = FR_NO_FILE;
 800637c:	2304      	movs	r3, #4
 800637e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006382:	f102 0217 	add.w	r2, r2, #23
 8006386:	7013      	strb	r3, [r2, #0]
 8006388:	e01b      	b.n	80063c2 <f_open+0x436>
 800638a:	bf00      	nop
 800638c:	20000264 	.word	0x20000264
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006390:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006394:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <f_open+0x436>
 80063a0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80063a4:	f103 0310 	add.w	r3, r3, #16
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	330b      	adds	r3, #11
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <f_open+0x436>
						res = FR_DENIED;
 80063b6:	2307      	movs	r3, #7
 80063b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80063bc:	f102 0217 	add.w	r2, r2, #23
 80063c0:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80063c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80063c6:	f103 0317 	add.w	r3, r3, #23
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d155      	bne.n	800647c <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80063d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063d4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <f_open+0x46a>
				mode |= FA__WRITTEN;
 80063e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063e4:	461a      	mov	r2, r3
 80063e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063ea:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80063ee:	f043 0320 	orr.w	r3, r3, #32
 80063f2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80063f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063fa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80063fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006408:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800640c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006410:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8006412:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006416:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800641a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800641e:	461a      	mov	r2, r3
 8006420:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006424:	f103 0310 	add.w	r3, r3, #16
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800642c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006430:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf8c      	ite	hi
 8006438:	2301      	movhi	r3, #1
 800643a:	2300      	movls	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006444:	3b18      	subs	r3, #24
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f7fd fa95 	bl	8003978 <inc_lock>
 800644e:	4602      	mov	r2, r0
 8006450:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006454:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800645c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800645e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006462:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800646a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d105      	bne.n	800647c <f_open+0x4f0>
 8006470:	2302      	movs	r3, #2
 8006472:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006476:	f102 0217 	add.w	r2, r2, #23
 800647a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800647c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006480:	f103 0317 	add.w	r3, r3, #23
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 8088 	bne.w	800659c <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800648c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006490:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006498:	461a      	mov	r2, r3
 800649a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800649e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80064a2:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80064a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064a8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80064ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b0:	2200      	movs	r2, #0
 80064b2:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80064b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064b8:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80064bc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80064c0:	f102 0210 	add.w	r2, r2, #16
 80064c4:	6811      	ldr	r1, [r2, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fae5 	bl	8004a96 <ld_clust>
 80064cc:	4602      	mov	r2, r0
 80064ce:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064d2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064da:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80064dc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80064e0:	f103 0310 	add.w	r3, r3, #16
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	331f      	adds	r3, #31
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	061a      	lsls	r2, r3, #24
 80064ec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80064f0:	f103 0310 	add.w	r3, r3, #16
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	331e      	adds	r3, #30
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	041b      	lsls	r3, r3, #16
 80064fc:	431a      	orrs	r2, r3
 80064fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006502:	f103 0310 	add.w	r3, r3, #16
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	331d      	adds	r3, #29
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4313      	orrs	r3, r2
 8006510:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006514:	f102 0210 	add.w	r2, r2, #16
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	321c      	adds	r2, #28
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	4313      	orrs	r3, r2
 8006520:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006524:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006528:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800652c:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800652e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006532:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653a:	461a      	mov	r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8006540:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006544:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006552:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006556:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800655a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655e:	461a      	mov	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006564:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006568:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800656c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006570:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006578:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800657a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800657e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658c:	88da      	ldrh	r2, [r3, #6]
 800658e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006592:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800659c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80065a0:	f103 0317 	add.w	r3, r3, #23
 80065a4:	781b      	ldrb	r3, [r3, #0]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop

080065b4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	@ 0x30
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fc57 	bl	8005e80 <validate>
 80065d2:	4603      	mov	r3, r0
 80065d4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <f_read+0x2c>
 80065dc:	7ffb      	ldrb	r3, [r7, #31]
 80065de:	e1cd      	b.n	800697c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e6:	79db      	ldrb	r3, [r3, #7]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f2:	79db      	ldrb	r3, [r3, #7]
 80065f4:	e1c2      	b.n	800697c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fc:	799b      	ldrb	r3, [r3, #6]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006606:	2307      	movs	r3, #7
 8006608:	e1b8      	b.n	800697c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	429a      	cmp	r2, r3
 8006624:	f240 81a5 	bls.w	8006972 <f_read+0x3be>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800662c:	e1a1      	b.n	8006972 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006642:	8952      	ldrh	r2, [r2, #10]
 8006644:	fbb3 f1f2 	udiv	r1, r3, r2
 8006648:	fb01 f202 	mul.w	r2, r1, r2
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 8140 	bne.w	80068d4 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006668:	8952      	ldrh	r2, [r2, #10]
 800666a:	fbb3 f3f2 	udiv	r3, r3, r2
 800666e:	b2da      	uxtb	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800667c:	789b      	ldrb	r3, [r3, #2]
 800667e:	3b01      	subs	r3, #1
 8006680:	b2db      	uxtb	r3, r3
 8006682:	4013      	ands	r3, r2
 8006684:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d143      	bne.n	8006714 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a2:	e01c      	b.n	80066de <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4619      	mov	r1, r3
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7fd ff45 	bl	800454a <clmt_clust>
 80066c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80066c2:	e00c      	b.n	80066de <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fd fbdf 	bl	8003e9a <get_fat>
 80066dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d806      	bhi.n	80066f2 <f_read+0x13e>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ea:	2202      	movs	r2, #2
 80066ec:	71da      	strb	r2, [r3, #7]
 80066ee:	2302      	movs	r3, #2
 80066f0:	e144      	b.n	800697c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f8:	d106      	bne.n	8006708 <f_read+0x154>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006700:	2201      	movs	r2, #1
 8006702:	71da      	strb	r2, [r3, #7]
 8006704:	2301      	movs	r3, #1
 8006706:	e139      	b.n	800697c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	461a      	mov	r2, r3
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fd fb93 	bl	8003e52 <clust2sect>
 800672c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <f_read+0x18e>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673a:	2202      	movs	r2, #2
 800673c:	71da      	strb	r2, [r3, #7]
 800673e:	2302      	movs	r3, #2
 8006740:	e11c      	b.n	800697c <f_read+0x3c8>
			sect += csect;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006756:	895b      	ldrh	r3, [r3, #10]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d066      	beq.n	8006836 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006768:	7dfa      	ldrb	r2, [r7, #23]
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	4413      	add	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800677a:	7892      	ldrb	r2, [r2, #2]
 800677c:	4293      	cmp	r3, r2
 800677e:	d90a      	bls.n	8006796 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678c:	789b      	ldrb	r3, [r3, #2]
 800678e:	461a      	mov	r2, r3
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a2:	7858      	ldrb	r0, [r3, #1]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	6a39      	ldr	r1, [r7, #32]
 80067aa:	f7fc ff7b 	bl	80036a4 <disk_read>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d006      	beq.n	80067c2 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ba:	2201      	movs	r2, #1
 80067bc:	71da      	strb	r2, [r3, #7]
 80067be:	2301      	movs	r3, #1
 80067c0:	e0dc      	b.n	800697c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c8:	799b      	ldrb	r3, [r3, #6]
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d024      	beq.n	800681c <f_read+0x268>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d91b      	bls.n	800681c <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067fc:	8952      	ldrh	r2, [r2, #10]
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	18d0      	adds	r0, r2, r3
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006814:	895b      	ldrh	r3, [r3, #10]
 8006816:	461a      	mov	r2, r3
 8006818:	f7fc ffa2 	bl	8003760 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006828:	895b      	ldrh	r3, [r3, #10]
 800682a:	461a      	mov	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8006834:	e085      	b.n	8006942 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d041      	beq.n	80068c8 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684a:	799b      	ldrb	r3, [r3, #6]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d023      	beq.n	800689c <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006860:	7858      	ldrb	r0, [r3, #1]
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	2301      	movs	r3, #1
 800686e:	f7fc ff39 	bl	80036e4 <disk_write>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800687e:	2201      	movs	r2, #1
 8006880:	71da      	strb	r2, [r3, #7]
 8006882:	2301      	movs	r3, #1
 8006884:	e07a      	b.n	800697c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688c:	799b      	ldrb	r3, [r3, #6]
 800688e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006892:	b2da      	uxtb	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a8:	7858      	ldrb	r0, [r3, #1]
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	2301      	movs	r3, #1
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	f7fc fef8 	bl	80036a4 <disk_read>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d006      	beq.n	80068c8 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c0:	2201      	movs	r2, #1
 80068c2:	71da      	strb	r2, [r3, #7]
 80068c4:	2301      	movs	r3, #1
 80068c6:	e059      	b.n	800697c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ce:	461a      	mov	r2, r3
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e0:	895b      	ldrh	r3, [r3, #10]
 80068e2:	4618      	mov	r0, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068f8:	8952      	ldrh	r2, [r2, #10]
 80068fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80068fe:	fb01 f202 	mul.w	r2, r1, r2
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	1ac3      	subs	r3, r0, r3
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8006908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d901      	bls.n	8006914 <f_read+0x360>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006928:	8952      	ldrh	r2, [r2, #10]
 800692a:	fbb3 f1f2 	udiv	r1, r3, r2
 800692e:	fb01 f202 	mul.w	r2, r1, r2
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800693a:	4619      	mov	r1, r3
 800693c:	6a38      	ldr	r0, [r7, #32]
 800693e:	f7fc ff0f 	bl	8003760 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	4413      	add	r3, r2
 8006948:	623b      	str	r3, [r7, #32]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	4413      	add	r3, r2
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800695c:	6093      	str	r3, [r2, #8]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	441a      	add	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f47f ae5a 	bne.w	800662e <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3730      	adds	r7, #48	@ 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	@ 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff fa6f 	bl	8005e80 <validate>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <f_write+0x2c>
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	e21e      	b.n	8006dee <f_write+0x46a>
	if (fp->err)							/* Check error */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069b6:	79db      	ldrb	r3, [r3, #7]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c2:	79db      	ldrb	r3, [r3, #7]
 80069c4:	e213      	b.n	8006dee <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069cc:	799b      	ldrb	r3, [r3, #6]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80069d6:	2307      	movs	r3, #7
 80069d8:	e209      	b.n	8006dee <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	f080 81d9 	bcs.w	8006da6 <f_write+0x422>
 80069f4:	2300      	movs	r3, #0
 80069f6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80069f8:	e1d5      	b.n	8006da6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a0e:	8952      	ldrh	r2, [r2, #10]
 8006a10:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a14:	fb01 f202 	mul.w	r2, r1, r2
 8006a18:	1a9b      	subs	r3, r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 8169 	bne.w	8006cf2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a34:	8952      	ldrh	r2, [r2, #10]
 8006a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	4013      	ands	r3, r2
 8006a50:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006a52:	7dbb      	ldrb	r3, [r7, #22]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d15f      	bne.n	8006b18 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d111      	bne.n	8006a88 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d126      	bne.n	8006ac2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fd fcbb 	bl	80043fa <create_chain>
 8006a84:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a86:	e01c      	b.n	8006ac2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7fd fd53 	bl	800454a <clmt_clust>
 8006aa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006aa6:	e00c      	b.n	8006ac2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fd fc9d 	bl	80043fa <create_chain>
 8006ac0:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8173 	beq.w	8006db0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d106      	bne.n	8006ade <f_write+0x15a>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	71da      	strb	r2, [r3, #7]
 8006ada:	2302      	movs	r3, #2
 8006adc:	e187      	b.n	8006dee <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ae4:	d106      	bne.n	8006af4 <f_write+0x170>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aec:	2201      	movs	r2, #1
 8006aee:	71da      	strb	r2, [r3, #7]
 8006af0:	2301      	movs	r3, #1
 8006af2:	e17c      	b.n	8006dee <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afa:	461a      	mov	r2, r3
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d105      	bne.n	8006b18 <f_write+0x194>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b12:	461a      	mov	r2, r3
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b1e:	799b      	ldrb	r3, [r3, #6]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d023      	beq.n	8006b70 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b34:	7858      	ldrb	r0, [r3, #1]
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	2301      	movs	r3, #1
 8006b42:	f7fc fdcf 	bl	80036e4 <disk_write>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b52:	2201      	movs	r2, #1
 8006b54:	71da      	strb	r2, [r3, #7]
 8006b56:	2301      	movs	r3, #1
 8006b58:	e149      	b.n	8006dee <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b60:	799b      	ldrb	r3, [r3, #6]
 8006b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b6e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fd f965 	bl	8003e52 <clust2sect>
 8006b88:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <f_write+0x21a>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b96:	2202      	movs	r2, #2
 8006b98:	71da      	strb	r2, [r3, #7]
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e127      	b.n	8006dee <f_write+0x46a>
			sect += csect;
 8006b9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb2:	895b      	ldrh	r3, [r3, #10]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d069      	beq.n	8006c98 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006bc4:	7dba      	ldrb	r2, [r7, #22]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006bd6:	7892      	ldrb	r2, [r2, #2]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d90a      	bls.n	8006bf2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be8:	789b      	ldrb	r3, [r3, #2]
 8006bea:	461a      	mov	r2, r3
 8006bec:	7dbb      	ldrb	r3, [r7, #22]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bfe:	7858      	ldrb	r0, [r3, #1]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	f7fc fd6d 	bl	80036e4 <disk_write>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c16:	2201      	movs	r2, #1
 8006c18:	71da      	strb	r2, [r3, #7]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e0e7      	b.n	8006dee <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d926      	bls.n	8006c7e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c4a:	8952      	ldrh	r2, [r2, #10]
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	18d1      	adds	r1, r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c60:	895b      	ldrh	r3, [r3, #10]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fc fd7c 	bl	8003760 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c6e:	799b      	ldrb	r3, [r3, #6]
 8006c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c7c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c8a:	895b      	ldrh	r3, [r3, #10]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	fb02 f303 	mul.w	r3, r2, r3
 8006c94:	623b      	str	r3, [r7, #32]
				continue;
 8006c96:	e06e      	b.n	8006d76 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d01f      	beq.n	8006ce6 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d215      	bcs.n	8006ce6 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc6:	7858      	ldrb	r0, [r3, #1]
 8006cc8:	68f9      	ldr	r1, [r7, #12]
 8006cca:	2301      	movs	r3, #1
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	f7fc fce9 	bl	80036a4 <disk_read>
 8006cd2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cde:	2201      	movs	r2, #1
 8006ce0:	71da      	strb	r2, [r3, #7]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e083      	b.n	8006dee <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cec:	461a      	mov	r2, r3
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfe:	895b      	ldrh	r3, [r3, #10]
 8006d00:	4618      	mov	r0, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d16:	8952      	ldrh	r2, [r2, #10]
 8006d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d1c:	fb01 f202 	mul.w	r2, r1, r2
 8006d20:	1a9b      	subs	r3, r3, r2
 8006d22:	1ac3      	subs	r3, r0, r3
 8006d24:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d901      	bls.n	8006d32 <f_write+0x3ae>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d46:	8952      	ldrh	r2, [r2, #10]
 8006d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d4c:	fb01 f202 	mul.w	r2, r1, r2
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	6a3a      	ldr	r2, [r7, #32]
 8006d58:	69b9      	ldr	r1, [r7, #24]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fc fd00 	bl	8003760 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d66:	799b      	ldrb	r3, [r3, #6]
 8006d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d74:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	4413      	add	r3, r2
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d90:	6093      	str	r3, [r2, #8]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	441a      	add	r2, r3
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f ae26 	bne.w	80069fa <f_write+0x76>
 8006dae:	e000      	b.n	8006db2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006db0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d907      	bls.n	8006dd6 <f_write+0x452>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dd4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ddc:	799b      	ldrb	r3, [r3, #6]
 8006dde:	f043 0320 	orr.w	r3, r3, #32
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dea:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	@ 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b086      	sub	sp, #24
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff f83e 	bl	8005e80 <validate>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 80bc 	bne.w	8006f88 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e16:	799b      	ldrb	r3, [r3, #6]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 80b3 	beq.w	8006f88 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e28:	799b      	ldrb	r3, [r3, #6]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01e      	beq.n	8006e70 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3e:	7858      	ldrb	r0, [r3, #1]
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f7fc fc4a 	bl	80036e4 <disk_write>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006e56:	2301      	movs	r3, #1
 8006e58:	e097      	b.n	8006f8a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e60:	799b      	ldrb	r3, [r3, #6]
 8006e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f7fc fef4 	bl	8003c70 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d17a      	bne.n	8006f88 <f_sync+0x192>
				dir = fp->dir_ptr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	330b      	adds	r3, #11
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	330b      	adds	r3, #11
 8006ea6:	f042 0220 	orr.w	r2, r2, #32
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	331c      	adds	r3, #28
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	331d      	adds	r3, #29
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	0c1a      	lsrs	r2, r3, #16
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	331e      	adds	r3, #30
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	0e1a      	lsrs	r2, r3, #24
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	331f      	adds	r3, #31
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f7fd fdf7 	bl	8004af6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006f08:	f7fb fe70 	bl	8002bec <get_fattime>
 8006f0c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3316      	adds	r3, #22
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	0a1b      	lsrs	r3, r3, #8
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	3317      	adds	r3, #23
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	0c1a      	lsrs	r2, r3, #16
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3318      	adds	r3, #24
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0e1a      	lsrs	r2, r3, #24
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3319      	adds	r3, #25
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3312      	adds	r3, #18
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3313      	adds	r3, #19
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f56:	799b      	ldrb	r3, [r3, #6]
 8006f58:	f023 0320 	bic.w	r3, r3, #32
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f64:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f72:	2201      	movs	r2, #1
 8006f74:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc fea8 	bl	8003cd4 <sync_fs>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff ff2b 	bl	8006df6 <f_sync>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d119      	bne.n	8006fde <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe ff68 	bl	8005e80 <validate>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d111      	bne.n	8006fde <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fc fd94 	bl	8003af0 <dec_lock>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b090      	sub	sp, #64	@ 0x40
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fe ff44 	bl	8005e80 <validate>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006ffe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <f_lseek+0x24>
 8007006:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800700a:	e2da      	b.n	80075c2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007012:	79db      	ldrb	r3, [r3, #7]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800701e:	79db      	ldrb	r3, [r3, #7]
 8007020:	e2cf      	b.n	80075c2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8124 	beq.w	8007278 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007036:	d16c      	bne.n	8007112 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	1d1a      	adds	r2, r3, #4
 8007046:	627a      	str	r2, [r7, #36]	@ 0x24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	2302      	movs	r3, #2
 800704e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d046      	beq.n	80070ee <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	2300      	movs	r3, #0
 8007066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	3302      	adds	r3, #2
 800706c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007074:	3301      	adds	r3, #1
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007082:	4618      	mov	r0, r3
 8007084:	f7fc ff09 	bl	8003e9a <get_fat>
 8007088:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	2b01      	cmp	r3, #1
 800708e:	d806      	bhi.n	800709e <f_lseek+0xb6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007096:	2202      	movs	r2, #2
 8007098:	71da      	strb	r2, [r3, #7]
 800709a:	2302      	movs	r3, #2
 800709c:	e291      	b.n	80075c2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a4:	d106      	bne.n	80070b4 <f_lseek+0xcc>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ac:	2201      	movs	r2, #1
 80070ae:	71da      	strb	r2, [r3, #7]
 80070b0:	2301      	movs	r3, #1
 80070b2:	e286      	b.n	80075c2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	3301      	adds	r3, #1
 80070b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d0d7      	beq.n	800706e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80070be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d809      	bhi.n	80070da <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	1d1a      	adds	r2, r3, #4
 80070ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80070cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3b8      	bcc.n	8007060 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070f8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80070fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d803      	bhi.n	800710a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e259      	b.n	80075be <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800710a:	2311      	movs	r3, #17
 800710c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007110:	e255      	b.n	80075be <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d904      	bls.n	800712a <f_lseek+0x142>
				ofs = fp->fsize;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007130:	461a      	mov	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8240 	beq.w	80075be <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	3b01      	subs	r3, #1
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fd fa00 	bl	800454a <clmt_clust>
 800714a:	4602      	mov	r2, r0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007152:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fc fe73 	bl	8003e52 <clust2sect>
 800716c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <f_lseek+0x19a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717a:	2202      	movs	r2, #2
 800717c:	71da      	strb	r2, [r3, #7]
 800717e:	2302      	movs	r3, #2
 8007180:	e21f      	b.n	80075c2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	3b01      	subs	r3, #1
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007192:	8952      	ldrh	r2, [r2, #10]
 8007194:	fbb3 f3f2 	udiv	r3, r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071a4:	7892      	ldrb	r2, [r2, #2]
 80071a6:	3a01      	subs	r2, #1
 80071a8:	4013      	ands	r3, r2
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	4413      	add	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071c4:	8952      	ldrh	r2, [r2, #10]
 80071c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80071ca:	fb01 f202 	mul.w	r2, r1, r2
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 81f4 	beq.w	80075be <f_lseek+0x5d6>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	f000 81ec 	beq.w	80075be <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ec:	799b      	ldrb	r3, [r3, #6]
 80071ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d023      	beq.n	800723e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007202:	7858      	ldrb	r0, [r3, #1]
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	2301      	movs	r3, #1
 8007210:	f7fc fa68 	bl	80036e4 <disk_write>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d006      	beq.n	8007228 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007220:	2201      	movs	r2, #1
 8007222:	71da      	strb	r2, [r3, #7]
 8007224:	2301      	movs	r3, #1
 8007226:	e1cc      	b.n	80075c2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722e:	799b      	ldrb	r3, [r3, #6]
 8007230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800723c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800724a:	7858      	ldrb	r0, [r3, #1]
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	2301      	movs	r3, #1
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	f7fc fa27 	bl	80036a4 <disk_read>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007262:	2201      	movs	r2, #1
 8007264:	71da      	strb	r2, [r3, #7]
 8007266:	2301      	movs	r3, #1
 8007268:	e1ab      	b.n	80075c2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007270:	461a      	mov	r2, r3
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	6193      	str	r3, [r2, #24]
 8007276:	e1a2      	b.n	80075be <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d90c      	bls.n	80072a0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800728c:	799b      	ldrb	r3, [r3, #6]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b4:	461a      	mov	r2, r3
 80072b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8100 	beq.w	80074c2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ce:	789b      	ldrb	r3, [r3, #2]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072de:	895b      	ldrh	r3, [r3, #10]
 80072e0:	fb02 f303 	mul.w	r3, r2, r3
 80072e4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d021      	beq.n	8007330 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	1e5a      	subs	r2, r3, #1
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	1e59      	subs	r1, r3, #1
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d315      	bcc.n	8007330 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	1e5a      	subs	r2, r3, #1
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	425b      	negs	r3, r3
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007314:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800732e:	e031      	b.n	8007394 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	2b00      	cmp	r3, #0
 800733e:	d123      	bne.n	8007388 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f7fd f855 	bl	80043fa <create_chain>
 8007350:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007354:	2b01      	cmp	r3, #1
 8007356:	d106      	bne.n	8007366 <f_lseek+0x37e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800735e:	2202      	movs	r2, #2
 8007360:	71da      	strb	r2, [r3, #7]
 8007362:	2302      	movs	r3, #2
 8007364:	e12d      	b.n	80075c2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800736c:	d106      	bne.n	800737c <f_lseek+0x394>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007374:	2201      	movs	r2, #1
 8007376:	71da      	strb	r2, [r3, #7]
 8007378:	2301      	movs	r3, #1
 800737a:	e122      	b.n	80075c2 <f_lseek+0x5da>
					fp->sclust = clst;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007382:	461a      	mov	r2, r3
 8007384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007386:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800738e:	461a      	mov	r2, r3
 8007390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007392:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8093 	beq.w	80074c2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800739c:	e052      	b.n	8007444 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a4:	799b      	ldrb	r3, [r3, #6]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd f81e 	bl	80043fa <create_chain>
 80073be:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <f_lseek+0x3f6>
							ofs = bcs; break;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	e03f      	b.n	800744c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fc fd5f 	bl	8003e9a <get_fat>
 80073dc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e4:	d106      	bne.n	80073f4 <f_lseek+0x40c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ec:	2201      	movs	r2, #1
 80073ee:	71da      	strb	r2, [r3, #7]
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0e6      	b.n	80075c2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d909      	bls.n	800740e <f_lseek+0x426>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800740a:	429a      	cmp	r2, r3
 800740c:	d306      	bcc.n	800741c <f_lseek+0x434>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007414:	2202      	movs	r2, #2
 8007416:	71da      	strb	r2, [r3, #7]
 8007418:	2302      	movs	r3, #2
 800741a:	e0d2      	b.n	80075c2 <f_lseek+0x5da>
					fp->clust = clst;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007422:	461a      	mov	r2, r3
 8007424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007426:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800743a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	429a      	cmp	r2, r3
 800744a:	d8a8      	bhi.n	800739e <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	4413      	add	r3, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800745e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746c:	895b      	ldrh	r3, [r3, #10]
 800746e:	461a      	mov	r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	fbb3 f1f2 	udiv	r1, r3, r2
 8007476:	fb01 f202 	mul.w	r2, r1, r2
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d020      	beq.n	80074c2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800748a:	4618      	mov	r0, r3
 800748c:	f7fc fce1 	bl	8003e52 <clust2sect>
 8007490:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <f_lseek+0x4be>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800749e:	2202      	movs	r2, #2
 80074a0:	71da      	strb	r2, [r3, #7]
 80074a2:	2302      	movs	r3, #2
 80074a4:	e08d      	b.n	80075c2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b2:	895b      	ldrh	r3, [r3, #10]
 80074b4:	461a      	mov	r2, r3
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074be:	4413      	add	r3, r2
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80074d6:	8952      	ldrh	r2, [r2, #10]
 80074d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80074dc:	fb01 f202 	mul.w	r2, r1, r2
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d04e      	beq.n	8007584 <f_lseek+0x59c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d047      	beq.n	8007584 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074fa:	799b      	ldrb	r3, [r3, #6]
 80074fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d023      	beq.n	800754c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007510:	7858      	ldrb	r0, [r3, #1]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	2301      	movs	r3, #1
 800751e:	f7fc f8e1 	bl	80036e4 <disk_write>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d006      	beq.n	8007536 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752e:	2201      	movs	r2, #1
 8007530:	71da      	strb	r2, [r3, #7]
 8007532:	2301      	movs	r3, #1
 8007534:	e045      	b.n	80075c2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753c:	799b      	ldrb	r3, [r3, #6]
 800753e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007542:	b2da      	uxtb	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800754a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007558:	7858      	ldrb	r0, [r3, #1]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	2301      	movs	r3, #1
 800755e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007560:	f7fc f8a0 	bl	80036a4 <disk_read>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007570:	2201      	movs	r2, #1
 8007572:	71da      	strb	r2, [r3, #7]
 8007574:	2301      	movs	r3, #1
 8007576:	e024      	b.n	80075c2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757e:	461a      	mov	r2, r3
 8007580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007582:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d912      	bls.n	80075be <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075a6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ae:	799b      	ldrb	r3, [r3, #6]
 80075b0:	f043 0320 	orr.w	r3, r3, #32
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075bc:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80075be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3740      	adds	r7, #64	@ 0x40
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b08e      	sub	sp, #56	@ 0x38
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	2200      	movs	r2, #0
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fe f916 	bl	8005810 <find_volume>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80075f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 80bd 	bne.w	8007774 <f_getfree+0x1aa>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	3b02      	subs	r3, #2
 800760c:	429a      	cmp	r2, r3
 800760e:	d806      	bhi.n	800761e <f_getfree+0x54>
			*nclst = fs->free_clust;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	e0aa      	b.n	8007774 <f_getfree+0x1aa>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 800762c:	7efb      	ldrb	r3, [r7, #27]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d126      	bne.n	8007680 <f_getfree+0xb6>
				clst = 2;
 8007632:	2302      	movs	r3, #2
 8007634:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8007636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007638:	69f8      	ldr	r0, [r7, #28]
 800763a:	f7fc fc2e 	bl	8003e9a <get_fat>
 800763e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007646:	d103      	bne.n	8007650 <f_getfree+0x86>
 8007648:	2301      	movs	r3, #1
 800764a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800764e:	e07d      	b.n	800774c <f_getfree+0x182>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d103      	bne.n	800765e <f_getfree+0x94>
 8007656:	2302      	movs	r3, #2
 8007658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800765c:	e076      	b.n	800774c <f_getfree+0x182>
					if (stat == 0) n++;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <f_getfree+0xa0>
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	3301      	adds	r3, #1
 8007668:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 800766a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766c:	3301      	adds	r3, #1
 800766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800767a:	429a      	cmp	r2, r3
 800767c:	d3db      	bcc.n	8007636 <f_getfree+0x6c>
 800767e:	e065      	b.n	800774c <f_getfree+0x182>
			} else {
				clst = fs->n_fatent;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
 8007698:	2300      	movs	r3, #0
 800769a:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d114      	bne.n	80076cc <f_getfree+0x102>
						res = move_window(fs, sect++);
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80076a8:	4619      	mov	r1, r3
 80076aa:	69f8      	ldr	r0, [r7, #28]
 80076ac:	f7fc fae0 	bl	8003c70 <move_window>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 80076b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d145      	bne.n	800774a <f_getfree+0x180>
						p = fs->win.d8;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076c8:	895b      	ldrh	r3, [r3, #10]
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 80076cc:	7efb      	ldrb	r3, [r7, #27]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d116      	bne.n	8007700 <f_getfree+0x136>
						if (LD_WORD(p) == 0) n++;
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	3301      	adds	r3, #1
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b21b      	sxth	r3, r3
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	b21a      	sxth	r2, r3
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b21b      	sxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <f_getfree+0x128>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	3301      	adds	r3, #1
 80076f0:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	3302      	adds	r3, #2
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	3b02      	subs	r3, #2
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fe:	e01d      	b.n	800773c <f_getfree+0x172>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	3303      	adds	r3, #3
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	061a      	lsls	r2, r3, #24
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	3302      	adds	r3, #2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	431a      	orrs	r2, r3
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	3301      	adds	r3, #1
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	4313      	orrs	r3, r2
 800771c:	6a3a      	ldr	r2, [r7, #32]
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	4313      	orrs	r3, r2
 8007722:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <f_getfree+0x166>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	3301      	adds	r3, #1
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	3304      	adds	r3, #4
 8007734:	623b      	str	r3, [r7, #32]
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	3b04      	subs	r3, #4
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 800773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773e:	3b01      	subs	r3, #1
 8007740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1a9      	bne.n	800769c <f_getfree+0xd2>
 8007748:	e000      	b.n	800774c <f_getfree+0x182>
						if (res != FR_OK) break;
 800774a:	bf00      	nop
			}
			fs->free_clust = n;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007752:	461a      	mov	r2, r3
 8007754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007756:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800775e:	795b      	ldrb	r3, [r3, #5]
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800776c:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007772:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007774:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8007778:	4618      	mov	r0, r3
 800777a:	3738      	adds	r7, #56	@ 0x38
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007794:	e01c      	b.n	80077d0 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007796:	f107 0310 	add.w	r3, r7, #16
 800779a:	f107 0114 	add.w	r1, r7, #20
 800779e:	2201      	movs	r2, #1
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe ff07 	bl	80065b4 <f_read>
		if (rc != 1) break;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d117      	bne.n	80077dc <f_gets+0x5c>
		c = s[0];
 80077ac:	7d3b      	ldrb	r3, [r7, #20]
 80077ae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b0d      	cmp	r3, #13
 80077b4:	d00b      	beq.n	80077ce <f_gets+0x4e>
		*p++ = c;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	61ba      	str	r2, [r7, #24]
 80077bc:	7dfa      	ldrb	r2, [r7, #23]
 80077be:	701a      	strb	r2, [r3, #0]
		n++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b0a      	cmp	r3, #10
 80077ca:	d009      	beq.n	80077e0 <f_gets+0x60>
 80077cc:	e000      	b.n	80077d0 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80077ce:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	dbdd      	blt.n	8007796 <f_gets+0x16>
 80077da:	e002      	b.n	80077e2 <f_gets+0x62>
		if (rc != 1) break;
 80077dc:	bf00      	nop
 80077de:	e000      	b.n	80077e2 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80077e0:	bf00      	nop
	}
	*p = 0;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <f_gets+0x72>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e000      	b.n	80077f4 <f_gets+0x74>
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	2b0a      	cmp	r3, #10
 800780c:	d103      	bne.n	8007816 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800780e:	210d      	movs	r1, #13
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff fff3 	bl	80077fc <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	db25      	blt.n	800786e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	60fa      	str	r2, [r7, #12]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b3c      	cmp	r3, #60	@ 0x3c
 8007834:	dd12      	ble.n	800785c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f103 010c 	add.w	r1, r3, #12
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	f7ff f89d 	bl	8006984 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	429a      	cmp	r2, r3
 8007850:	d101      	bne.n	8007856 <putc_bfd+0x5a>
 8007852:	2300      	movs	r3, #0
 8007854:	e001      	b.n	800785a <putc_bfd+0x5e>
 8007856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800785a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	609a      	str	r2, [r3, #8]
 800786c:	e000      	b.n	8007870 <putc_bfd+0x74>
	if (i < 0) return;
 800786e:	bf00      	nop
}
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007876:	b590      	push	{r4, r7, lr}
 8007878:	b097      	sub	sp, #92	@ 0x5c
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800788c:	e009      	b.n	80078a2 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	f107 030c 	add.w	r3, r7, #12
 800789a:	4611      	mov	r1, r2
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ffad 	bl	80077fc <putc_bfd>
	while (*str)			/* Put the string */
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f1      	bne.n	800788e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	db15      	blt.n	80078dc <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	461c      	mov	r4, r3
 80078b6:	f107 0208 	add.w	r2, r7, #8
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	f103 010c 	add.w	r1, r3, #12
 80078c2:	4613      	mov	r3, r2
 80078c4:	4622      	mov	r2, r4
 80078c6:	f7ff f85d 	bl	8006984 <f_write>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d101      	bne.n	80078dc <f_puts+0x66>
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	e001      	b.n	80078e0 <f_puts+0x6a>
	return EOF;
 80078dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	375c      	adds	r7, #92	@ 0x5c
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd90      	pop	{r4, r7, pc}

080078e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	4613      	mov	r3, r2
 80078f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80078fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007900:	7a5b      	ldrb	r3, [r3, #9]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d831      	bhi.n	800796c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007908:	4b1b      	ldr	r3, [pc, #108]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 800790a:	7a5b      	ldrb	r3, [r3, #9]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	4b19      	ldr	r3, [pc, #100]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007912:	2100      	movs	r1, #0
 8007914:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007916:	4b18      	ldr	r3, [pc, #96]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007918:	7a5b      	ldrb	r3, [r3, #9]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4a16      	ldr	r2, [pc, #88]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007926:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007928:	7a5b      	ldrb	r3, [r3, #9]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	4b12      	ldr	r3, [pc, #72]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007930:	4413      	add	r3, r2
 8007932:	79fa      	ldrb	r2, [r7, #7]
 8007934:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007936:	4b10      	ldr	r3, [pc, #64]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007938:	7a5b      	ldrb	r3, [r3, #9]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	b2d1      	uxtb	r1, r2
 8007940:	4a0d      	ldr	r2, [pc, #52]	@ (8007978 <FATFS_LinkDriverEx+0x90>)
 8007942:	7251      	strb	r1, [r2, #9]
 8007944:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007946:	7dbb      	ldrb	r3, [r7, #22]
 8007948:	3330      	adds	r3, #48	@ 0x30
 800794a:	b2da      	uxtb	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3301      	adds	r3, #1
 8007954:	223a      	movs	r2, #58	@ 0x3a
 8007956:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3302      	adds	r3, #2
 800795c:	222f      	movs	r2, #47	@ 0x2f
 800795e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	3303      	adds	r3, #3
 8007964:	2200      	movs	r2, #0
 8007966:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	20000464 	.word	0x20000464

0800797c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007986:	2200      	movs	r2, #0
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff ffac 	bl	80078e8 <FATFS_LinkDriverEx>
 8007990:	4603      	mov	r3, r0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	6039      	str	r1, [r7, #0]
 80079a6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80079ac:	d802      	bhi.n	80079b4 <ff_convert+0x18>
		c = chr;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	81fb      	strh	r3, [r7, #14]
 80079b2:	e025      	b.n	8007a00 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80079ba:	88fb      	ldrh	r3, [r7, #6]
 80079bc:	2bff      	cmp	r3, #255	@ 0xff
 80079be:	d805      	bhi.n	80079cc <ff_convert+0x30>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	3b80      	subs	r3, #128	@ 0x80
 80079c4:	4a11      	ldr	r2, [pc, #68]	@ (8007a0c <ff_convert+0x70>)
 80079c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ca:	e000      	b.n	80079ce <ff_convert+0x32>
 80079cc:	2300      	movs	r3, #0
 80079ce:	81fb      	strh	r3, [r7, #14]
 80079d0:	e016      	b.n	8007a00 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80079d2:	2300      	movs	r3, #0
 80079d4:	81fb      	strh	r3, [r7, #14]
 80079d6:	e009      	b.n	80079ec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80079d8:	89fb      	ldrh	r3, [r7, #14]
 80079da:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <ff_convert+0x70>)
 80079dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e0:	88fa      	ldrh	r2, [r7, #6]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d006      	beq.n	80079f4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80079e6:	89fb      	ldrh	r3, [r7, #14]
 80079e8:	3301      	adds	r3, #1
 80079ea:	81fb      	strh	r3, [r7, #14]
 80079ec:	89fb      	ldrh	r3, [r7, #14]
 80079ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80079f0:	d9f2      	bls.n	80079d8 <ff_convert+0x3c>
 80079f2:	e000      	b.n	80079f6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80079f4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80079f6:	89fb      	ldrh	r3, [r7, #14]
 80079f8:	3380      	adds	r3, #128	@ 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a00:	89fb      	ldrh	r3, [r7, #14]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr
 8007a0c:	08008878 	.word	0x08008878

08007a10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e002      	b.n	8007a26 <ff_wtoupper+0x16>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	4a0f      	ldr	r2, [pc, #60]	@ (8007a64 <ff_wtoupper+0x54>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d006      	beq.n	8007a40 <ff_wtoupper+0x30>
 8007a32:	4a0c      	ldr	r2, [pc, #48]	@ (8007a64 <ff_wtoupper+0x54>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d1ef      	bne.n	8007a20 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007a40:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <ff_wtoupper+0x54>)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <ff_wtoupper+0x46>
 8007a4c:	4a06      	ldr	r2, [pc, #24]	@ (8007a68 <ff_wtoupper+0x58>)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	e000      	b.n	8007a58 <ff_wtoupper+0x48>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	08008978 	.word	0x08008978
 8007a68:	08008b58 	.word	0x08008b58

08007a6c <siprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a72:	b510      	push	{r4, lr}
 8007a74:	2400      	movs	r4, #0
 8007a76:	b09d      	sub	sp, #116	@ 0x74
 8007a78:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007a7a:	9002      	str	r0, [sp, #8]
 8007a7c:	9006      	str	r0, [sp, #24]
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	4809      	ldr	r0, [pc, #36]	@ (8007aa8 <siprintf+0x3c>)
 8007a84:	4909      	ldr	r1, [pc, #36]	@ (8007aac <siprintf+0x40>)
 8007a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8a:	9105      	str	r1, [sp, #20]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	a902      	add	r1, sp, #8
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a94:	f000 f992 	bl	8007dbc <_svfiprintf_r>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	701c      	strb	r4, [r3, #0]
 8007a9c:	b01d      	add	sp, #116	@ 0x74
 8007a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa2:	b003      	add	sp, #12
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000024 	.word	0x20000024
 8007aac:	ffff0208 	.word	0xffff0208

08007ab0 <memset>:
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4402      	add	r2, r0
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d100      	bne.n	8007aba <memset+0xa>
 8007ab8:	4770      	bx	lr
 8007aba:	f803 1b01 	strb.w	r1, [r3], #1
 8007abe:	e7f9      	b.n	8007ab4 <memset+0x4>

08007ac0 <__errno>:
 8007ac0:	4b01      	ldr	r3, [pc, #4]	@ (8007ac8 <__errno+0x8>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000024 	.word	0x20000024

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	2600      	movs	r6, #0
 8007ad0:	4d0c      	ldr	r5, [pc, #48]	@ (8007b04 <__libc_init_array+0x38>)
 8007ad2:	4c0d      	ldr	r4, [pc, #52]	@ (8007b08 <__libc_init_array+0x3c>)
 8007ad4:	1b64      	subs	r4, r4, r5
 8007ad6:	10a4      	asrs	r4, r4, #2
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	f000 fc76 	bl	80083cc <_init>
 8007ae0:	2600      	movs	r6, #0
 8007ae2:	4d0a      	ldr	r5, [pc, #40]	@ (8007b0c <__libc_init_array+0x40>)
 8007ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8007b10 <__libc_init_array+0x44>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	08008d74 	.word	0x08008d74
 8007b08:	08008d74 	.word	0x08008d74
 8007b0c:	08008d74 	.word	0x08008d74
 8007b10:	08008d78 	.word	0x08008d78

08007b14 <__retarget_lock_acquire_recursive>:
 8007b14:	4770      	bx	lr

08007b16 <__retarget_lock_release_recursive>:
 8007b16:	4770      	bx	lr

08007b18 <_free_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d040      	beq.n	8007ba2 <_free_r+0x8a>
 8007b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b24:	1f0c      	subs	r4, r1, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfb8      	it	lt
 8007b2a:	18e4      	addlt	r4, r4, r3
 8007b2c:	f000 f8de 	bl	8007cec <__malloc_lock>
 8007b30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba4 <_free_r+0x8c>)
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	b933      	cbnz	r3, 8007b44 <_free_r+0x2c>
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b40:	f000 b8da 	b.w	8007cf8 <__malloc_unlock>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d908      	bls.n	8007b5a <_free_r+0x42>
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	1821      	adds	r1, r4, r0
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	bf01      	itttt	eq
 8007b50:	6819      	ldreq	r1, [r3, #0]
 8007b52:	685b      	ldreq	r3, [r3, #4]
 8007b54:	1809      	addeq	r1, r1, r0
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	e7ed      	b.n	8007b36 <_free_r+0x1e>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b10b      	cbz	r3, 8007b64 <_free_r+0x4c>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x42>
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	1850      	adds	r0, r2, r1
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x6c>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	4401      	add	r1, r0
 8007b70:	1850      	adds	r0, r2, r1
 8007b72:	4283      	cmp	r3, r0
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	d1e0      	bne.n	8007b3a <_free_r+0x22>
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4408      	add	r0, r1
 8007b7e:	6010      	str	r0, [r2, #0]
 8007b80:	6053      	str	r3, [r2, #4]
 8007b82:	e7da      	b.n	8007b3a <_free_r+0x22>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x74>
 8007b86:	230c      	movs	r3, #12
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	e7d6      	b.n	8007b3a <_free_r+0x22>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	1821      	adds	r1, r4, r0
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf01      	itttt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	1809      	addeq	r1, r1, r0
 8007b9a:	6021      	streq	r1, [r4, #0]
 8007b9c:	6063      	str	r3, [r4, #4]
 8007b9e:	6054      	str	r4, [r2, #4]
 8007ba0:	e7cb      	b.n	8007b3a <_free_r+0x22>
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	200005b4 	.word	0x200005b4

08007ba8 <sbrk_aligned>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4e0f      	ldr	r6, [pc, #60]	@ (8007be8 <sbrk_aligned+0x40>)
 8007bac:	460c      	mov	r4, r1
 8007bae:	6831      	ldr	r1, [r6, #0]
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	b911      	cbnz	r1, 8007bba <sbrk_aligned+0x12>
 8007bb4:	f000 fba8 	bl	8008308 <_sbrk_r>
 8007bb8:	6030      	str	r0, [r6, #0]
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 fba3 	bl	8008308 <_sbrk_r>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d103      	bne.n	8007bce <sbrk_aligned+0x26>
 8007bc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bca:	4620      	mov	r0, r4
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
 8007bce:	1cc4      	adds	r4, r0, #3
 8007bd0:	f024 0403 	bic.w	r4, r4, #3
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d0f8      	beq.n	8007bca <sbrk_aligned+0x22>
 8007bd8:	1a21      	subs	r1, r4, r0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 fb94 	bl	8008308 <_sbrk_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d1f2      	bne.n	8007bca <sbrk_aligned+0x22>
 8007be4:	e7ef      	b.n	8007bc6 <sbrk_aligned+0x1e>
 8007be6:	bf00      	nop
 8007be8:	200005b0 	.word	0x200005b0

08007bec <_malloc_r>:
 8007bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	1ccd      	adds	r5, r1, #3
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	4606      	mov	r6, r0
 8007c02:	db01      	blt.n	8007c08 <_malloc_r+0x1c>
 8007c04:	42a9      	cmp	r1, r5
 8007c06:	d904      	bls.n	8007c12 <_malloc_r+0x26>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ce8 <_malloc_r+0xfc>
 8007c16:	f000 f869 	bl	8007cec <__malloc_lock>
 8007c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1e:	461c      	mov	r4, r3
 8007c20:	bb44      	cbnz	r4, 8007c74 <_malloc_r+0x88>
 8007c22:	4629      	mov	r1, r5
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7ff ffbf 	bl	8007ba8 <sbrk_aligned>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	d158      	bne.n	8007ce2 <_malloc_r+0xf6>
 8007c30:	f8d8 4000 	ldr.w	r4, [r8]
 8007c34:	4627      	mov	r7, r4
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	d143      	bne.n	8007cc2 <_malloc_r+0xd6>
 8007c3a:	2c00      	cmp	r4, #0
 8007c3c:	d04b      	beq.n	8007cd6 <_malloc_r+0xea>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	4639      	mov	r1, r7
 8007c42:	4630      	mov	r0, r6
 8007c44:	eb04 0903 	add.w	r9, r4, r3
 8007c48:	f000 fb5e 	bl	8008308 <_sbrk_r>
 8007c4c:	4581      	cmp	r9, r0
 8007c4e:	d142      	bne.n	8007cd6 <_malloc_r+0xea>
 8007c50:	6821      	ldr	r1, [r4, #0]
 8007c52:	4630      	mov	r0, r6
 8007c54:	1a6d      	subs	r5, r5, r1
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7ff ffa6 	bl	8007ba8 <sbrk_aligned>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d03a      	beq.n	8007cd6 <_malloc_r+0xea>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	442b      	add	r3, r5
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	bb62      	cbnz	r2, 8007cc8 <_malloc_r+0xdc>
 8007c6e:	f8c8 7000 	str.w	r7, [r8]
 8007c72:	e00f      	b.n	8007c94 <_malloc_r+0xa8>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	1b52      	subs	r2, r2, r5
 8007c78:	d420      	bmi.n	8007cbc <_malloc_r+0xd0>
 8007c7a:	2a0b      	cmp	r2, #11
 8007c7c:	d917      	bls.n	8007cae <_malloc_r+0xc2>
 8007c7e:	1961      	adds	r1, r4, r5
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	6025      	str	r5, [r4, #0]
 8007c84:	bf18      	it	ne
 8007c86:	6059      	strne	r1, [r3, #4]
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	bf08      	it	eq
 8007c8c:	f8c8 1000 	streq.w	r1, [r8]
 8007c90:	5162      	str	r2, [r4, r5]
 8007c92:	604b      	str	r3, [r1, #4]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 f82f 	bl	8007cf8 <__malloc_unlock>
 8007c9a:	f104 000b 	add.w	r0, r4, #11
 8007c9e:	1d23      	adds	r3, r4, #4
 8007ca0:	f020 0007 	bic.w	r0, r0, #7
 8007ca4:	1ac2      	subs	r2, r0, r3
 8007ca6:	bf1c      	itt	ne
 8007ca8:	1a1b      	subne	r3, r3, r0
 8007caa:	50a3      	strne	r3, [r4, r2]
 8007cac:	e7af      	b.n	8007c0e <_malloc_r+0x22>
 8007cae:	6862      	ldr	r2, [r4, #4]
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	bf0c      	ite	eq
 8007cb4:	f8c8 2000 	streq.w	r2, [r8]
 8007cb8:	605a      	strne	r2, [r3, #4]
 8007cba:	e7eb      	b.n	8007c94 <_malloc_r+0xa8>
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	6864      	ldr	r4, [r4, #4]
 8007cc0:	e7ae      	b.n	8007c20 <_malloc_r+0x34>
 8007cc2:	463c      	mov	r4, r7
 8007cc4:	687f      	ldr	r7, [r7, #4]
 8007cc6:	e7b6      	b.n	8007c36 <_malloc_r+0x4a>
 8007cc8:	461a      	mov	r2, r3
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	42a3      	cmp	r3, r4
 8007cce:	d1fb      	bne.n	8007cc8 <_malloc_r+0xdc>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6053      	str	r3, [r2, #4]
 8007cd4:	e7de      	b.n	8007c94 <_malloc_r+0xa8>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	4630      	mov	r0, r6
 8007cda:	6033      	str	r3, [r6, #0]
 8007cdc:	f000 f80c 	bl	8007cf8 <__malloc_unlock>
 8007ce0:	e794      	b.n	8007c0c <_malloc_r+0x20>
 8007ce2:	6005      	str	r5, [r0, #0]
 8007ce4:	e7d6      	b.n	8007c94 <_malloc_r+0xa8>
 8007ce6:	bf00      	nop
 8007ce8:	200005b4 	.word	0x200005b4

08007cec <__malloc_lock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	@ (8007cf4 <__malloc_lock+0x8>)
 8007cee:	f7ff bf11 	b.w	8007b14 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	200005ac 	.word	0x200005ac

08007cf8 <__malloc_unlock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	@ (8007d00 <__malloc_unlock+0x8>)
 8007cfa:	f7ff bf0c 	b.w	8007b16 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	200005ac 	.word	0x200005ac

08007d04 <__ssputs_r>:
 8007d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d08:	461f      	mov	r7, r3
 8007d0a:	688e      	ldr	r6, [r1, #8]
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	42be      	cmp	r6, r7
 8007d10:	460c      	mov	r4, r1
 8007d12:	4690      	mov	r8, r2
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	d82d      	bhi.n	8007d74 <__ssputs_r+0x70>
 8007d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d20:	d026      	beq.n	8007d70 <__ssputs_r+0x6c>
 8007d22:	6965      	ldr	r5, [r4, #20]
 8007d24:	6909      	ldr	r1, [r1, #16]
 8007d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d2a:	eba3 0901 	sub.w	r9, r3, r1
 8007d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d32:	1c7b      	adds	r3, r7, #1
 8007d34:	444b      	add	r3, r9
 8007d36:	106d      	asrs	r5, r5, #1
 8007d38:	429d      	cmp	r5, r3
 8007d3a:	bf38      	it	cc
 8007d3c:	461d      	movcc	r5, r3
 8007d3e:	0553      	lsls	r3, r2, #21
 8007d40:	d527      	bpl.n	8007d92 <__ssputs_r+0x8e>
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7ff ff52 	bl	8007bec <_malloc_r>
 8007d48:	4606      	mov	r6, r0
 8007d4a:	b360      	cbz	r0, 8007da6 <__ssputs_r+0xa2>
 8007d4c:	464a      	mov	r2, r9
 8007d4e:	6921      	ldr	r1, [r4, #16]
 8007d50:	f000 faf8 	bl	8008344 <memcpy>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5e:	81a3      	strh	r3, [r4, #12]
 8007d60:	6126      	str	r6, [r4, #16]
 8007d62:	444e      	add	r6, r9
 8007d64:	6026      	str	r6, [r4, #0]
 8007d66:	463e      	mov	r6, r7
 8007d68:	6165      	str	r5, [r4, #20]
 8007d6a:	eba5 0509 	sub.w	r5, r5, r9
 8007d6e:	60a5      	str	r5, [r4, #8]
 8007d70:	42be      	cmp	r6, r7
 8007d72:	d900      	bls.n	8007d76 <__ssputs_r+0x72>
 8007d74:	463e      	mov	r6, r7
 8007d76:	4632      	mov	r2, r6
 8007d78:	4641      	mov	r1, r8
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	f000 faaa 	bl	80082d4 <memmove>
 8007d80:	2000      	movs	r0, #0
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	1b9b      	subs	r3, r3, r6
 8007d86:	60a3      	str	r3, [r4, #8]
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	4433      	add	r3, r6
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d92:	462a      	mov	r2, r5
 8007d94:	f000 fae4 	bl	8008360 <_realloc_r>
 8007d98:	4606      	mov	r6, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d1e0      	bne.n	8007d60 <__ssputs_r+0x5c>
 8007d9e:	4650      	mov	r0, sl
 8007da0:	6921      	ldr	r1, [r4, #16]
 8007da2:	f7ff feb9 	bl	8007b18 <_free_r>
 8007da6:	230c      	movs	r3, #12
 8007da8:	f8ca 3000 	str.w	r3, [sl]
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	e7e9      	b.n	8007d8e <__ssputs_r+0x8a>
	...

08007dbc <_svfiprintf_r>:
 8007dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	4698      	mov	r8, r3
 8007dc2:	898b      	ldrh	r3, [r1, #12]
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	061b      	lsls	r3, r3, #24
 8007dc8:	460d      	mov	r5, r1
 8007dca:	4614      	mov	r4, r2
 8007dcc:	b09d      	sub	sp, #116	@ 0x74
 8007dce:	d510      	bpl.n	8007df2 <_svfiprintf_r+0x36>
 8007dd0:	690b      	ldr	r3, [r1, #16]
 8007dd2:	b973      	cbnz	r3, 8007df2 <_svfiprintf_r+0x36>
 8007dd4:	2140      	movs	r1, #64	@ 0x40
 8007dd6:	f7ff ff09 	bl	8007bec <_malloc_r>
 8007dda:	6028      	str	r0, [r5, #0]
 8007ddc:	6128      	str	r0, [r5, #16]
 8007dde:	b930      	cbnz	r0, 8007dee <_svfiprintf_r+0x32>
 8007de0:	230c      	movs	r3, #12
 8007de2:	603b      	str	r3, [r7, #0]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007de8:	b01d      	add	sp, #116	@ 0x74
 8007dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dee:	2340      	movs	r3, #64	@ 0x40
 8007df0:	616b      	str	r3, [r5, #20]
 8007df2:	2300      	movs	r3, #0
 8007df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df6:	2320      	movs	r3, #32
 8007df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dfc:	2330      	movs	r3, #48	@ 0x30
 8007dfe:	f04f 0901 	mov.w	r9, #1
 8007e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007fa0 <_svfiprintf_r+0x1e4>
 8007e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e0e:	4623      	mov	r3, r4
 8007e10:	469a      	mov	sl, r3
 8007e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e16:	b10a      	cbz	r2, 8007e1c <_svfiprintf_r+0x60>
 8007e18:	2a25      	cmp	r2, #37	@ 0x25
 8007e1a:	d1f9      	bne.n	8007e10 <_svfiprintf_r+0x54>
 8007e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e20:	d00b      	beq.n	8007e3a <_svfiprintf_r+0x7e>
 8007e22:	465b      	mov	r3, fp
 8007e24:	4622      	mov	r2, r4
 8007e26:	4629      	mov	r1, r5
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff ff6b 	bl	8007d04 <__ssputs_r>
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f000 80a7 	beq.w	8007f82 <_svfiprintf_r+0x1c6>
 8007e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e36:	445a      	add	r2, fp
 8007e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 809f 	beq.w	8007f82 <_svfiprintf_r+0x1c6>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4e:	f10a 0a01 	add.w	sl, sl, #1
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	9307      	str	r3, [sp, #28]
 8007e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e5c:	4654      	mov	r4, sl
 8007e5e:	2205      	movs	r2, #5
 8007e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e64:	484e      	ldr	r0, [pc, #312]	@ (8007fa0 <_svfiprintf_r+0x1e4>)
 8007e66:	f000 fa5f 	bl	8008328 <memchr>
 8007e6a:	9a04      	ldr	r2, [sp, #16]
 8007e6c:	b9d8      	cbnz	r0, 8007ea6 <_svfiprintf_r+0xea>
 8007e6e:	06d0      	lsls	r0, r2, #27
 8007e70:	bf44      	itt	mi
 8007e72:	2320      	movmi	r3, #32
 8007e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e78:	0711      	lsls	r1, r2, #28
 8007e7a:	bf44      	itt	mi
 8007e7c:	232b      	movmi	r3, #43	@ 0x2b
 8007e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e82:	f89a 3000 	ldrb.w	r3, [sl]
 8007e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e88:	d015      	beq.n	8007eb6 <_svfiprintf_r+0xfa>
 8007e8a:	4654      	mov	r4, sl
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f04f 0c0a 	mov.w	ip, #10
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	4621      	mov	r1, r4
 8007e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e9a:	3b30      	subs	r3, #48	@ 0x30
 8007e9c:	2b09      	cmp	r3, #9
 8007e9e:	d94b      	bls.n	8007f38 <_svfiprintf_r+0x17c>
 8007ea0:	b1b0      	cbz	r0, 8007ed0 <_svfiprintf_r+0x114>
 8007ea2:	9207      	str	r2, [sp, #28]
 8007ea4:	e014      	b.n	8007ed0 <_svfiprintf_r+0x114>
 8007ea6:	eba0 0308 	sub.w	r3, r0, r8
 8007eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	46a2      	mov	sl, r4
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	e7d2      	b.n	8007e5c <_svfiprintf_r+0xa0>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	1d19      	adds	r1, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	9103      	str	r1, [sp, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	bfbb      	ittet	lt
 8007ec2:	425b      	neglt	r3, r3
 8007ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec8:	9307      	strge	r3, [sp, #28]
 8007eca:	9307      	strlt	r3, [sp, #28]
 8007ecc:	bfb8      	it	lt
 8007ece:	9204      	strlt	r2, [sp, #16]
 8007ed0:	7823      	ldrb	r3, [r4, #0]
 8007ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ed4:	d10a      	bne.n	8007eec <_svfiprintf_r+0x130>
 8007ed6:	7863      	ldrb	r3, [r4, #1]
 8007ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eda:	d132      	bne.n	8007f42 <_svfiprintf_r+0x186>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	3402      	adds	r4, #2
 8007ee0:	1d1a      	adds	r2, r3, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	9203      	str	r2, [sp, #12]
 8007ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007fa4 <_svfiprintf_r+0x1e8>
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	7821      	ldrb	r1, [r4, #0]
 8007ef6:	f000 fa17 	bl	8008328 <memchr>
 8007efa:	b138      	cbz	r0, 8007f0c <_svfiprintf_r+0x150>
 8007efc:	2240      	movs	r2, #64	@ 0x40
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	eba0 000a 	sub.w	r0, r0, sl
 8007f04:	4082      	lsls	r2, r0
 8007f06:	4313      	orrs	r3, r2
 8007f08:	3401      	adds	r4, #1
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f10:	2206      	movs	r2, #6
 8007f12:	4825      	ldr	r0, [pc, #148]	@ (8007fa8 <_svfiprintf_r+0x1ec>)
 8007f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f18:	f000 fa06 	bl	8008328 <memchr>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d036      	beq.n	8007f8e <_svfiprintf_r+0x1d2>
 8007f20:	4b22      	ldr	r3, [pc, #136]	@ (8007fac <_svfiprintf_r+0x1f0>)
 8007f22:	bb1b      	cbnz	r3, 8007f6c <_svfiprintf_r+0x1b0>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	3307      	adds	r3, #7
 8007f28:	f023 0307 	bic.w	r3, r3, #7
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f32:	4433      	add	r3, r6
 8007f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f36:	e76a      	b.n	8007e0e <_svfiprintf_r+0x52>
 8007f38:	460c      	mov	r4, r1
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f40:	e7a8      	b.n	8007e94 <_svfiprintf_r+0xd8>
 8007f42:	2300      	movs	r3, #0
 8007f44:	f04f 0c0a 	mov.w	ip, #10
 8007f48:	4619      	mov	r1, r3
 8007f4a:	3401      	adds	r4, #1
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f54:	3a30      	subs	r2, #48	@ 0x30
 8007f56:	2a09      	cmp	r2, #9
 8007f58:	d903      	bls.n	8007f62 <_svfiprintf_r+0x1a6>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0c6      	beq.n	8007eec <_svfiprintf_r+0x130>
 8007f5e:	9105      	str	r1, [sp, #20]
 8007f60:	e7c4      	b.n	8007eec <_svfiprintf_r+0x130>
 8007f62:	4604      	mov	r4, r0
 8007f64:	2301      	movs	r3, #1
 8007f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f6a:	e7f0      	b.n	8007f4e <_svfiprintf_r+0x192>
 8007f6c:	ab03      	add	r3, sp, #12
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	462a      	mov	r2, r5
 8007f72:	4638      	mov	r0, r7
 8007f74:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <_svfiprintf_r+0x1f4>)
 8007f76:	a904      	add	r1, sp, #16
 8007f78:	f3af 8000 	nop.w
 8007f7c:	1c42      	adds	r2, r0, #1
 8007f7e:	4606      	mov	r6, r0
 8007f80:	d1d6      	bne.n	8007f30 <_svfiprintf_r+0x174>
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	065b      	lsls	r3, r3, #25
 8007f86:	f53f af2d 	bmi.w	8007de4 <_svfiprintf_r+0x28>
 8007f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f8c:	e72c      	b.n	8007de8 <_svfiprintf_r+0x2c>
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	462a      	mov	r2, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <_svfiprintf_r+0x1f4>)
 8007f98:	a904      	add	r1, sp, #16
 8007f9a:	f000 f87d 	bl	8008098 <_printf_i>
 8007f9e:	e7ed      	b.n	8007f7c <_svfiprintf_r+0x1c0>
 8007fa0:	08008d38 	.word	0x08008d38
 8007fa4:	08008d3e 	.word	0x08008d3e
 8007fa8:	08008d42 	.word	0x08008d42
 8007fac:	00000000 	.word	0x00000000
 8007fb0:	08007d05 	.word	0x08007d05

08007fb4 <_printf_common>:
 8007fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	4616      	mov	r6, r2
 8007fba:	4698      	mov	r8, r3
 8007fbc:	688a      	ldr	r2, [r1, #8]
 8007fbe:	690b      	ldr	r3, [r1, #16]
 8007fc0:	4607      	mov	r7, r0
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	bfb8      	it	lt
 8007fc6:	4613      	movlt	r3, r2
 8007fc8:	6033      	str	r3, [r6, #0]
 8007fca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fce:	460c      	mov	r4, r1
 8007fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fd4:	b10a      	cbz	r2, 8007fda <_printf_common+0x26>
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	6033      	str	r3, [r6, #0]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	0699      	lsls	r1, r3, #26
 8007fde:	bf42      	ittt	mi
 8007fe0:	6833      	ldrmi	r3, [r6, #0]
 8007fe2:	3302      	addmi	r3, #2
 8007fe4:	6033      	strmi	r3, [r6, #0]
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	f015 0506 	ands.w	r5, r5, #6
 8007fec:	d106      	bne.n	8007ffc <_printf_common+0x48>
 8007fee:	f104 0a19 	add.w	sl, r4, #25
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	6832      	ldr	r2, [r6, #0]
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dc2b      	bgt.n	8008054 <_printf_common+0xa0>
 8007ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008000:	6822      	ldr	r2, [r4, #0]
 8008002:	3b00      	subs	r3, #0
 8008004:	bf18      	it	ne
 8008006:	2301      	movne	r3, #1
 8008008:	0692      	lsls	r2, r2, #26
 800800a:	d430      	bmi.n	800806e <_printf_common+0xba>
 800800c:	4641      	mov	r1, r8
 800800e:	4638      	mov	r0, r7
 8008010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008014:	47c8      	blx	r9
 8008016:	3001      	adds	r0, #1
 8008018:	d023      	beq.n	8008062 <_printf_common+0xae>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	f003 0306 	and.w	r3, r3, #6
 8008022:	2b04      	cmp	r3, #4
 8008024:	bf14      	ite	ne
 8008026:	2500      	movne	r5, #0
 8008028:	6833      	ldreq	r3, [r6, #0]
 800802a:	f04f 0600 	mov.w	r6, #0
 800802e:	bf08      	it	eq
 8008030:	68e5      	ldreq	r5, [r4, #12]
 8008032:	f104 041a 	add.w	r4, r4, #26
 8008036:	bf08      	it	eq
 8008038:	1aed      	subeq	r5, r5, r3
 800803a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800803e:	bf08      	it	eq
 8008040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008044:	4293      	cmp	r3, r2
 8008046:	bfc4      	itt	gt
 8008048:	1a9b      	subgt	r3, r3, r2
 800804a:	18ed      	addgt	r5, r5, r3
 800804c:	42b5      	cmp	r5, r6
 800804e:	d11a      	bne.n	8008086 <_printf_common+0xd2>
 8008050:	2000      	movs	r0, #0
 8008052:	e008      	b.n	8008066 <_printf_common+0xb2>
 8008054:	2301      	movs	r3, #1
 8008056:	4652      	mov	r2, sl
 8008058:	4641      	mov	r1, r8
 800805a:	4638      	mov	r0, r7
 800805c:	47c8      	blx	r9
 800805e:	3001      	adds	r0, #1
 8008060:	d103      	bne.n	800806a <_printf_common+0xb6>
 8008062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806a:	3501      	adds	r5, #1
 800806c:	e7c1      	b.n	8007ff2 <_printf_common+0x3e>
 800806e:	2030      	movs	r0, #48	@ 0x30
 8008070:	18e1      	adds	r1, r4, r3
 8008072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800807c:	4422      	add	r2, r4
 800807e:	3302      	adds	r3, #2
 8008080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008084:	e7c2      	b.n	800800c <_printf_common+0x58>
 8008086:	2301      	movs	r3, #1
 8008088:	4622      	mov	r2, r4
 800808a:	4641      	mov	r1, r8
 800808c:	4638      	mov	r0, r7
 800808e:	47c8      	blx	r9
 8008090:	3001      	adds	r0, #1
 8008092:	d0e6      	beq.n	8008062 <_printf_common+0xae>
 8008094:	3601      	adds	r6, #1
 8008096:	e7d9      	b.n	800804c <_printf_common+0x98>

08008098 <_printf_i>:
 8008098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	7e0f      	ldrb	r7, [r1, #24]
 800809e:	4691      	mov	r9, r2
 80080a0:	2f78      	cmp	r7, #120	@ 0x78
 80080a2:	4680      	mov	r8, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	469a      	mov	sl, r3
 80080a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ae:	d807      	bhi.n	80080c0 <_printf_i+0x28>
 80080b0:	2f62      	cmp	r7, #98	@ 0x62
 80080b2:	d80a      	bhi.n	80080ca <_printf_i+0x32>
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	f000 80d1 	beq.w	800825c <_printf_i+0x1c4>
 80080ba:	2f58      	cmp	r7, #88	@ 0x58
 80080bc:	f000 80b8 	beq.w	8008230 <_printf_i+0x198>
 80080c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080c8:	e03a      	b.n	8008140 <_printf_i+0xa8>
 80080ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080ce:	2b15      	cmp	r3, #21
 80080d0:	d8f6      	bhi.n	80080c0 <_printf_i+0x28>
 80080d2:	a101      	add	r1, pc, #4	@ (adr r1, 80080d8 <_printf_i+0x40>)
 80080d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008145 	.word	0x08008145
 80080e0:	080080c1 	.word	0x080080c1
 80080e4:	080080c1 	.word	0x080080c1
 80080e8:	080080c1 	.word	0x080080c1
 80080ec:	080080c1 	.word	0x080080c1
 80080f0:	08008145 	.word	0x08008145
 80080f4:	080080c1 	.word	0x080080c1
 80080f8:	080080c1 	.word	0x080080c1
 80080fc:	080080c1 	.word	0x080080c1
 8008100:	080080c1 	.word	0x080080c1
 8008104:	08008243 	.word	0x08008243
 8008108:	0800816f 	.word	0x0800816f
 800810c:	080081fd 	.word	0x080081fd
 8008110:	080080c1 	.word	0x080080c1
 8008114:	080080c1 	.word	0x080080c1
 8008118:	08008265 	.word	0x08008265
 800811c:	080080c1 	.word	0x080080c1
 8008120:	0800816f 	.word	0x0800816f
 8008124:	080080c1 	.word	0x080080c1
 8008128:	080080c1 	.word	0x080080c1
 800812c:	08008205 	.word	0x08008205
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6032      	str	r2, [r6, #0]
 8008138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800813c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008140:	2301      	movs	r3, #1
 8008142:	e09c      	b.n	800827e <_printf_i+0x1e6>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	6031      	str	r1, [r6, #0]
 800814c:	0606      	lsls	r6, r0, #24
 800814e:	d501      	bpl.n	8008154 <_printf_i+0xbc>
 8008150:	681d      	ldr	r5, [r3, #0]
 8008152:	e003      	b.n	800815c <_printf_i+0xc4>
 8008154:	0645      	lsls	r5, r0, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0xb8>
 8008158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800815c:	2d00      	cmp	r5, #0
 800815e:	da03      	bge.n	8008168 <_printf_i+0xd0>
 8008160:	232d      	movs	r3, #45	@ 0x2d
 8008162:	426d      	negs	r5, r5
 8008164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008168:	230a      	movs	r3, #10
 800816a:	4858      	ldr	r0, [pc, #352]	@ (80082cc <_printf_i+0x234>)
 800816c:	e011      	b.n	8008192 <_printf_i+0xfa>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	6833      	ldr	r3, [r6, #0]
 8008172:	0608      	lsls	r0, r1, #24
 8008174:	f853 5b04 	ldr.w	r5, [r3], #4
 8008178:	d402      	bmi.n	8008180 <_printf_i+0xe8>
 800817a:	0649      	lsls	r1, r1, #25
 800817c:	bf48      	it	mi
 800817e:	b2ad      	uxthmi	r5, r5
 8008180:	2f6f      	cmp	r7, #111	@ 0x6f
 8008182:	6033      	str	r3, [r6, #0]
 8008184:	bf14      	ite	ne
 8008186:	230a      	movne	r3, #10
 8008188:	2308      	moveq	r3, #8
 800818a:	4850      	ldr	r0, [pc, #320]	@ (80082cc <_printf_i+0x234>)
 800818c:	2100      	movs	r1, #0
 800818e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008192:	6866      	ldr	r6, [r4, #4]
 8008194:	2e00      	cmp	r6, #0
 8008196:	60a6      	str	r6, [r4, #8]
 8008198:	db05      	blt.n	80081a6 <_printf_i+0x10e>
 800819a:	6821      	ldr	r1, [r4, #0]
 800819c:	432e      	orrs	r6, r5
 800819e:	f021 0104 	bic.w	r1, r1, #4
 80081a2:	6021      	str	r1, [r4, #0]
 80081a4:	d04b      	beq.n	800823e <_printf_i+0x1a6>
 80081a6:	4616      	mov	r6, r2
 80081a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ac:	fb03 5711 	mls	r7, r3, r1, r5
 80081b0:	5dc7      	ldrb	r7, [r0, r7]
 80081b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081b6:	462f      	mov	r7, r5
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	460d      	mov	r5, r1
 80081bc:	d9f4      	bls.n	80081a8 <_printf_i+0x110>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d10b      	bne.n	80081da <_printf_i+0x142>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07df      	lsls	r7, r3, #31
 80081c6:	d508      	bpl.n	80081da <_printf_i+0x142>
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	6861      	ldr	r1, [r4, #4]
 80081cc:	4299      	cmp	r1, r3
 80081ce:	bfde      	ittt	le
 80081d0:	2330      	movle	r3, #48	@ 0x30
 80081d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081d6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80081da:	1b92      	subs	r2, r2, r6
 80081dc:	6122      	str	r2, [r4, #16]
 80081de:	464b      	mov	r3, r9
 80081e0:	4621      	mov	r1, r4
 80081e2:	4640      	mov	r0, r8
 80081e4:	f8cd a000 	str.w	sl, [sp]
 80081e8:	aa03      	add	r2, sp, #12
 80081ea:	f7ff fee3 	bl	8007fb4 <_printf_common>
 80081ee:	3001      	adds	r0, #1
 80081f0:	d14a      	bne.n	8008288 <_printf_i+0x1f0>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081f6:	b004      	add	sp, #16
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	f043 0320 	orr.w	r3, r3, #32
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	2778      	movs	r7, #120	@ 0x78
 8008206:	4832      	ldr	r0, [pc, #200]	@ (80082d0 <_printf_i+0x238>)
 8008208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6831      	ldr	r1, [r6, #0]
 8008210:	061f      	lsls	r7, r3, #24
 8008212:	f851 5b04 	ldr.w	r5, [r1], #4
 8008216:	d402      	bmi.n	800821e <_printf_i+0x186>
 8008218:	065f      	lsls	r7, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2ad      	uxthmi	r5, r5
 800821e:	6031      	str	r1, [r6, #0]
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	bf44      	itt	mi
 8008224:	f043 0320 	orrmi.w	r3, r3, #32
 8008228:	6023      	strmi	r3, [r4, #0]
 800822a:	b11d      	cbz	r5, 8008234 <_printf_i+0x19c>
 800822c:	2310      	movs	r3, #16
 800822e:	e7ad      	b.n	800818c <_printf_i+0xf4>
 8008230:	4826      	ldr	r0, [pc, #152]	@ (80082cc <_printf_i+0x234>)
 8008232:	e7e9      	b.n	8008208 <_printf_i+0x170>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f023 0320 	bic.w	r3, r3, #32
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	e7f6      	b.n	800822c <_printf_i+0x194>
 800823e:	4616      	mov	r6, r2
 8008240:	e7bd      	b.n	80081be <_printf_i+0x126>
 8008242:	6833      	ldr	r3, [r6, #0]
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	1d18      	adds	r0, r3, #4
 8008248:	6961      	ldr	r1, [r4, #20]
 800824a:	6030      	str	r0, [r6, #0]
 800824c:	062e      	lsls	r6, r5, #24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	d501      	bpl.n	8008256 <_printf_i+0x1be>
 8008252:	6019      	str	r1, [r3, #0]
 8008254:	e002      	b.n	800825c <_printf_i+0x1c4>
 8008256:	0668      	lsls	r0, r5, #25
 8008258:	d5fb      	bpl.n	8008252 <_printf_i+0x1ba>
 800825a:	8019      	strh	r1, [r3, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	4616      	mov	r6, r2
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	e7bc      	b.n	80081de <_printf_i+0x146>
 8008264:	6833      	ldr	r3, [r6, #0]
 8008266:	2100      	movs	r1, #0
 8008268:	1d1a      	adds	r2, r3, #4
 800826a:	6032      	str	r2, [r6, #0]
 800826c:	681e      	ldr	r6, [r3, #0]
 800826e:	6862      	ldr	r2, [r4, #4]
 8008270:	4630      	mov	r0, r6
 8008272:	f000 f859 	bl	8008328 <memchr>
 8008276:	b108      	cbz	r0, 800827c <_printf_i+0x1e4>
 8008278:	1b80      	subs	r0, r0, r6
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008286:	e7aa      	b.n	80081de <_printf_i+0x146>
 8008288:	4632      	mov	r2, r6
 800828a:	4649      	mov	r1, r9
 800828c:	4640      	mov	r0, r8
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	47d0      	blx	sl
 8008292:	3001      	adds	r0, #1
 8008294:	d0ad      	beq.n	80081f2 <_printf_i+0x15a>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	079b      	lsls	r3, r3, #30
 800829a:	d413      	bmi.n	80082c4 <_printf_i+0x22c>
 800829c:	68e0      	ldr	r0, [r4, #12]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	4298      	cmp	r0, r3
 80082a2:	bfb8      	it	lt
 80082a4:	4618      	movlt	r0, r3
 80082a6:	e7a6      	b.n	80081f6 <_printf_i+0x15e>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4632      	mov	r2, r6
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	47d0      	blx	sl
 80082b2:	3001      	adds	r0, #1
 80082b4:	d09d      	beq.n	80081f2 <_printf_i+0x15a>
 80082b6:	3501      	adds	r5, #1
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	1a5b      	subs	r3, r3, r1
 80082be:	42ab      	cmp	r3, r5
 80082c0:	dcf2      	bgt.n	80082a8 <_printf_i+0x210>
 80082c2:	e7eb      	b.n	800829c <_printf_i+0x204>
 80082c4:	2500      	movs	r5, #0
 80082c6:	f104 0619 	add.w	r6, r4, #25
 80082ca:	e7f5      	b.n	80082b8 <_printf_i+0x220>
 80082cc:	08008d49 	.word	0x08008d49
 80082d0:	08008d5a 	.word	0x08008d5a

080082d4 <memmove>:
 80082d4:	4288      	cmp	r0, r1
 80082d6:	b510      	push	{r4, lr}
 80082d8:	eb01 0402 	add.w	r4, r1, r2
 80082dc:	d902      	bls.n	80082e4 <memmove+0x10>
 80082de:	4284      	cmp	r4, r0
 80082e0:	4623      	mov	r3, r4
 80082e2:	d807      	bhi.n	80082f4 <memmove+0x20>
 80082e4:	1e43      	subs	r3, r0, #1
 80082e6:	42a1      	cmp	r1, r4
 80082e8:	d008      	beq.n	80082fc <memmove+0x28>
 80082ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082f2:	e7f8      	b.n	80082e6 <memmove+0x12>
 80082f4:	4601      	mov	r1, r0
 80082f6:	4402      	add	r2, r0
 80082f8:	428a      	cmp	r2, r1
 80082fa:	d100      	bne.n	80082fe <memmove+0x2a>
 80082fc:	bd10      	pop	{r4, pc}
 80082fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008306:	e7f7      	b.n	80082f8 <memmove+0x24>

08008308 <_sbrk_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	2300      	movs	r3, #0
 800830c:	4d05      	ldr	r5, [pc, #20]	@ (8008324 <_sbrk_r+0x1c>)
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f8 fe90 	bl	8001038 <_sbrk>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_sbrk_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_sbrk_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200005a8 	.word	0x200005a8

08008328 <memchr>:
 8008328:	4603      	mov	r3, r0
 800832a:	b510      	push	{r4, lr}
 800832c:	b2c9      	uxtb	r1, r1
 800832e:	4402      	add	r2, r0
 8008330:	4293      	cmp	r3, r2
 8008332:	4618      	mov	r0, r3
 8008334:	d101      	bne.n	800833a <memchr+0x12>
 8008336:	2000      	movs	r0, #0
 8008338:	e003      	b.n	8008342 <memchr+0x1a>
 800833a:	7804      	ldrb	r4, [r0, #0]
 800833c:	3301      	adds	r3, #1
 800833e:	428c      	cmp	r4, r1
 8008340:	d1f6      	bne.n	8008330 <memchr+0x8>
 8008342:	bd10      	pop	{r4, pc}

08008344 <memcpy>:
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800834c:	d100      	bne.n	8008350 <memcpy+0xc>
 800834e:	4770      	bx	lr
 8008350:	b510      	push	{r4, lr}
 8008352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008356:	4291      	cmp	r1, r2
 8008358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800835c:	d1f9      	bne.n	8008352 <memcpy+0xe>
 800835e:	bd10      	pop	{r4, pc}

08008360 <_realloc_r>:
 8008360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008364:	4607      	mov	r7, r0
 8008366:	4614      	mov	r4, r2
 8008368:	460d      	mov	r5, r1
 800836a:	b921      	cbnz	r1, 8008376 <_realloc_r+0x16>
 800836c:	4611      	mov	r1, r2
 800836e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008372:	f7ff bc3b 	b.w	8007bec <_malloc_r>
 8008376:	b92a      	cbnz	r2, 8008384 <_realloc_r+0x24>
 8008378:	f7ff fbce 	bl	8007b18 <_free_r>
 800837c:	4625      	mov	r5, r4
 800837e:	4628      	mov	r0, r5
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	f000 f81a 	bl	80083bc <_malloc_usable_size_r>
 8008388:	4284      	cmp	r4, r0
 800838a:	4606      	mov	r6, r0
 800838c:	d802      	bhi.n	8008394 <_realloc_r+0x34>
 800838e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008392:	d8f4      	bhi.n	800837e <_realloc_r+0x1e>
 8008394:	4621      	mov	r1, r4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff fc28 	bl	8007bec <_malloc_r>
 800839c:	4680      	mov	r8, r0
 800839e:	b908      	cbnz	r0, 80083a4 <_realloc_r+0x44>
 80083a0:	4645      	mov	r5, r8
 80083a2:	e7ec      	b.n	800837e <_realloc_r+0x1e>
 80083a4:	42b4      	cmp	r4, r6
 80083a6:	4622      	mov	r2, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	bf28      	it	cs
 80083ac:	4632      	movcs	r2, r6
 80083ae:	f7ff ffc9 	bl	8008344 <memcpy>
 80083b2:	4629      	mov	r1, r5
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff fbaf 	bl	8007b18 <_free_r>
 80083ba:	e7f1      	b.n	80083a0 <_realloc_r+0x40>

080083bc <_malloc_usable_size_r>:
 80083bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c0:	1f18      	subs	r0, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfbc      	itt	lt
 80083c6:	580b      	ldrlt	r3, [r1, r0]
 80083c8:	18c0      	addlt	r0, r0, r3
 80083ca:	4770      	bx	lr

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
