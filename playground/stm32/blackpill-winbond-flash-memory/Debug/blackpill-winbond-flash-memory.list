
blackpill-winbond-flash-memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800391c  0800391c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800391c  0800391c  0000491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003924  08003924  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003924  08003924  00004924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800392c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000005c  08003988  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003988  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096af  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001854  00000000  00000000  0000e73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000068b  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b81  00000000  00000000  00010eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000994e  00000000  00000000  00026a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cd1  00000000  00000000  0003037a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b704b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  000b7090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000b9818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038a4 	.word	0x080038a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080038a4 	.word	0x080038a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <external_flash_delay>:
#include "main.h"
#include "W25Qxx.h"

void external_flash_delay(uint32_t time) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 fbd5 	bl	8000d74 <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <cs_low>:

void cs_low(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <cs_low+0x14>)
 80005e0:	f000 fe56 	bl	8001290 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020400 	.word	0x40020400

080005ec <cs_high>:

void cs_high(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f6:	4802      	ldr	r0, [pc, #8]	@ (8000600 <cs_high+0x14>)
 80005f8:	f000 fe4a 	bl	8001290 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40020400 	.word	0x40020400

08000604 <external_flash_spi_write>:

void external_flash_spi_write(uint8_t* data, uint8_t len) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	b29a      	uxth	r2, r3
 8000614:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <external_flash_spi_write+0x24>)
 800061c:	f001 fb4d 	bl	8001cba <HAL_SPI_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000078 	.word	0x20000078

0800062c <external_flash_spi_read>:

void external_flash_spi_read(uint8_t* data, uint8_t len) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000640:	6879      	ldr	r1, [r7, #4]
 8000642:	4803      	ldr	r0, [pc, #12]	@ (8000650 <external_flash_spi_read+0x24>)
 8000644:	f001 fc7d 	bl	8001f42 <HAL_SPI_Receive>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000078 	.word	0x20000078

08000654 <external_flash_reset>:

void external_flash_reset(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	uint8_t tData[2];

	tData[0] = 0x66; /* enable reset */
 800065a:	2366      	movs	r3, #102	@ 0x66
 800065c:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99; /* reset */
 800065e:	2399      	movs	r3, #153	@ 0x99
 8000660:	717b      	strb	r3, [r7, #5]

	cs_low();
 8000662:	f7ff ffb7 	bl	80005d4 <cs_low>
	external_flash_spi_write(tData, 2); /**/
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffca 	bl	8000604 <external_flash_spi_write>
	cs_high();
 8000670:	f7ff ffbc 	bl	80005ec <cs_high>
	external_flash_delay(100);
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f7ff ffa1 	bl	80005bc <external_flash_delay>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <external_flash_read_ID>:

uint32_t external_flash_read_ID(void) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
	uint8_t tData = 0x9f;
 8000688:	239f      	movs	r3, #159	@ 0x9f
 800068a:	71fb      	strb	r3, [r7, #7]
	uint8_t rData[3]; /* MFN_ID:MEM_ID:CAPACITY_ID */

	cs_low();				/* activate memory */
 800068c:	f7ff ffa2 	bl	80005d4 <cs_low>
	external_flash_spi_write(&tData, 1);
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	2101      	movs	r1, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffb5 	bl	8000604 <external_flash_spi_write>
	external_flash_spi_read(rData, 3);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffc4 	bl	800062c <external_flash_spi_read>
	cs_high();
 80006a4:	f7ff ffa2 	bl	80005ec <cs_high>

	return ((rData[0] << 16) | (rData[1] << 8) | rData[2]); /* MFN_ID:MEM_ID:CAPACITY_ID */
 80006a8:	793b      	ldrb	r3, [r7, #4]
 80006aa:	041a      	lsls	r2, r3, #16
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	4313      	orrs	r3, r2
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	4313      	orrs	r3, r2
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fae3 	bl	8000c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f833 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f8f1 	bl	80008b4 <MX_GPIO_Init>
  MX_SPI3_Init();
 80006d2:	f000 f88f 	bl	80007f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80006d6:	f000 f8c3 	bl	8000860 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* get the flash memory ID */
  external_flash_reset();
 80006da:	f7ff ffbb 	bl	8000654 <external_flash_reset>
  flash_id = external_flash_read_ID();
 80006de:	f7ff ffd0 	bl	8000682 <external_flash_read_ID>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000724 <main+0x64>)
 80006e6:	6013      	str	r3, [r2, #0]

  char msg[64];
  sprintf(msg, "Flash ID: %02X\r\n", flash_id);
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <main+0x64>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	463b      	mov	r3, r7
 80006ee:	490e      	ldr	r1, [pc, #56]	@ (8000728 <main+0x68>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fc37 	bl	8002f64 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 500);
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd71 	bl	80001e0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	4639      	mov	r1, r7
 8000704:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <main+0x6c>)
 800070a:	f002 f86f 	bl	80027ec <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800070e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <main+0x70>)
 8000714:	f000 fdd5 	bl	80012c2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000718:	20c8      	movs	r0, #200	@ 0xc8
 800071a:	f000 fb2b 	bl	8000d74 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800071e:	bf00      	nop
 8000720:	e7f5      	b.n	800070e <main+0x4e>
 8000722:	bf00      	nop
 8000724:	20000118 	.word	0x20000118
 8000728:	080038bc 	.word	0x080038bc
 800072c:	200000d0 	.word	0x200000d0
 8000730:	40020800 	.word	0x40020800

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	@ 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fc30 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <SystemClock_Config+0xb8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <SystemClock_Config+0xb8>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <SystemClock_Config+0xb8>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <SystemClock_Config+0xbc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000780:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <SystemClock_Config+0xbc>)
 8000782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <SystemClock_Config+0xbc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fda5 	bl	80012f8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007b4:	f000 f90c 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f808 	bl	80017e8 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007de:	f000 f8f7 	bl	80009d0 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_SPI3_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_SPI3_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI3_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000828:	2210      	movs	r2, #16
 800082a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_SPI3_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_SPI3_Init+0x64>)
 8000846:	f001 f9af 	bl	8001ba8 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f8be 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f001 ff58 	bl	800274c <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f895 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d0 	.word	0x200000d0
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3c      	ldr	r3, [pc, #240]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a3b      	ldr	r2, [pc, #236]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b39      	ldr	r3, [pc, #228]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b35      	ldr	r3, [pc, #212]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a34      	ldr	r2, [pc, #208]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a2d      	ldr	r2, [pc, #180]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a26      	ldr	r2, [pc, #152]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <MX_GPIO_Init+0x10c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	4820      	ldr	r0, [pc, #128]	@ (80009c4 <MX_GPIO_Init+0x110>)
 8000942:	f000 fca5 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800094c:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <MX_GPIO_Init+0x114>)
 800094e:	f000 fc9f 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000958:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_GPIO_Init+0x118>)
 800095a:	f000 fc99 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4813      	ldr	r0, [pc, #76]	@ (80009c4 <MX_GPIO_Init+0x110>)
 8000978:	f000 fb06 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800097c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_GPIO_Init+0x114>)
 8000996:	f000 faf7 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800099a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <MX_GPIO_Init+0x118>)
 80009b4:	f000 fae8 	bl	8000f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40020000 	.word	0x40020000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a86:	2338      	movs	r3, #56	@ 0x38
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a96:	2306      	movs	r3, #6
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	f000 fa71 	bl	8000f88 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40003c00 	.word	0x40003c00
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400

08000abc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b34:	f000 fa28 	bl	8000f88 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f8c7 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 f9ec 	bl	8002fb8 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20010000 	.word	0x20010000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	20000270 	.word	0x20000270

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c40:	f7ff ffea 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f002 f9ab 	bl	8002fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fd27 	bl	80006c0 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c80:	0800392c 	.word	0x0800392c
  ldr r2, =_sbss
 8000c84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c88:	2000026c 	.word	0x2000026c

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <HAL_Init+0x40>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_Init+0x40>)
 8000ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <HAL_Init+0x40>)
 8000cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb8:	2003      	movs	r0, #3
 8000cba:	f000 f931 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f808 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc4:	f7ff fe8a 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f93b 	bl	8000f6e <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d10:	f000 f911 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000120 	.word	0x20000120

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	@ (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000120 	.word	0x20000120

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff47 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff5c 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff8e 	bl	8000e74 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffb0 	bl	8000edc <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e159      	b.n	8001258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8148 	bne.w	8001252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a56      	ldr	r2, [pc, #344]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b54      	ldr	r3, [pc, #336]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <HAL_GPIO_Init+0x2ec>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <HAL_GPIO_Init+0x2f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x202>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	@ (800127c <HAL_GPIO_Init+0x2f4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1fe>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <HAL_GPIO_Init+0x2f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1fa>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <HAL_GPIO_Init+0x2fc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1f6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	@ (8001288 <HAL_GPIO_Init+0x300>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1f2>
 8001176:	2304      	movs	r3, #4
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117a:	2307      	movs	r3, #7
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x204>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	@ (8001274 <HAL_GPIO_Init+0x2ec>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_GPIO_Init+0x304>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_GPIO_Init+0x304>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f aea2 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	041a      	lsls	r2, r3, #16
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43d9      	mvns	r1, r3
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	400b      	ands	r3, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e267      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d075      	beq.n	8001402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001316:	4b88      	ldr	r3, [pc, #544]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b85      	ldr	r3, [pc, #532]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800132a:	2b08      	cmp	r3, #8
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b82      	ldr	r3, [pc, #520]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800133a:	d10b      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4b7e      	ldr	r3, [pc, #504]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d157      	bne.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e242      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x74>
 800135e:	4b76      	ldr	r3, [pc, #472]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6f      	ldr	r2, [pc, #444]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6d      	ldr	r3, [pc, #436]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6c      	ldr	r2, [pc, #432]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 8001390:	4b69      	ldr	r3, [pc, #420]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a68      	ldr	r2, [pc, #416]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b66      	ldr	r3, [pc, #408]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a65      	ldr	r2, [pc, #404]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcd4 	bl	8000d5c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcd0 	bl	8000d5c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e207      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fcc0 	bl	8000d5c <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fcbc 	bl	8000d5c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	@ 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1f3      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800140e:	4b4a      	ldr	r3, [pc, #296]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c7      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4937      	ldr	r1, [pc, #220]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_RCC_OscConfig+0x244>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fc75 	bl	8000d5c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc71 	bl	8000d5c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a8      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4925      	ldr	r1, [pc, #148]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <HAL_RCC_OscConfig+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc54 	bl	8000d5c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc50 	bl	8000d5c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e187      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d016      	beq.n	8001518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_RCC_OscConfig+0x248>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc34 	bl	8000d5c <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc30 	bl	8000d5c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e167      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_RCC_OscConfig+0x240>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x200>
 8001516:	e01b      	b.n	8001550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_RCC_OscConfig+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc1d 	bl	8000d5c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e00e      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fc19 	bl	8000d5c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d907      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e150      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ea      	bne.n	8001526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8097 	beq.w	800168c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b81      	ldr	r3, [pc, #516]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b7d      	ldr	r3, [pc, #500]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a7c      	ldr	r2, [pc, #496]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b77      	ldr	r3, [pc, #476]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b74      	ldr	r3, [pc, #464]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a73      	ldr	r2, [pc, #460]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fbd9 	bl	8000d5c <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fbd5 	bl	8000d5c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_OscConfig+0x474>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
 80015d4:	4b64      	ldr	r3, [pc, #400]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a63      	ldr	r2, [pc, #396]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x30c>
 80015ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	@ 0x70
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 8001604:	4b58      	ldr	r3, [pc, #352]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a57      	ldr	r2, [pc, #348]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001610:	4b55      	ldr	r3, [pc, #340]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001614:	4a54      	ldr	r2, [pc, #336]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb9a 	bl	8000d5c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fb96 	bl	8000d5c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0cb      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b49      	ldr	r3, [pc, #292]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ee      	beq.n	800162c <HAL_RCC_OscConfig+0x334>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb84 	bl	8000d5c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fb80 	bl	8000d5c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b5      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	4a38      	ldr	r2, [pc, #224]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a1 	beq.w	80017d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001696:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d05c      	beq.n	800175c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d141      	bne.n	800172e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb54 	bl	8000d5c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb50 	bl	8000d5c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e087      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	491b      	ldr	r1, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb29 	bl	8000d5c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb25 	bl	8000d5c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e05c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x416>
 800172c:	e054      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb12 	bl	8000d5c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fb0e 	bl	8000d5c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e045      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff fa40 	bl	8000d5c <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff fa3c 	bl	8000d5c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a0 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	080038d0 	.word	0x080038d0
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b090      	sub	sp, #64	@ 0x40
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4b59      	ldr	r3, [pc, #356]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	f200 80a1 	bhi.w	8001b20 <HAL_RCC_GetSysClockFreq+0x16c>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x3a>
 80019e6:	e09b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019ec:	e09b      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b53      	ldr	r3, [pc, #332]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 80019f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019f2:	e098      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d028      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4b47      	ldr	r3, [pc, #284]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a20:	fb03 f201 	mul.w	r2, r3, r1
 8001a24:	2300      	movs	r3, #0
 8001a26:	fb00 f303 	mul.w	r3, r0, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a43      	ldr	r2, [pc, #268]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a2e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a34:	460a      	mov	r2, r1
 8001a36:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a3a:	4413      	add	r3, r2
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a40:	2200      	movs	r2, #0
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	61fa      	str	r2, [r7, #28]
 8001a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a4e:	f7fe fc1f 	bl	8000290 <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4613      	mov	r3, r2
 8001a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a5a:	e053      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	617a      	str	r2, [r7, #20]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a6e:	f04f 0b00 	mov.w	fp, #0
 8001a72:	4652      	mov	r2, sl
 8001a74:	465b      	mov	r3, fp
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a8e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001aa6:	ebb2 0408 	subs.w	r4, r2, r8
 8001aaa:	eb63 0509 	sbc.w	r5, r3, r9
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	00eb      	lsls	r3, r5, #3
 8001ab8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001abc:	00e2      	lsls	r2, r4, #3
 8001abe:	4614      	mov	r4, r2
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	eb14 030a 	adds.w	r3, r4, sl
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	eb45 030b 	adc.w	r3, r5, fp
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ada:	4629      	mov	r1, r5
 8001adc:	028b      	lsls	r3, r1, #10
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	028a      	lsls	r2, r1, #10
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aee:	2200      	movs	r2, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af8:	f7fe fbca 	bl	8000290 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3740      	adds	r7, #64	@ 0x40
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	017d7840 	.word	0x017d7840

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	@ (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	080038e0 	.word	0x080038e0

08001b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b84:	f7ff ffdc 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0b5b      	lsrs	r3, r3, #13
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	@ (8001ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	080038e0 	.word	0x080038e0

08001ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e07b      	b.n	8001cb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bca:	d009      	beq.n	8001be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	e005      	b.n	8001be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe ff16 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	f003 0104 	and.w	r1, r3, #4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	f003 0210 	and.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69da      	ldr	r2, [r3, #28]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b088      	sub	sp, #32
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cca:	f7ff f847 	bl	8000d5c <HAL_GetTick>
 8001cce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e12a      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_SPI_Transmit+0x36>
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e122      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_SPI_Transmit+0x48>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e11b      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d50:	d10f      	bne.n	8001d72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7c:	2b40      	cmp	r3, #64	@ 0x40
 8001d7e:	d007      	beq.n	8001d90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d98:	d152      	bne.n	8001e40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_SPI_Transmit+0xee>
 8001da2:	8b7b      	ldrh	r3, [r7, #26]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d145      	bne.n	8001e34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dcc:	e032      	b.n	8001e34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d112      	bne.n	8001e02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e00:	e018      	b.n	8001e34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e02:	f7fe ffab 	bl	8000d5c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d803      	bhi.n	8001e1a <HAL_SPI_Transmit+0x160>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e18:	d102      	bne.n	8001e20 <HAL_SPI_Transmit+0x166>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e082      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1c7      	bne.n	8001dce <HAL_SPI_Transmit+0x114>
 8001e3e:	e053      	b.n	8001ee8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_SPI_Transmit+0x194>
 8001e48:	8b7b      	ldrh	r3, [r7, #26]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d147      	bne.n	8001ede <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e74:	e033      	b.n	8001ede <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d113      	bne.n	8001eac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001eaa:	e018      	b.n	8001ede <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eac:	f7fe ff56 	bl	8000d5c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d803      	bhi.n	8001ec4 <HAL_SPI_Transmit+0x20a>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ec2:	d102      	bne.n	8001eca <HAL_SPI_Transmit+0x210>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e02d      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1c6      	bne.n	8001e76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fbd9 	bl	80026a4 <SPI_EndRxTxTransaction>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10a      	bne.n	8001f1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b088      	sub	sp, #32
 8001f46:	af02      	add	r7, sp, #8
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e104      	b.n	800216c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_SPI_Receive+0x2c>
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0fc      	b.n	800216c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f7a:	d112      	bne.n	8001fa2 <HAL_SPI_Receive+0x60>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10e      	bne.n	8001fa2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2204      	movs	r2, #4
 8001f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f8c:	88fa      	ldrh	r2, [r7, #6]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f8eb 	bl	8002174 <HAL_SPI_TransmitReceive>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	e0e4      	b.n	800216c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa2:	f7fe fedb 	bl	8000d5c <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_SPI_Receive+0x74>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e0da      	b.n	800216c <HAL_SPI_Receive+0x22a>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002004:	d10f      	bne.n	8002026 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d007      	beq.n	8002044 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002042:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d170      	bne.n	800212e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800204c:	e035      	b.n	80020ba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d115      	bne.n	8002088 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f103 020c 	add.w	r2, r3, #12
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800207c:	b29b      	uxth	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002086:	e018      	b.n	80020ba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002088:	f7fe fe68 	bl	8000d5c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d803      	bhi.n	80020a0 <HAL_SPI_Receive+0x15e>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800209e:	d102      	bne.n	80020a6 <HAL_SPI_Receive+0x164>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e058      	b.n	800216c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1c4      	bne.n	800204e <HAL_SPI_Receive+0x10c>
 80020c4:	e038      	b.n	8002138 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d113      	bne.n	80020fc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	b292      	uxth	r2, r2
 80020e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020e6:	1c9a      	adds	r2, r3, #2
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80020fa:	e018      	b.n	800212e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020fc:	f7fe fe2e 	bl	8000d5c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d803      	bhi.n	8002114 <HAL_SPI_Receive+0x1d2>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002112:	d102      	bne.n	800211a <HAL_SPI_Receive+0x1d8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e01e      	b.n	800216c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1c6      	bne.n	80020c6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fa4b 	bl	80025d8 <SPI_EndRxTransaction>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800216a:	2300      	movs	r3, #0
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	@ 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002186:	f7fe fde9 	bl	8000d5c <HAL_GetTick>
 800218a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002192:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d00c      	beq.n	80021be <HAL_SPI_TransmitReceive+0x4a>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021aa:	d106      	bne.n	80021ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <HAL_SPI_TransmitReceive+0x46>
 80021b4:	7ffb      	ldrb	r3, [r7, #31]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d001      	beq.n	80021be <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
 80021bc:	e17f      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x5c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x5c>
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e174      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_SPI_TransmitReceive+0x6e>
 80021de:	2302      	movs	r3, #2
 80021e0:	e16d      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2205      	movs	r2, #5
 80021fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b40      	cmp	r3, #64	@ 0x40
 8002240:	d007      	beq.n	8002252 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800225a:	d17e      	bne.n	800235a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_TransmitReceive+0xf6>
 8002264:	8afb      	ldrh	r3, [r7, #22]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d16c      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	1c9a      	adds	r2, r3, #2
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	e059      	b.n	8002344 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11b      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x162>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d016      	beq.n	80022d6 <HAL_SPI_TransmitReceive+0x162>
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d113      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	1c9a      	adds	r2, r3, #2
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d119      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x1a4>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	b292      	uxth	r2, r2
 80022fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	1c9a      	adds	r2, r3, #2
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002318:	f7fe fd20 	bl	8000d5c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002324:	429a      	cmp	r2, r3
 8002326:	d80d      	bhi.n	8002344 <HAL_SPI_TransmitReceive+0x1d0>
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800232e:	d009      	beq.n	8002344 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0bc      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1a0      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x11c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d19b      	bne.n	8002290 <HAL_SPI_TransmitReceive+0x11c>
 8002358:	e082      	b.n	8002460 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_TransmitReceive+0x1f4>
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d171      	bne.n	800244c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238e:	e05d      	b.n	800244c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d11c      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x264>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d017      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x264>
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d114      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	330c      	adds	r3, #12
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d119      	bne.n	800241a <HAL_SPI_TransmitReceive+0x2a6>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d014      	beq.n	800241a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002416:	2301      	movs	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800241a:	f7fe fc9f 	bl	8000d5c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	429a      	cmp	r2, r3
 8002428:	d803      	bhi.n	8002432 <HAL_SPI_TransmitReceive+0x2be>
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002430:	d102      	bne.n	8002438 <HAL_SPI_TransmitReceive+0x2c4>
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e038      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d19c      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x21c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d197      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002460:	6a3a      	ldr	r2, [r7, #32]
 8002462:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f91d 	bl	80026a4 <SPI_EndRxTxTransaction>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e01d      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3728      	adds	r7, #40	@ 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024d8:	f7fe fc40 	bl	8000d5c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024e8:	f7fe fc38 	bl	8000d5c <HAL_GetTick>
 80024ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ee:	4b39      	ldr	r3, [pc, #228]	@ (80025d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	0d1b      	lsrs	r3, r3, #20
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fe:	e055      	b.n	80025ac <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002506:	d051      	beq.n	80025ac <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002508:	f7fe fc28 	bl	8000d5c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	d902      	bls.n	800251e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d13d      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800252c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002536:	d111      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002540:	d004      	beq.n	800254c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254a:	d107      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800255a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002564:	d10f      	bne.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e018      	b.n	80025cc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	e002      	b.n	80025ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d19a      	bne.n	8002500 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000000 	.word	0x20000000

080025d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ec:	d111      	bne.n	8002612 <SPI_EndRxTransaction+0x3a>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025f6:	d004      	beq.n	8002602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002600:	d107      	bne.n	8002612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800261a:	d12a      	bne.n	8002672 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002624:	d012      	beq.n	800264c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff49 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d02d      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e026      	b.n	800269a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff ff36 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01a      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e013      	b.n	800269a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	2101      	movs	r1, #1
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff ff23 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e000      	b.n	800269a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2201      	movs	r2, #1
 80026b8:	2102      	movs	r1, #2
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ff04 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e032      	b.n	800273c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <SPI_EndRxTxTransaction+0xa0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <SPI_EndRxTxTransaction+0xa4>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	0d5b      	lsrs	r3, r3, #21
 80026e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026f4:	d112      	bne.n	800271c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fee1 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e00f      	b.n	800273c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3b01      	subs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	2b80      	cmp	r3, #128	@ 0x80
 8002734:	d0f2      	beq.n	800271c <SPI_EndRxTxTransaction+0x78>
 8002736:	e000      	b.n	800273a <SPI_EndRxTxTransaction+0x96>
        break;
 8002738:	bf00      	nop
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000000 	.word	0x20000000
 8002748:	165e9f81 	.word	0x165e9f81

0800274c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e042      	b.n	80027e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe f9a2 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	@ 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800278e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f973 	bl	8002a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	@ 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	d175      	bne.n	80028f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Transmit+0x2c>
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e06e      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	@ 0x21
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800282a:	f7fe fa97 	bl	8000d5c <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002844:	d108      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e003      	b.n	8002860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002860:	e02e      	b.n	80028c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	@ 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f848 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e03a      	b.n	80028fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	3302      	adds	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e007      	b.n	80028b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cb      	bne.n	8002862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f814 	bl	8002902 <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e000      	b.n	80028fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f8:	2302      	movs	r3, #2
  }
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	4613      	mov	r3, r2
 8002910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	e03b      	b.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800291a:	d037      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe fa1e 	bl	8000d5c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <UART_WaitOnFlagUntilTimeout+0x30>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e03a      	b.n	80029ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b80      	cmp	r3, #128	@ 0x80
 8002948:	d020      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b40      	cmp	r3, #64	@ 0x40
 800294e:	d01d      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	d116      	bne.n	800298c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f81d 	bl	80029b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2208      	movs	r2, #8
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e00f      	b.n	80029ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d0b4      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b095      	sub	sp, #84	@ 0x54
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80029de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d119      	bne.n	8002a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a4c:	61ba      	str	r2, [r7, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a6e:	bf00      	nop
 8002a70:	3754      	adds	r7, #84	@ 0x54
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b0c0      	sub	sp, #256	@ 0x100
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	68d9      	ldr	r1, [r3, #12]
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	ea40 0301 	orr.w	r3, r0, r1
 8002aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ad4:	f021 010c 	bic.w	r1, r1, #12
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	6999      	ldr	r1, [r3, #24]
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	ea40 0301 	orr.w	r3, r0, r1
 8002b02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b8f      	ldr	r3, [pc, #572]	@ (8002d48 <UART_SetConfig+0x2cc>)
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d005      	beq.n	8002b1c <UART_SetConfig+0xa0>
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <UART_SetConfig+0x2d0>)
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d104      	bne.n	8002b26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b1c:	f7ff f830 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 8002b20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b24:	e003      	b.n	8002b2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b26:	f7ff f817 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002b2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b38:	f040 810c 	bne.w	8002d54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b56:	415b      	adcs	r3, r3
 8002b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b5e:	4621      	mov	r1, r4
 8002b60:	eb12 0801 	adds.w	r8, r2, r1
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb43 0901 	adc.w	r9, r3, r1
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7e:	4690      	mov	r8, r2
 8002b80:	4699      	mov	r9, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	eb18 0303 	adds.w	r3, r8, r3
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	eb49 0303 	adc.w	r3, r9, r3
 8002b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ba2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002baa:	460b      	mov	r3, r1
 8002bac:	18db      	adds	r3, r3, r3
 8002bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	eb42 0303 	adc.w	r3, r2, r3
 8002bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bc0:	f7fd fb66 	bl	8000290 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b61      	ldr	r3, [pc, #388]	@ (8002d50 <UART_SetConfig+0x2d4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bdc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002be0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bec:	415b      	adcs	r3, r3
 8002bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	eb43 0b01 	adc.w	fp, r3, r1
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c14:	4692      	mov	sl, r2
 8002c16:	469b      	mov	fp, r3
 8002c18:	4643      	mov	r3, r8
 8002c1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c22:	464b      	mov	r3, r9
 8002c24:	eb4b 0303 	adc.w	r3, fp, r3
 8002c28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c40:	460b      	mov	r3, r1
 8002c42:	18db      	adds	r3, r3, r3
 8002c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c46:	4613      	mov	r3, r2
 8002c48:	eb42 0303 	adc.w	r3, r2, r3
 8002c4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c56:	f7fd fb1b 	bl	8000290 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <UART_SetConfig+0x2d4>)
 8002c62:	fba3 2301 	umull	r2, r3, r3, r1
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2264      	movs	r2, #100	@ 0x64
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	1acb      	subs	r3, r1, r3
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <UART_SetConfig+0x2d4>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cdc:	464b      	mov	r3, r9
 8002cde:	460a      	mov	r2, r1
 8002ce0:	eb42 0303 	adc.w	r3, r2, r3
 8002ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	18db      	adds	r3, r3, r3
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d02:	4613      	mov	r3, r2
 8002d04:	eb42 0303 	adc.w	r3, r2, r3
 8002d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d12:	f7fd fabd 	bl	8000290 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <UART_SetConfig+0x2d4>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	@ 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	3332      	adds	r3, #50	@ 0x32
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <UART_SetConfig+0x2d4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 0207 	and.w	r2, r3, #7
 8002d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4422      	add	r2, r4
 8002d42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d44:	e106      	b.n	8002f54 <UART_SetConfig+0x4d8>
 8002d46:	bf00      	nop
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	6239      	str	r1, [r7, #32]
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d76:	4641      	mov	r1, r8
 8002d78:	1854      	adds	r4, r2, r1
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	eb43 0501 	adc.w	r5, r3, r1
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	eb45 0303 	adc.w	r3, r5, r3
 8002da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002db2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	008b      	lsls	r3, r1, #2
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dcc:	4621      	mov	r1, r4
 8002dce:	008a      	lsls	r2, r1, #2
 8002dd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dd4:	f7fd fa5c 	bl	8000290 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4b60      	ldr	r3, [pc, #384]	@ (8002f60 <UART_SetConfig+0x4e4>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	011c      	lsls	r4, r3, #4
 8002de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002df0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002df4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	61b9      	str	r1, [r7, #24]
 8002e00:	415b      	adcs	r3, r3
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e08:	4641      	mov	r1, r8
 8002e0a:	1851      	adds	r1, r2, r1
 8002e0c:	6139      	str	r1, [r7, #16]
 8002e0e:	4649      	mov	r1, r9
 8002e10:	414b      	adcs	r3, r1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e20:	4659      	mov	r1, fp
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4651      	mov	r1, sl
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4642      	mov	r2, r8
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	460a      	mov	r2, r1
 8002e40:	eb42 0303 	adc.w	r3, r2, r3
 8002e44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e60:	4649      	mov	r1, r9
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	008a      	lsls	r2, r1, #2
 8002e6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e72:	f7fd fa0d 	bl	8000290 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4b38      	ldr	r3, [pc, #224]	@ (8002f60 <UART_SetConfig+0x4e4>)
 8002e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2264      	movs	r2, #100	@ 0x64
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	1acb      	subs	r3, r1, r3
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	3332      	adds	r3, #50	@ 0x32
 8002e90:	4a33      	ldr	r2, [pc, #204]	@ (8002f60 <UART_SetConfig+0x4e4>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e9c:	441c      	add	r4, r3
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ea6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ea8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	1851      	adds	r1, r2, r1
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	414b      	adcs	r3, r1
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	00cb      	lsls	r3, r1, #3
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ede:	4651      	mov	r1, sl
 8002ee0:	00ca      	lsls	r2, r1, #3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4642      	mov	r2, r8
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eee:	464b      	mov	r3, r9
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f02:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f10:	4649      	mov	r1, r9
 8002f12:	008b      	lsls	r3, r1, #2
 8002f14:	4641      	mov	r1, r8
 8002f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1a:	4641      	mov	r1, r8
 8002f1c:	008a      	lsls	r2, r1, #2
 8002f1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f22:	f7fd f9b5 	bl	8000290 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f60 <UART_SetConfig+0x4e4>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	@ 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3332      	adds	r3, #50	@ 0x32
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <UART_SetConfig+0x4e4>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4422      	add	r2, r4
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f60:	51eb851f 	.word	0x51eb851f

08002f64 <siprintf>:
 8002f64:	b40e      	push	{r1, r2, r3}
 8002f66:	b510      	push	{r4, lr}
 8002f68:	b09d      	sub	sp, #116	@ 0x74
 8002f6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f6c:	9002      	str	r0, [sp, #8]
 8002f6e:	9006      	str	r0, [sp, #24]
 8002f70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f74:	480a      	ldr	r0, [pc, #40]	@ (8002fa0 <siprintf+0x3c>)
 8002f76:	9107      	str	r1, [sp, #28]
 8002f78:	9104      	str	r1, [sp, #16]
 8002f7a:	490a      	ldr	r1, [pc, #40]	@ (8002fa4 <siprintf+0x40>)
 8002f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f80:	9105      	str	r1, [sp, #20]
 8002f82:	2400      	movs	r4, #0
 8002f84:	a902      	add	r1, sp, #8
 8002f86:	6800      	ldr	r0, [r0, #0]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f8c:	f000 f994 	bl	80032b8 <_svfiprintf_r>
 8002f90:	9b02      	ldr	r3, [sp, #8]
 8002f92:	701c      	strb	r4, [r3, #0]
 8002f94:	b01d      	add	sp, #116	@ 0x74
 8002f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9a:	b003      	add	sp, #12
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	ffff0208 	.word	0xffff0208

08002fa8 <memset>:
 8002fa8:	4402      	add	r2, r0
 8002faa:	4603      	mov	r3, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <__errno>:
 8002fb8:	4b01      	ldr	r3, [pc, #4]	@ (8002fc0 <__errno+0x8>)
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <__libc_init_array>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002ffc <__libc_init_array+0x38>)
 8002fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003000 <__libc_init_array+0x3c>)
 8002fca:	1b64      	subs	r4, r4, r5
 8002fcc:	10a4      	asrs	r4, r4, #2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	42a6      	cmp	r6, r4
 8002fd2:	d109      	bne.n	8002fe8 <__libc_init_array+0x24>
 8002fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003004 <__libc_init_array+0x40>)
 8002fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003008 <__libc_init_array+0x44>)
 8002fd8:	f000 fc64 	bl	80038a4 <_init>
 8002fdc:	1b64      	subs	r4, r4, r5
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	42a6      	cmp	r6, r4
 8002fe4:	d105      	bne.n	8002ff2 <__libc_init_array+0x2e>
 8002fe6:	bd70      	pop	{r4, r5, r6, pc}
 8002fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fec:	4798      	blx	r3
 8002fee:	3601      	adds	r6, #1
 8002ff0:	e7ee      	b.n	8002fd0 <__libc_init_array+0xc>
 8002ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff6:	4798      	blx	r3
 8002ff8:	3601      	adds	r6, #1
 8002ffa:	e7f2      	b.n	8002fe2 <__libc_init_array+0x1e>
 8002ffc:	08003924 	.word	0x08003924
 8003000:	08003924 	.word	0x08003924
 8003004:	08003924 	.word	0x08003924
 8003008:	08003928 	.word	0x08003928

0800300c <__retarget_lock_acquire_recursive>:
 800300c:	4770      	bx	lr

0800300e <__retarget_lock_release_recursive>:
 800300e:	4770      	bx	lr

08003010 <_free_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4605      	mov	r5, r0
 8003014:	2900      	cmp	r1, #0
 8003016:	d041      	beq.n	800309c <_free_r+0x8c>
 8003018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800301c:	1f0c      	subs	r4, r1, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bfb8      	it	lt
 8003022:	18e4      	addlt	r4, r4, r3
 8003024:	f000 f8e0 	bl	80031e8 <__malloc_lock>
 8003028:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <_free_r+0x90>)
 800302a:	6813      	ldr	r3, [r2, #0]
 800302c:	b933      	cbnz	r3, 800303c <_free_r+0x2c>
 800302e:	6063      	str	r3, [r4, #4]
 8003030:	6014      	str	r4, [r2, #0]
 8003032:	4628      	mov	r0, r5
 8003034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003038:	f000 b8dc 	b.w	80031f4 <__malloc_unlock>
 800303c:	42a3      	cmp	r3, r4
 800303e:	d908      	bls.n	8003052 <_free_r+0x42>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf01      	itttt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	1809      	addeq	r1, r1, r0
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	e7ed      	b.n	800302e <_free_r+0x1e>
 8003052:	461a      	mov	r2, r3
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	b10b      	cbz	r3, 800305c <_free_r+0x4c>
 8003058:	42a3      	cmp	r3, r4
 800305a:	d9fa      	bls.n	8003052 <_free_r+0x42>
 800305c:	6811      	ldr	r1, [r2, #0]
 800305e:	1850      	adds	r0, r2, r1
 8003060:	42a0      	cmp	r0, r4
 8003062:	d10b      	bne.n	800307c <_free_r+0x6c>
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	4401      	add	r1, r0
 8003068:	1850      	adds	r0, r2, r1
 800306a:	4283      	cmp	r3, r0
 800306c:	6011      	str	r1, [r2, #0]
 800306e:	d1e0      	bne.n	8003032 <_free_r+0x22>
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	6053      	str	r3, [r2, #4]
 8003076:	4408      	add	r0, r1
 8003078:	6010      	str	r0, [r2, #0]
 800307a:	e7da      	b.n	8003032 <_free_r+0x22>
 800307c:	d902      	bls.n	8003084 <_free_r+0x74>
 800307e:	230c      	movs	r3, #12
 8003080:	602b      	str	r3, [r5, #0]
 8003082:	e7d6      	b.n	8003032 <_free_r+0x22>
 8003084:	6820      	ldr	r0, [r4, #0]
 8003086:	1821      	adds	r1, r4, r0
 8003088:	428b      	cmp	r3, r1
 800308a:	bf04      	itt	eq
 800308c:	6819      	ldreq	r1, [r3, #0]
 800308e:	685b      	ldreq	r3, [r3, #4]
 8003090:	6063      	str	r3, [r4, #4]
 8003092:	bf04      	itt	eq
 8003094:	1809      	addeq	r1, r1, r0
 8003096:	6021      	streq	r1, [r4, #0]
 8003098:	6054      	str	r4, [r2, #4]
 800309a:	e7ca      	b.n	8003032 <_free_r+0x22>
 800309c:	bd38      	pop	{r3, r4, r5, pc}
 800309e:	bf00      	nop
 80030a0:	20000268 	.word	0x20000268

080030a4 <sbrk_aligned>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4e0f      	ldr	r6, [pc, #60]	@ (80030e4 <sbrk_aligned+0x40>)
 80030a8:	460c      	mov	r4, r1
 80030aa:	6831      	ldr	r1, [r6, #0]
 80030ac:	4605      	mov	r5, r0
 80030ae:	b911      	cbnz	r1, 80030b6 <sbrk_aligned+0x12>
 80030b0:	f000 fba4 	bl	80037fc <_sbrk_r>
 80030b4:	6030      	str	r0, [r6, #0]
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 fb9f 	bl	80037fc <_sbrk_r>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	d103      	bne.n	80030ca <sbrk_aligned+0x26>
 80030c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030c6:	4620      	mov	r0, r4
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	1cc4      	adds	r4, r0, #3
 80030cc:	f024 0403 	bic.w	r4, r4, #3
 80030d0:	42a0      	cmp	r0, r4
 80030d2:	d0f8      	beq.n	80030c6 <sbrk_aligned+0x22>
 80030d4:	1a21      	subs	r1, r4, r0
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 fb90 	bl	80037fc <_sbrk_r>
 80030dc:	3001      	adds	r0, #1
 80030de:	d1f2      	bne.n	80030c6 <sbrk_aligned+0x22>
 80030e0:	e7ef      	b.n	80030c2 <sbrk_aligned+0x1e>
 80030e2:	bf00      	nop
 80030e4:	20000264 	.word	0x20000264

080030e8 <_malloc_r>:
 80030e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030ec:	1ccd      	adds	r5, r1, #3
 80030ee:	f025 0503 	bic.w	r5, r5, #3
 80030f2:	3508      	adds	r5, #8
 80030f4:	2d0c      	cmp	r5, #12
 80030f6:	bf38      	it	cc
 80030f8:	250c      	movcc	r5, #12
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	4606      	mov	r6, r0
 80030fe:	db01      	blt.n	8003104 <_malloc_r+0x1c>
 8003100:	42a9      	cmp	r1, r5
 8003102:	d904      	bls.n	800310e <_malloc_r+0x26>
 8003104:	230c      	movs	r3, #12
 8003106:	6033      	str	r3, [r6, #0]
 8003108:	2000      	movs	r0, #0
 800310a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800310e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031e4 <_malloc_r+0xfc>
 8003112:	f000 f869 	bl	80031e8 <__malloc_lock>
 8003116:	f8d8 3000 	ldr.w	r3, [r8]
 800311a:	461c      	mov	r4, r3
 800311c:	bb44      	cbnz	r4, 8003170 <_malloc_r+0x88>
 800311e:	4629      	mov	r1, r5
 8003120:	4630      	mov	r0, r6
 8003122:	f7ff ffbf 	bl	80030a4 <sbrk_aligned>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	4604      	mov	r4, r0
 800312a:	d158      	bne.n	80031de <_malloc_r+0xf6>
 800312c:	f8d8 4000 	ldr.w	r4, [r8]
 8003130:	4627      	mov	r7, r4
 8003132:	2f00      	cmp	r7, #0
 8003134:	d143      	bne.n	80031be <_malloc_r+0xd6>
 8003136:	2c00      	cmp	r4, #0
 8003138:	d04b      	beq.n	80031d2 <_malloc_r+0xea>
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	4639      	mov	r1, r7
 800313e:	4630      	mov	r0, r6
 8003140:	eb04 0903 	add.w	r9, r4, r3
 8003144:	f000 fb5a 	bl	80037fc <_sbrk_r>
 8003148:	4581      	cmp	r9, r0
 800314a:	d142      	bne.n	80031d2 <_malloc_r+0xea>
 800314c:	6821      	ldr	r1, [r4, #0]
 800314e:	1a6d      	subs	r5, r5, r1
 8003150:	4629      	mov	r1, r5
 8003152:	4630      	mov	r0, r6
 8003154:	f7ff ffa6 	bl	80030a4 <sbrk_aligned>
 8003158:	3001      	adds	r0, #1
 800315a:	d03a      	beq.n	80031d2 <_malloc_r+0xea>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	442b      	add	r3, r5
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	f8d8 3000 	ldr.w	r3, [r8]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	bb62      	cbnz	r2, 80031c4 <_malloc_r+0xdc>
 800316a:	f8c8 7000 	str.w	r7, [r8]
 800316e:	e00f      	b.n	8003190 <_malloc_r+0xa8>
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	1b52      	subs	r2, r2, r5
 8003174:	d420      	bmi.n	80031b8 <_malloc_r+0xd0>
 8003176:	2a0b      	cmp	r2, #11
 8003178:	d917      	bls.n	80031aa <_malloc_r+0xc2>
 800317a:	1961      	adds	r1, r4, r5
 800317c:	42a3      	cmp	r3, r4
 800317e:	6025      	str	r5, [r4, #0]
 8003180:	bf18      	it	ne
 8003182:	6059      	strne	r1, [r3, #4]
 8003184:	6863      	ldr	r3, [r4, #4]
 8003186:	bf08      	it	eq
 8003188:	f8c8 1000 	streq.w	r1, [r8]
 800318c:	5162      	str	r2, [r4, r5]
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	4630      	mov	r0, r6
 8003192:	f000 f82f 	bl	80031f4 <__malloc_unlock>
 8003196:	f104 000b 	add.w	r0, r4, #11
 800319a:	1d23      	adds	r3, r4, #4
 800319c:	f020 0007 	bic.w	r0, r0, #7
 80031a0:	1ac2      	subs	r2, r0, r3
 80031a2:	bf1c      	itt	ne
 80031a4:	1a1b      	subne	r3, r3, r0
 80031a6:	50a3      	strne	r3, [r4, r2]
 80031a8:	e7af      	b.n	800310a <_malloc_r+0x22>
 80031aa:	6862      	ldr	r2, [r4, #4]
 80031ac:	42a3      	cmp	r3, r4
 80031ae:	bf0c      	ite	eq
 80031b0:	f8c8 2000 	streq.w	r2, [r8]
 80031b4:	605a      	strne	r2, [r3, #4]
 80031b6:	e7eb      	b.n	8003190 <_malloc_r+0xa8>
 80031b8:	4623      	mov	r3, r4
 80031ba:	6864      	ldr	r4, [r4, #4]
 80031bc:	e7ae      	b.n	800311c <_malloc_r+0x34>
 80031be:	463c      	mov	r4, r7
 80031c0:	687f      	ldr	r7, [r7, #4]
 80031c2:	e7b6      	b.n	8003132 <_malloc_r+0x4a>
 80031c4:	461a      	mov	r2, r3
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	d1fb      	bne.n	80031c4 <_malloc_r+0xdc>
 80031cc:	2300      	movs	r3, #0
 80031ce:	6053      	str	r3, [r2, #4]
 80031d0:	e7de      	b.n	8003190 <_malloc_r+0xa8>
 80031d2:	230c      	movs	r3, #12
 80031d4:	6033      	str	r3, [r6, #0]
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f80c 	bl	80031f4 <__malloc_unlock>
 80031dc:	e794      	b.n	8003108 <_malloc_r+0x20>
 80031de:	6005      	str	r5, [r0, #0]
 80031e0:	e7d6      	b.n	8003190 <_malloc_r+0xa8>
 80031e2:	bf00      	nop
 80031e4:	20000268 	.word	0x20000268

080031e8 <__malloc_lock>:
 80031e8:	4801      	ldr	r0, [pc, #4]	@ (80031f0 <__malloc_lock+0x8>)
 80031ea:	f7ff bf0f 	b.w	800300c <__retarget_lock_acquire_recursive>
 80031ee:	bf00      	nop
 80031f0:	20000260 	.word	0x20000260

080031f4 <__malloc_unlock>:
 80031f4:	4801      	ldr	r0, [pc, #4]	@ (80031fc <__malloc_unlock+0x8>)
 80031f6:	f7ff bf0a 	b.w	800300e <__retarget_lock_release_recursive>
 80031fa:	bf00      	nop
 80031fc:	20000260 	.word	0x20000260

08003200 <__ssputs_r>:
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	688e      	ldr	r6, [r1, #8]
 8003206:	461f      	mov	r7, r3
 8003208:	42be      	cmp	r6, r7
 800320a:	680b      	ldr	r3, [r1, #0]
 800320c:	4682      	mov	sl, r0
 800320e:	460c      	mov	r4, r1
 8003210:	4690      	mov	r8, r2
 8003212:	d82d      	bhi.n	8003270 <__ssputs_r+0x70>
 8003214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003218:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800321c:	d026      	beq.n	800326c <__ssputs_r+0x6c>
 800321e:	6965      	ldr	r5, [r4, #20]
 8003220:	6909      	ldr	r1, [r1, #16]
 8003222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003226:	eba3 0901 	sub.w	r9, r3, r1
 800322a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800322e:	1c7b      	adds	r3, r7, #1
 8003230:	444b      	add	r3, r9
 8003232:	106d      	asrs	r5, r5, #1
 8003234:	429d      	cmp	r5, r3
 8003236:	bf38      	it	cc
 8003238:	461d      	movcc	r5, r3
 800323a:	0553      	lsls	r3, r2, #21
 800323c:	d527      	bpl.n	800328e <__ssputs_r+0x8e>
 800323e:	4629      	mov	r1, r5
 8003240:	f7ff ff52 	bl	80030e8 <_malloc_r>
 8003244:	4606      	mov	r6, r0
 8003246:	b360      	cbz	r0, 80032a2 <__ssputs_r+0xa2>
 8003248:	6921      	ldr	r1, [r4, #16]
 800324a:	464a      	mov	r2, r9
 800324c:	f000 fae6 	bl	800381c <memcpy>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	6126      	str	r6, [r4, #16]
 800325e:	6165      	str	r5, [r4, #20]
 8003260:	444e      	add	r6, r9
 8003262:	eba5 0509 	sub.w	r5, r5, r9
 8003266:	6026      	str	r6, [r4, #0]
 8003268:	60a5      	str	r5, [r4, #8]
 800326a:	463e      	mov	r6, r7
 800326c:	42be      	cmp	r6, r7
 800326e:	d900      	bls.n	8003272 <__ssputs_r+0x72>
 8003270:	463e      	mov	r6, r7
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	4632      	mov	r2, r6
 8003276:	4641      	mov	r1, r8
 8003278:	f000 faa6 	bl	80037c8 <memmove>
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	1b9b      	subs	r3, r3, r6
 8003280:	60a3      	str	r3, [r4, #8]
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	4433      	add	r3, r6
 8003286:	6023      	str	r3, [r4, #0]
 8003288:	2000      	movs	r0, #0
 800328a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328e:	462a      	mov	r2, r5
 8003290:	f000 fad2 	bl	8003838 <_realloc_r>
 8003294:	4606      	mov	r6, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d1e0      	bne.n	800325c <__ssputs_r+0x5c>
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	4650      	mov	r0, sl
 800329e:	f7ff feb7 	bl	8003010 <_free_r>
 80032a2:	230c      	movs	r3, #12
 80032a4:	f8ca 3000 	str.w	r3, [sl]
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b4:	e7e9      	b.n	800328a <__ssputs_r+0x8a>
	...

080032b8 <_svfiprintf_r>:
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	4698      	mov	r8, r3
 80032be:	898b      	ldrh	r3, [r1, #12]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	b09d      	sub	sp, #116	@ 0x74
 80032c4:	4607      	mov	r7, r0
 80032c6:	460d      	mov	r5, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	d510      	bpl.n	80032ee <_svfiprintf_r+0x36>
 80032cc:	690b      	ldr	r3, [r1, #16]
 80032ce:	b973      	cbnz	r3, 80032ee <_svfiprintf_r+0x36>
 80032d0:	2140      	movs	r1, #64	@ 0x40
 80032d2:	f7ff ff09 	bl	80030e8 <_malloc_r>
 80032d6:	6028      	str	r0, [r5, #0]
 80032d8:	6128      	str	r0, [r5, #16]
 80032da:	b930      	cbnz	r0, 80032ea <_svfiprintf_r+0x32>
 80032dc:	230c      	movs	r3, #12
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032e4:	b01d      	add	sp, #116	@ 0x74
 80032e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ea:	2340      	movs	r3, #64	@ 0x40
 80032ec:	616b      	str	r3, [r5, #20]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80032f2:	2320      	movs	r3, #32
 80032f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80032fc:	2330      	movs	r3, #48	@ 0x30
 80032fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800349c <_svfiprintf_r+0x1e4>
 8003302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003306:	f04f 0901 	mov.w	r9, #1
 800330a:	4623      	mov	r3, r4
 800330c:	469a      	mov	sl, r3
 800330e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003312:	b10a      	cbz	r2, 8003318 <_svfiprintf_r+0x60>
 8003314:	2a25      	cmp	r2, #37	@ 0x25
 8003316:	d1f9      	bne.n	800330c <_svfiprintf_r+0x54>
 8003318:	ebba 0b04 	subs.w	fp, sl, r4
 800331c:	d00b      	beq.n	8003336 <_svfiprintf_r+0x7e>
 800331e:	465b      	mov	r3, fp
 8003320:	4622      	mov	r2, r4
 8003322:	4629      	mov	r1, r5
 8003324:	4638      	mov	r0, r7
 8003326:	f7ff ff6b 	bl	8003200 <__ssputs_r>
 800332a:	3001      	adds	r0, #1
 800332c:	f000 80a7 	beq.w	800347e <_svfiprintf_r+0x1c6>
 8003330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003332:	445a      	add	r2, fp
 8003334:	9209      	str	r2, [sp, #36]	@ 0x24
 8003336:	f89a 3000 	ldrb.w	r3, [sl]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 809f 	beq.w	800347e <_svfiprintf_r+0x1c6>
 8003340:	2300      	movs	r3, #0
 8003342:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800334a:	f10a 0a01 	add.w	sl, sl, #1
 800334e:	9304      	str	r3, [sp, #16]
 8003350:	9307      	str	r3, [sp, #28]
 8003352:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003356:	931a      	str	r3, [sp, #104]	@ 0x68
 8003358:	4654      	mov	r4, sl
 800335a:	2205      	movs	r2, #5
 800335c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003360:	484e      	ldr	r0, [pc, #312]	@ (800349c <_svfiprintf_r+0x1e4>)
 8003362:	f7fc ff45 	bl	80001f0 <memchr>
 8003366:	9a04      	ldr	r2, [sp, #16]
 8003368:	b9d8      	cbnz	r0, 80033a2 <_svfiprintf_r+0xea>
 800336a:	06d0      	lsls	r0, r2, #27
 800336c:	bf44      	itt	mi
 800336e:	2320      	movmi	r3, #32
 8003370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003374:	0711      	lsls	r1, r2, #28
 8003376:	bf44      	itt	mi
 8003378:	232b      	movmi	r3, #43	@ 0x2b
 800337a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800337e:	f89a 3000 	ldrb.w	r3, [sl]
 8003382:	2b2a      	cmp	r3, #42	@ 0x2a
 8003384:	d015      	beq.n	80033b2 <_svfiprintf_r+0xfa>
 8003386:	9a07      	ldr	r2, [sp, #28]
 8003388:	4654      	mov	r4, sl
 800338a:	2000      	movs	r0, #0
 800338c:	f04f 0c0a 	mov.w	ip, #10
 8003390:	4621      	mov	r1, r4
 8003392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003396:	3b30      	subs	r3, #48	@ 0x30
 8003398:	2b09      	cmp	r3, #9
 800339a:	d94b      	bls.n	8003434 <_svfiprintf_r+0x17c>
 800339c:	b1b0      	cbz	r0, 80033cc <_svfiprintf_r+0x114>
 800339e:	9207      	str	r2, [sp, #28]
 80033a0:	e014      	b.n	80033cc <_svfiprintf_r+0x114>
 80033a2:	eba0 0308 	sub.w	r3, r0, r8
 80033a6:	fa09 f303 	lsl.w	r3, r9, r3
 80033aa:	4313      	orrs	r3, r2
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	46a2      	mov	sl, r4
 80033b0:	e7d2      	b.n	8003358 <_svfiprintf_r+0xa0>
 80033b2:	9b03      	ldr	r3, [sp, #12]
 80033b4:	1d19      	adds	r1, r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	9103      	str	r1, [sp, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bfbb      	ittet	lt
 80033be:	425b      	neglt	r3, r3
 80033c0:	f042 0202 	orrlt.w	r2, r2, #2
 80033c4:	9307      	strge	r3, [sp, #28]
 80033c6:	9307      	strlt	r3, [sp, #28]
 80033c8:	bfb8      	it	lt
 80033ca:	9204      	strlt	r2, [sp, #16]
 80033cc:	7823      	ldrb	r3, [r4, #0]
 80033ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80033d0:	d10a      	bne.n	80033e8 <_svfiprintf_r+0x130>
 80033d2:	7863      	ldrb	r3, [r4, #1]
 80033d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80033d6:	d132      	bne.n	800343e <_svfiprintf_r+0x186>
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	9203      	str	r2, [sp, #12]
 80033e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033e4:	3402      	adds	r4, #2
 80033e6:	9305      	str	r3, [sp, #20]
 80033e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80034ac <_svfiprintf_r+0x1f4>
 80033ec:	7821      	ldrb	r1, [r4, #0]
 80033ee:	2203      	movs	r2, #3
 80033f0:	4650      	mov	r0, sl
 80033f2:	f7fc fefd 	bl	80001f0 <memchr>
 80033f6:	b138      	cbz	r0, 8003408 <_svfiprintf_r+0x150>
 80033f8:	9b04      	ldr	r3, [sp, #16]
 80033fa:	eba0 000a 	sub.w	r0, r0, sl
 80033fe:	2240      	movs	r2, #64	@ 0x40
 8003400:	4082      	lsls	r2, r0
 8003402:	4313      	orrs	r3, r2
 8003404:	3401      	adds	r4, #1
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340c:	4824      	ldr	r0, [pc, #144]	@ (80034a0 <_svfiprintf_r+0x1e8>)
 800340e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003412:	2206      	movs	r2, #6
 8003414:	f7fc feec 	bl	80001f0 <memchr>
 8003418:	2800      	cmp	r0, #0
 800341a:	d036      	beq.n	800348a <_svfiprintf_r+0x1d2>
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <_svfiprintf_r+0x1ec>)
 800341e:	bb1b      	cbnz	r3, 8003468 <_svfiprintf_r+0x1b0>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	3307      	adds	r3, #7
 8003424:	f023 0307 	bic.w	r3, r3, #7
 8003428:	3308      	adds	r3, #8
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800342e:	4433      	add	r3, r6
 8003430:	9309      	str	r3, [sp, #36]	@ 0x24
 8003432:	e76a      	b.n	800330a <_svfiprintf_r+0x52>
 8003434:	fb0c 3202 	mla	r2, ip, r2, r3
 8003438:	460c      	mov	r4, r1
 800343a:	2001      	movs	r0, #1
 800343c:	e7a8      	b.n	8003390 <_svfiprintf_r+0xd8>
 800343e:	2300      	movs	r3, #0
 8003440:	3401      	adds	r4, #1
 8003442:	9305      	str	r3, [sp, #20]
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 0c0a 	mov.w	ip, #10
 800344a:	4620      	mov	r0, r4
 800344c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003450:	3a30      	subs	r2, #48	@ 0x30
 8003452:	2a09      	cmp	r2, #9
 8003454:	d903      	bls.n	800345e <_svfiprintf_r+0x1a6>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0c6      	beq.n	80033e8 <_svfiprintf_r+0x130>
 800345a:	9105      	str	r1, [sp, #20]
 800345c:	e7c4      	b.n	80033e8 <_svfiprintf_r+0x130>
 800345e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003462:	4604      	mov	r4, r0
 8003464:	2301      	movs	r3, #1
 8003466:	e7f0      	b.n	800344a <_svfiprintf_r+0x192>
 8003468:	ab03      	add	r3, sp, #12
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	462a      	mov	r2, r5
 800346e:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <_svfiprintf_r+0x1f0>)
 8003470:	a904      	add	r1, sp, #16
 8003472:	4638      	mov	r0, r7
 8003474:	f3af 8000 	nop.w
 8003478:	1c42      	adds	r2, r0, #1
 800347a:	4606      	mov	r6, r0
 800347c:	d1d6      	bne.n	800342c <_svfiprintf_r+0x174>
 800347e:	89ab      	ldrh	r3, [r5, #12]
 8003480:	065b      	lsls	r3, r3, #25
 8003482:	f53f af2d 	bmi.w	80032e0 <_svfiprintf_r+0x28>
 8003486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003488:	e72c      	b.n	80032e4 <_svfiprintf_r+0x2c>
 800348a:	ab03      	add	r3, sp, #12
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	462a      	mov	r2, r5
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <_svfiprintf_r+0x1f0>)
 8003492:	a904      	add	r1, sp, #16
 8003494:	4638      	mov	r0, r7
 8003496:	f000 f879 	bl	800358c <_printf_i>
 800349a:	e7ed      	b.n	8003478 <_svfiprintf_r+0x1c0>
 800349c:	080038e8 	.word	0x080038e8
 80034a0:	080038f2 	.word	0x080038f2
 80034a4:	00000000 	.word	0x00000000
 80034a8:	08003201 	.word	0x08003201
 80034ac:	080038ee 	.word	0x080038ee

080034b0 <_printf_common>:
 80034b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b4:	4616      	mov	r6, r2
 80034b6:	4698      	mov	r8, r3
 80034b8:	688a      	ldr	r2, [r1, #8]
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bfb8      	it	lt
 80034c4:	4613      	movlt	r3, r2
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034cc:	4607      	mov	r7, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	b10a      	cbz	r2, 80034d6 <_printf_common+0x26>
 80034d2:	3301      	adds	r3, #1
 80034d4:	6033      	str	r3, [r6, #0]
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	0699      	lsls	r1, r3, #26
 80034da:	bf42      	ittt	mi
 80034dc:	6833      	ldrmi	r3, [r6, #0]
 80034de:	3302      	addmi	r3, #2
 80034e0:	6033      	strmi	r3, [r6, #0]
 80034e2:	6825      	ldr	r5, [r4, #0]
 80034e4:	f015 0506 	ands.w	r5, r5, #6
 80034e8:	d106      	bne.n	80034f8 <_printf_common+0x48>
 80034ea:	f104 0a19 	add.w	sl, r4, #25
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	6832      	ldr	r2, [r6, #0]
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	42ab      	cmp	r3, r5
 80034f6:	dc26      	bgt.n	8003546 <_printf_common+0x96>
 80034f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	3b00      	subs	r3, #0
 8003500:	bf18      	it	ne
 8003502:	2301      	movne	r3, #1
 8003504:	0692      	lsls	r2, r2, #26
 8003506:	d42b      	bmi.n	8003560 <_printf_common+0xb0>
 8003508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800350c:	4641      	mov	r1, r8
 800350e:	4638      	mov	r0, r7
 8003510:	47c8      	blx	r9
 8003512:	3001      	adds	r0, #1
 8003514:	d01e      	beq.n	8003554 <_printf_common+0xa4>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	6922      	ldr	r2, [r4, #16]
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf02      	ittt	eq
 8003522:	68e5      	ldreq	r5, [r4, #12]
 8003524:	6833      	ldreq	r3, [r6, #0]
 8003526:	1aed      	subeq	r5, r5, r3
 8003528:	68a3      	ldr	r3, [r4, #8]
 800352a:	bf0c      	ite	eq
 800352c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003530:	2500      	movne	r5, #0
 8003532:	4293      	cmp	r3, r2
 8003534:	bfc4      	itt	gt
 8003536:	1a9b      	subgt	r3, r3, r2
 8003538:	18ed      	addgt	r5, r5, r3
 800353a:	2600      	movs	r6, #0
 800353c:	341a      	adds	r4, #26
 800353e:	42b5      	cmp	r5, r6
 8003540:	d11a      	bne.n	8003578 <_printf_common+0xc8>
 8003542:	2000      	movs	r0, #0
 8003544:	e008      	b.n	8003558 <_printf_common+0xa8>
 8003546:	2301      	movs	r3, #1
 8003548:	4652      	mov	r2, sl
 800354a:	4641      	mov	r1, r8
 800354c:	4638      	mov	r0, r7
 800354e:	47c8      	blx	r9
 8003550:	3001      	adds	r0, #1
 8003552:	d103      	bne.n	800355c <_printf_common+0xac>
 8003554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800355c:	3501      	adds	r5, #1
 800355e:	e7c6      	b.n	80034ee <_printf_common+0x3e>
 8003560:	18e1      	adds	r1, r4, r3
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	2030      	movs	r0, #48	@ 0x30
 8003566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800356a:	4422      	add	r2, r4
 800356c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003574:	3302      	adds	r3, #2
 8003576:	e7c7      	b.n	8003508 <_printf_common+0x58>
 8003578:	2301      	movs	r3, #1
 800357a:	4622      	mov	r2, r4
 800357c:	4641      	mov	r1, r8
 800357e:	4638      	mov	r0, r7
 8003580:	47c8      	blx	r9
 8003582:	3001      	adds	r0, #1
 8003584:	d0e6      	beq.n	8003554 <_printf_common+0xa4>
 8003586:	3601      	adds	r6, #1
 8003588:	e7d9      	b.n	800353e <_printf_common+0x8e>
	...

0800358c <_printf_i>:
 800358c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	7e0f      	ldrb	r7, [r1, #24]
 8003592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003594:	2f78      	cmp	r7, #120	@ 0x78
 8003596:	4691      	mov	r9, r2
 8003598:	4680      	mov	r8, r0
 800359a:	460c      	mov	r4, r1
 800359c:	469a      	mov	sl, r3
 800359e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035a2:	d807      	bhi.n	80035b4 <_printf_i+0x28>
 80035a4:	2f62      	cmp	r7, #98	@ 0x62
 80035a6:	d80a      	bhi.n	80035be <_printf_i+0x32>
 80035a8:	2f00      	cmp	r7, #0
 80035aa:	f000 80d1 	beq.w	8003750 <_printf_i+0x1c4>
 80035ae:	2f58      	cmp	r7, #88	@ 0x58
 80035b0:	f000 80b8 	beq.w	8003724 <_printf_i+0x198>
 80035b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035bc:	e03a      	b.n	8003634 <_printf_i+0xa8>
 80035be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035c2:	2b15      	cmp	r3, #21
 80035c4:	d8f6      	bhi.n	80035b4 <_printf_i+0x28>
 80035c6:	a101      	add	r1, pc, #4	@ (adr r1, 80035cc <_printf_i+0x40>)
 80035c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035cc:	08003625 	.word	0x08003625
 80035d0:	08003639 	.word	0x08003639
 80035d4:	080035b5 	.word	0x080035b5
 80035d8:	080035b5 	.word	0x080035b5
 80035dc:	080035b5 	.word	0x080035b5
 80035e0:	080035b5 	.word	0x080035b5
 80035e4:	08003639 	.word	0x08003639
 80035e8:	080035b5 	.word	0x080035b5
 80035ec:	080035b5 	.word	0x080035b5
 80035f0:	080035b5 	.word	0x080035b5
 80035f4:	080035b5 	.word	0x080035b5
 80035f8:	08003737 	.word	0x08003737
 80035fc:	08003663 	.word	0x08003663
 8003600:	080036f1 	.word	0x080036f1
 8003604:	080035b5 	.word	0x080035b5
 8003608:	080035b5 	.word	0x080035b5
 800360c:	08003759 	.word	0x08003759
 8003610:	080035b5 	.word	0x080035b5
 8003614:	08003663 	.word	0x08003663
 8003618:	080035b5 	.word	0x080035b5
 800361c:	080035b5 	.word	0x080035b5
 8003620:	080036f9 	.word	0x080036f9
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	1d1a      	adds	r2, r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6032      	str	r2, [r6, #0]
 800362c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003634:	2301      	movs	r3, #1
 8003636:	e09c      	b.n	8003772 <_printf_i+0x1e6>
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	1d19      	adds	r1, r3, #4
 800363e:	6031      	str	r1, [r6, #0]
 8003640:	0606      	lsls	r6, r0, #24
 8003642:	d501      	bpl.n	8003648 <_printf_i+0xbc>
 8003644:	681d      	ldr	r5, [r3, #0]
 8003646:	e003      	b.n	8003650 <_printf_i+0xc4>
 8003648:	0645      	lsls	r5, r0, #25
 800364a:	d5fb      	bpl.n	8003644 <_printf_i+0xb8>
 800364c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003650:	2d00      	cmp	r5, #0
 8003652:	da03      	bge.n	800365c <_printf_i+0xd0>
 8003654:	232d      	movs	r3, #45	@ 0x2d
 8003656:	426d      	negs	r5, r5
 8003658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800365c:	4858      	ldr	r0, [pc, #352]	@ (80037c0 <_printf_i+0x234>)
 800365e:	230a      	movs	r3, #10
 8003660:	e011      	b.n	8003686 <_printf_i+0xfa>
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	6833      	ldr	r3, [r6, #0]
 8003666:	0608      	lsls	r0, r1, #24
 8003668:	f853 5b04 	ldr.w	r5, [r3], #4
 800366c:	d402      	bmi.n	8003674 <_printf_i+0xe8>
 800366e:	0649      	lsls	r1, r1, #25
 8003670:	bf48      	it	mi
 8003672:	b2ad      	uxthmi	r5, r5
 8003674:	2f6f      	cmp	r7, #111	@ 0x6f
 8003676:	4852      	ldr	r0, [pc, #328]	@ (80037c0 <_printf_i+0x234>)
 8003678:	6033      	str	r3, [r6, #0]
 800367a:	bf14      	ite	ne
 800367c:	230a      	movne	r3, #10
 800367e:	2308      	moveq	r3, #8
 8003680:	2100      	movs	r1, #0
 8003682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003686:	6866      	ldr	r6, [r4, #4]
 8003688:	60a6      	str	r6, [r4, #8]
 800368a:	2e00      	cmp	r6, #0
 800368c:	db05      	blt.n	800369a <_printf_i+0x10e>
 800368e:	6821      	ldr	r1, [r4, #0]
 8003690:	432e      	orrs	r6, r5
 8003692:	f021 0104 	bic.w	r1, r1, #4
 8003696:	6021      	str	r1, [r4, #0]
 8003698:	d04b      	beq.n	8003732 <_printf_i+0x1a6>
 800369a:	4616      	mov	r6, r2
 800369c:	fbb5 f1f3 	udiv	r1, r5, r3
 80036a0:	fb03 5711 	mls	r7, r3, r1, r5
 80036a4:	5dc7      	ldrb	r7, [r0, r7]
 80036a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036aa:	462f      	mov	r7, r5
 80036ac:	42bb      	cmp	r3, r7
 80036ae:	460d      	mov	r5, r1
 80036b0:	d9f4      	bls.n	800369c <_printf_i+0x110>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d10b      	bne.n	80036ce <_printf_i+0x142>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	07df      	lsls	r7, r3, #31
 80036ba:	d508      	bpl.n	80036ce <_printf_i+0x142>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	6861      	ldr	r1, [r4, #4]
 80036c0:	4299      	cmp	r1, r3
 80036c2:	bfde      	ittt	le
 80036c4:	2330      	movle	r3, #48	@ 0x30
 80036c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80036ce:	1b92      	subs	r2, r2, r6
 80036d0:	6122      	str	r2, [r4, #16]
 80036d2:	f8cd a000 	str.w	sl, [sp]
 80036d6:	464b      	mov	r3, r9
 80036d8:	aa03      	add	r2, sp, #12
 80036da:	4621      	mov	r1, r4
 80036dc:	4640      	mov	r0, r8
 80036de:	f7ff fee7 	bl	80034b0 <_printf_common>
 80036e2:	3001      	adds	r0, #1
 80036e4:	d14a      	bne.n	800377c <_printf_i+0x1f0>
 80036e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ea:	b004      	add	sp, #16
 80036ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	f043 0320 	orr.w	r3, r3, #32
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	4832      	ldr	r0, [pc, #200]	@ (80037c4 <_printf_i+0x238>)
 80036fa:	2778      	movs	r7, #120	@ 0x78
 80036fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	6831      	ldr	r1, [r6, #0]
 8003704:	061f      	lsls	r7, r3, #24
 8003706:	f851 5b04 	ldr.w	r5, [r1], #4
 800370a:	d402      	bmi.n	8003712 <_printf_i+0x186>
 800370c:	065f      	lsls	r7, r3, #25
 800370e:	bf48      	it	mi
 8003710:	b2ad      	uxthmi	r5, r5
 8003712:	6031      	str	r1, [r6, #0]
 8003714:	07d9      	lsls	r1, r3, #31
 8003716:	bf44      	itt	mi
 8003718:	f043 0320 	orrmi.w	r3, r3, #32
 800371c:	6023      	strmi	r3, [r4, #0]
 800371e:	b11d      	cbz	r5, 8003728 <_printf_i+0x19c>
 8003720:	2310      	movs	r3, #16
 8003722:	e7ad      	b.n	8003680 <_printf_i+0xf4>
 8003724:	4826      	ldr	r0, [pc, #152]	@ (80037c0 <_printf_i+0x234>)
 8003726:	e7e9      	b.n	80036fc <_printf_i+0x170>
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	f023 0320 	bic.w	r3, r3, #32
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	e7f6      	b.n	8003720 <_printf_i+0x194>
 8003732:	4616      	mov	r6, r2
 8003734:	e7bd      	b.n	80036b2 <_printf_i+0x126>
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	6825      	ldr	r5, [r4, #0]
 800373a:	6961      	ldr	r1, [r4, #20]
 800373c:	1d18      	adds	r0, r3, #4
 800373e:	6030      	str	r0, [r6, #0]
 8003740:	062e      	lsls	r6, r5, #24
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	d501      	bpl.n	800374a <_printf_i+0x1be>
 8003746:	6019      	str	r1, [r3, #0]
 8003748:	e002      	b.n	8003750 <_printf_i+0x1c4>
 800374a:	0668      	lsls	r0, r5, #25
 800374c:	d5fb      	bpl.n	8003746 <_printf_i+0x1ba>
 800374e:	8019      	strh	r1, [r3, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	4616      	mov	r6, r2
 8003756:	e7bc      	b.n	80036d2 <_printf_i+0x146>
 8003758:	6833      	ldr	r3, [r6, #0]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	6032      	str	r2, [r6, #0]
 800375e:	681e      	ldr	r6, [r3, #0]
 8003760:	6862      	ldr	r2, [r4, #4]
 8003762:	2100      	movs	r1, #0
 8003764:	4630      	mov	r0, r6
 8003766:	f7fc fd43 	bl	80001f0 <memchr>
 800376a:	b108      	cbz	r0, 8003770 <_printf_i+0x1e4>
 800376c:	1b80      	subs	r0, r0, r6
 800376e:	6060      	str	r0, [r4, #4]
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	6123      	str	r3, [r4, #16]
 8003774:	2300      	movs	r3, #0
 8003776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800377a:	e7aa      	b.n	80036d2 <_printf_i+0x146>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	4632      	mov	r2, r6
 8003780:	4649      	mov	r1, r9
 8003782:	4640      	mov	r0, r8
 8003784:	47d0      	blx	sl
 8003786:	3001      	adds	r0, #1
 8003788:	d0ad      	beq.n	80036e6 <_printf_i+0x15a>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	079b      	lsls	r3, r3, #30
 800378e:	d413      	bmi.n	80037b8 <_printf_i+0x22c>
 8003790:	68e0      	ldr	r0, [r4, #12]
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	4298      	cmp	r0, r3
 8003796:	bfb8      	it	lt
 8003798:	4618      	movlt	r0, r3
 800379a:	e7a6      	b.n	80036ea <_printf_i+0x15e>
 800379c:	2301      	movs	r3, #1
 800379e:	4632      	mov	r2, r6
 80037a0:	4649      	mov	r1, r9
 80037a2:	4640      	mov	r0, r8
 80037a4:	47d0      	blx	sl
 80037a6:	3001      	adds	r0, #1
 80037a8:	d09d      	beq.n	80036e6 <_printf_i+0x15a>
 80037aa:	3501      	adds	r5, #1
 80037ac:	68e3      	ldr	r3, [r4, #12]
 80037ae:	9903      	ldr	r1, [sp, #12]
 80037b0:	1a5b      	subs	r3, r3, r1
 80037b2:	42ab      	cmp	r3, r5
 80037b4:	dcf2      	bgt.n	800379c <_printf_i+0x210>
 80037b6:	e7eb      	b.n	8003790 <_printf_i+0x204>
 80037b8:	2500      	movs	r5, #0
 80037ba:	f104 0619 	add.w	r6, r4, #25
 80037be:	e7f5      	b.n	80037ac <_printf_i+0x220>
 80037c0:	080038f9 	.word	0x080038f9
 80037c4:	0800390a 	.word	0x0800390a

080037c8 <memmove>:
 80037c8:	4288      	cmp	r0, r1
 80037ca:	b510      	push	{r4, lr}
 80037cc:	eb01 0402 	add.w	r4, r1, r2
 80037d0:	d902      	bls.n	80037d8 <memmove+0x10>
 80037d2:	4284      	cmp	r4, r0
 80037d4:	4623      	mov	r3, r4
 80037d6:	d807      	bhi.n	80037e8 <memmove+0x20>
 80037d8:	1e43      	subs	r3, r0, #1
 80037da:	42a1      	cmp	r1, r4
 80037dc:	d008      	beq.n	80037f0 <memmove+0x28>
 80037de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037e6:	e7f8      	b.n	80037da <memmove+0x12>
 80037e8:	4402      	add	r2, r0
 80037ea:	4601      	mov	r1, r0
 80037ec:	428a      	cmp	r2, r1
 80037ee:	d100      	bne.n	80037f2 <memmove+0x2a>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037fa:	e7f7      	b.n	80037ec <memmove+0x24>

080037fc <_sbrk_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d06      	ldr	r5, [pc, #24]	@ (8003818 <_sbrk_r+0x1c>)
 8003800:	2300      	movs	r3, #0
 8003802:	4604      	mov	r4, r0
 8003804:	4608      	mov	r0, r1
 8003806:	602b      	str	r3, [r5, #0]
 8003808:	f7fd f9d0 	bl	8000bac <_sbrk>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	d102      	bne.n	8003816 <_sbrk_r+0x1a>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	b103      	cbz	r3, 8003816 <_sbrk_r+0x1a>
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	2000025c 	.word	0x2000025c

0800381c <memcpy>:
 800381c:	440a      	add	r2, r1
 800381e:	4291      	cmp	r1, r2
 8003820:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003824:	d100      	bne.n	8003828 <memcpy+0xc>
 8003826:	4770      	bx	lr
 8003828:	b510      	push	{r4, lr}
 800382a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800382e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003832:	4291      	cmp	r1, r2
 8003834:	d1f9      	bne.n	800382a <memcpy+0xe>
 8003836:	bd10      	pop	{r4, pc}

08003838 <_realloc_r>:
 8003838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383c:	4607      	mov	r7, r0
 800383e:	4614      	mov	r4, r2
 8003840:	460d      	mov	r5, r1
 8003842:	b921      	cbnz	r1, 800384e <_realloc_r+0x16>
 8003844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	4611      	mov	r1, r2
 800384a:	f7ff bc4d 	b.w	80030e8 <_malloc_r>
 800384e:	b92a      	cbnz	r2, 800385c <_realloc_r+0x24>
 8003850:	f7ff fbde 	bl	8003010 <_free_r>
 8003854:	4625      	mov	r5, r4
 8003856:	4628      	mov	r0, r5
 8003858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800385c:	f000 f81a 	bl	8003894 <_malloc_usable_size_r>
 8003860:	4284      	cmp	r4, r0
 8003862:	4606      	mov	r6, r0
 8003864:	d802      	bhi.n	800386c <_realloc_r+0x34>
 8003866:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800386a:	d8f4      	bhi.n	8003856 <_realloc_r+0x1e>
 800386c:	4621      	mov	r1, r4
 800386e:	4638      	mov	r0, r7
 8003870:	f7ff fc3a 	bl	80030e8 <_malloc_r>
 8003874:	4680      	mov	r8, r0
 8003876:	b908      	cbnz	r0, 800387c <_realloc_r+0x44>
 8003878:	4645      	mov	r5, r8
 800387a:	e7ec      	b.n	8003856 <_realloc_r+0x1e>
 800387c:	42b4      	cmp	r4, r6
 800387e:	4622      	mov	r2, r4
 8003880:	4629      	mov	r1, r5
 8003882:	bf28      	it	cs
 8003884:	4632      	movcs	r2, r6
 8003886:	f7ff ffc9 	bl	800381c <memcpy>
 800388a:	4629      	mov	r1, r5
 800388c:	4638      	mov	r0, r7
 800388e:	f7ff fbbf 	bl	8003010 <_free_r>
 8003892:	e7f1      	b.n	8003878 <_realloc_r+0x40>

08003894 <_malloc_usable_size_r>:
 8003894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003898:	1f18      	subs	r0, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	bfbc      	itt	lt
 800389e:	580b      	ldrlt	r3, [r1, r0]
 80038a0:	18c0      	addlt	r0, r0, r3
 80038a2:	4770      	bx	lr

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
